{
    "project": {
        "name": "fireball",
        "description": "Fireball is the Html5 game engine for the future.",
        "version": "0.5.0",
        "url": "http://docs.fireball-x.com/",
        "logo": "http://docs.fireball-x.com/images/logo.png"
    },
    "files": {
        "utils/api/editor-framework/core/debugger.js": {
            "name": "utils/api/editor-framework/core/debugger.js",
            "modules": {
                "Editor.Debugger": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/editor-init.js": {
            "name": "utils/api/editor-framework/core/editor-init.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/editor-menu.js": {
            "name": "utils/api/editor-framework/core/editor-menu.js",
            "modules": {},
            "classes": {
                "Menu": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/editor-package.js": {
            "name": "utils/api/editor-framework/core/editor-package.js",
            "modules": {
                "Editor.Package": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/editor-panel.js": {
            "name": "utils/api/editor-framework/core/editor-panel.js",
            "modules": {
                "Editor.Panel": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/editor-window.js": {
            "name": "utils/api/editor-framework/core/editor-window.js",
            "modules": {},
            "classes": {
                "Window": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/ipc-init.js": {
            "name": "utils/api/editor-framework/core/ipc-init.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/main-menu.js": {
            "name": "utils/api/editor-framework/core/main-menu.js",
            "modules": {
                "Editor.MainMenu": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/core/protocol-init.js": {
            "name": "utils/api/editor-framework/core/protocol-init.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/page/editor-init.js": {
            "name": "utils/api/editor-framework/page/editor-init.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/page/ipc-init.js": {
            "name": "utils/api/editor-framework/page/ipc-init.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/editor-utils.js": {
            "name": "utils/api/editor-framework/share/editor-utils.js",
            "modules": {
                "Editor.Utils": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/ipc-init.js": {
            "name": "utils/api/editor-framework/share/ipc-init.js",
            "modules": {},
            "classes": {
                "IpcListener": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/js-utils.js": {
            "name": "utils/api/editor-framework/share/js-utils.js",
            "modules": {
                "Editor.JS": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/keycode.js": {
            "name": "utils/api/editor-framework/share/keycode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/math.js": {
            "name": "utils/api/editor-framework/share/math.js",
            "modules": {
                "Math": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/platform.js": {
            "name": "utils/api/editor-framework/share/platform.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/share/selection.js": {
            "name": "utils/api/editor-framework/share/selection.js",
            "modules": {
                "Editor.Selection": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "utils/api/editor-framework/init.js": {
            "name": "utils/api/editor-framework/init.js",
            "modules": {
                "Editor": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Editor.Debugger": {
            "name": "Editor.Debugger",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/core/debugger.js",
            "line": 4,
            "type": "modules",
            "description": "The `core-level` debugger utils, when you turn on the debugger,\nit actually run a [node-inspector](https://github.com/node-inspector/node-inspector)\nprocess in the low-level, and you can use your chrome browser debug the core module."
        },
        "Editor": {
            "name": "Editor",
            "submodules": {},
            "classes": {
                "Menu": 1,
                "Window": 1,
                "IpcListener": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/init.js",
            "line": 1,
            "type": "modules",
            "description": "Editor is a module contains app-wide core editor functionality. You can access properties or methods of Editor module anytime, anywhere in Fireball",
            "itemtype": "main"
        },
        "Editor.Package": {
            "name": "Editor.Package",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 9,
            "type": "modules",
            "description": "Package module for manipulating packages"
        },
        "Editor.Panel": {
            "name": "Editor.Panel",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 4,
            "type": "modules",
            "description": "Panel module for operating specific panel"
        },
        "Editor.MainMenu": {
            "name": "Editor.MainMenu",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/core/main-menu.js",
            "line": 247,
            "type": "modules",
            "description": "The main menu module for manipulating main menu items"
        },
        "Editor.Utils": {
            "name": "Editor.Utils",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/share/editor-utils.js",
            "line": 1,
            "type": "modules",
            "description": ""
        },
        "Editor.JS": {
            "name": "Editor.JS",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 13,
            "type": "modules",
            "description": "Extending JavaScript to better handle property and class inheritance"
        },
        "Math": {
            "name": "Math",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/share/math.js",
            "line": 5,
            "type": "modules",
            "description": "Extends the JavaScript built-in object that has properties and methods for mathematical constants and functions.\nSee [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)",
            "itemtype": "main"
        },
        "Editor.Selection": {
            "name": "Editor.Selection",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 6,
            "type": "modules",
            "description": "Selection module"
        }
    },
    "classes": {
        "Menu": {
            "name": "Menu",
            "shortname": "Menu",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "",
            "is_enum": false,
            "type": "classes",
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 130,
            "description": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "template",
                    "description": "Menu template for initialize. The template take the options of\nElectron's [Menu Item](https://github.com/atom/electron/blob/master/docs/api/menu-item.md)\nplus the following properties.",
                    "type": "Object[]|object",
                    "props": [
                        {
                            "name": "message",
                            "description": "Ipc message name.",
                            "type": "String"
                        },
                        {
                            "name": "command",
                            "description": "A global function in core level (e.g. Editor.foo.bar ).",
                            "type": "String"
                        },
                        {
                            "name": "params",
                            "description": "The parameters passed through ipc.",
                            "type": "Array"
                        },
                        {
                            "name": "panel",
                            "description": "The panelID, if specified, the message will send to panel.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "webContents] - A [WebContents",
                    "description": "(https://github.com/atom/electron/blob/master/docs/api/browser-window.md#class-webcontents) object.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Window": {
            "name": "Window",
            "shortname": "Window",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "",
            "is_enum": false,
            "type": "classes",
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 11,
            "description": "Window class for operating editor window",
            "extends": "EventEmitter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The window name",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options use [BrowserWindow's options](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#new-browserwindowoptions)\nwith the following additional field:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "'window-type'",
                            "description": "Can be one of the list:\n - `dockable`: Indicate the window contains a dockable panel\n - `float`: Indicate the window is standalone, and float on top.\n - `fixed-size`: Indicate the window is standalone, float on top and non-resizable.\n - `quick`: Indicate the window will never destroyed, it only hides itself when it close which make it quick to show the next time.",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "IpcListener": {
            "name": "IpcListener",
            "shortname": "IpcListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Editor",
            "namespace": "",
            "is_enum": false,
            "type": "classes",
            "file": "utils/api/editor-framework/share/ipc-init.js",
            "line": 29,
            "description": "IpcListener for easily manage ipc events",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "utils/api/editor-framework/core/debugger.js",
            "line": 14,
            "description": "Toggle on or off the `core-level` debugger",
            "itemtype": "method",
            "name": "toggle",
            "class": "",
            "module": "Editor.Debugger",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/debugger.js",
            "line": 27,
            "description": "Turn on the `core-level` debugger",
            "itemtype": "method",
            "name": "open",
            "class": "",
            "module": "Editor.Debugger",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/debugger.js",
            "line": 52,
            "description": "Turn off the `core-level` debugger",
            "itemtype": "method",
            "name": "close",
            "class": "",
            "module": "Editor.Debugger",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 21,
            "description": "Log the normal message and show on the console.\nThe method will send ipc message `console:log` to all windows.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 37,
            "description": "Log the success message and show on the console\nThe method will send ipc message `console:success` to all windows.",
            "itemtype": "method",
            "name": "success",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 53,
            "description": "Log the failed message and show on the console\nThe method will send ipc message `console:failed` to all windows.",
            "itemtype": "method",
            "name": "failed",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 69,
            "description": "Log the info message and show on the console\nThe method will send ipc message `console:info` to all windows.",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 85,
            "description": "Log the warnning message and show on the console,\nit also shows the call stack start from the function call it.\nThe method will send ipc message `console:warn` to all windows.",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 106,
            "description": "Log the error message and show on the console,\nit also shows the call stack start from the function call it.\nThe method will sends ipc message `console:error` to all windows.",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 127,
            "description": "Log the fatal message and show on the console,\nthe app will quit immediately after that.",
            "itemtype": "method",
            "name": "fatal",
            "params": [
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 147,
            "description": "Connect to console panel. Once the console connected, all logs will kept in `core-level` and display\non the console panel in `page-level`.",
            "itemtype": "method",
            "name": "connectToConsole",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 156,
            "description": "Clear the logs",
            "itemtype": "method",
            "name": "clearLog",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 197,
            "description": "Load profile via `name` and `type`, if no profile found, it will use the `defaultProfile` and save it to the disk.\nYou must register your profile path with `type` via {@link Editor.registerProfilePath} before you\ncan use it. The Editor Framework will search a profile under your register path with the `name`.",
            "itemtype": "method",
            "name": "loadProfile",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the profile.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of the profile, make sure you register the type via {@link Editor.registerProfilePath}.",
                    "type": "String"
                },
                {
                    "name": "defaultProfile",
                    "description": "The default profile to use if the profile is not found.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A profile object with two additional function:\n - save: save the profile.\n - clear: clear all properties in the profile.",
                "type": "Object"
            },
            "see": [
                "Editor.registerProfilePath"
            ],
            "example": [
                "\n```js\n// register a project profile\nEditor.registerProfilePath( 'project', '~/foo/bar');\n\n// load the profile at ~/foo/bar/foobar.json\nvar foobarProfile = Editor.loadProfile( 'foobar', 'project', {\n  foo: 'foo',\n  bar: 'bar',\n});\n\n// change and save your profile\nfoobarProfile.foo = 'hello foo';\nfoobarProfile.save();\n```"
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 297,
            "description": "Quit the App",
            "itemtype": "method",
            "name": "quit",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 334,
            "description": "Search and load all packages from the path you registerred\n{{#crossLink \"Editor.registerPackagePath\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "loadAllPackages",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 360,
            "description": "Watch packages",
            "itemtype": "method",
            "name": "watchPackages",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 471,
            "description": "Register profile type with the path you provide.\n{{#crossLink \"Editor.loadProfile\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "registerProfilePath",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the profile you want to register.",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "The path for the register type.",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 482,
            "description": "Register a path, when loading packages, it will search the path you registerred.\n{{#crossLink \"Editor.loadPackages\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "registerPackagePath",
            "params": [
                {
                    "name": "path",
                    "description": "A absolute path for searching your packages.",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 492,
            "description": "Unregister a package path",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 502,
            "description": "Register a path, when loading packages, it will search the path you registerred.\n{{#crossLink \"Editor.loadPackages\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "registerDefaultLayout",
            "params": [
                {
                    "name": "path",
                    "description": "A absolute path for searching your packages.",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-init.js",
            "line": 512,
            "description": "register default main menu template function",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "tmplFn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 152,
            "description": "De-reference the native menu.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 160,
            "description": "Reset the menu from the template.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "Object[]|object"
                }
            ],
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 170,
            "description": "Clear all menu item in it.",
            "itemtype": "method",
            "name": "clear",
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 178,
            "description": "Build a template into menu item and add it to path",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "path",
                    "description": "A menu path",
                    "type": "String"
                },
                {
                    "name": "template",
                    "description": "",
                    "type": "Object[]|object"
                }
            ],
            "example": [
                "\n```js\nvar editorMenu = new Editor.Menu();\neditorMenu.add( 'foo/bar', {\n    label: foobar,\n    message: 'foobar:say',\n    params: ['foobar: hello!']\n});\n```"
            ],
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 243,
            "description": "Remove menu item at path.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "path",
                    "description": "A menu path",
                    "type": "String"
                }
            ],
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 263,
            "description": "Set menu options at path.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "path",
                    "description": "A menu path",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "icon] - A [NativeImage",
                            "description": "(https://github.com/atom/electron/blob/master/docs/api/native-image.md)",
                            "type": "NativeImage",
                            "optional": true
                        },
                        {
                            "name": "enabled",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "visible",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "checked",
                            "description": "NOTE: You must set your menu-item type to 'checkbox' to make it work",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-menu.js",
            "line": 301,
            "description": "Parse the menu template to process additional keyword we added for Electron.\nIf webContents provided, the `template.message` will send to the target webContents.",
            "itemtype": "method",
            "name": "parseTemplate",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "Object[]|object"
                },
                {
                    "name": "webContents] - A [WebContents",
                    "description": "(https://github.com/atom/electron/blob/master/docs/api/browser-window.md#class-webcontents) object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Menu",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 40,
            "description": "Load a package at path",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "path",
                    "description": "An absolute path point to a package folder",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback when finish loading",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 186,
            "description": "Unload a package at path",
            "itemtype": "method",
            "name": "unload",
            "params": [
                {
                    "name": "path",
                    "description": "An absolute path point to a package folder",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback when finish unloading",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 253,
            "description": "Reload a package at path",
            "itemtype": "method",
            "name": "reload",
            "params": [
                {
                    "name": "path",
                    "description": "An absolute path point to a package folder",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "rebuild",
                            "description": "If rebuild the project",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback when finish reloading",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 294,
            "description": "Find and get panel info via panelID, the panel info is the json object\nthat defined in `panels.{panel-name}` in your package.json",
            "itemtype": "method",
            "name": "panelInfo",
            "params": [
                {
                    "name": "panelID",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 305,
            "description": "Find and get panel info via widgetName, the widget info is the json object\nthat defined in `widgets.{widget-name}` in your package.json",
            "itemtype": "method",
            "name": "widgetInfo",
            "params": [
                {
                    "name": "widgetName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 316,
            "description": "Find and get package info via path, the package info is the json object of your package.json file",
            "itemtype": "method",
            "name": "packageInfo",
            "params": [
                {
                    "name": "path",
                    "description": "The path can be any files in this package",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 331,
            "description": "Return the path of the package by name",
            "itemtype": "method",
            "name": "packagePath",
            "params": [
                {
                    "name": "packageName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-package.js",
            "line": 341,
            "description": "Build package at path",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Package",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 54,
            "description": "Open a panel and pass argv to it. The argv will be sent as argument in `panel:open` message in page-level",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "panelID",
                    "description": "a panelID",
                    "type": "String"
                },
                {
                    "name": "argv",
                    "description": "argument store as key-value table, which will pass later",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "Editor.Panel",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 131,
            "description": "Close a panel via panelID",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "panelID",
                    "description": "a panelID",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor.Panel",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 159,
            "description": "Find and return an editor window that contains the panelID",
            "itemtype": "method",
            "name": "findWindow",
            "params": [
                {
                    "name": "panelID",
                    "description": "a panelID",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Editor.Window"
            },
            "class": "",
            "module": "Editor.Panel",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 169,
            "description": "Find and return editor window list that contains panel defined in package via packageName",
            "itemtype": "method",
            "name": "findWindows",
            "params": [
                {
                    "name": "packageName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Editor.Window[]"
            },
            "class": "",
            "module": "Editor.Panel",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 195,
            "description": "Find and return panel ID list that contains panel defined in package via packageName",
            "itemtype": "method",
            "name": "findPanels",
            "params": [
                {
                    "name": "packageName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "",
            "module": "Editor.Panel",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-panel.js",
            "line": 218,
            "description": "Close all panels defined in package via packageName",
            "itemtype": "method",
            "name": "closeAll",
            "params": [
                {
                    "name": "packageName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor.Panel",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 147,
            "description": "w",
            "itemtype": "property",
            "name": "isMainWindo",
            "type": "Boolean",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 157,
            "description": "d",
            "itemtype": "property",
            "name": "isFocuse",
            "type": "Boolean",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 167,
            "description": "d",
            "itemtype": "property",
            "name": "isMinimize",
            "type": "Boolean",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 177,
            "description": "d",
            "itemtype": "property",
            "name": "isLoade",
            "type": "Boolean",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 187,
            "description": "Dereference the native window.",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 195,
            "description": "load page by url, and send argv in query property of the url. The page level will parse\nthe argv when the page is ready and save it in Editor.argv in page level",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "argv",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 219,
            "description": "Show the window",
            "itemtype": "method",
            "name": "show",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 227,
            "description": "Close the window",
            "itemtype": "method",
            "name": "close",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 236,
            "description": "Focus on the window",
            "itemtype": "method",
            "name": "focus",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 244,
            "description": "Minimize the window",
            "itemtype": "method",
            "name": "minimize",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 252,
            "description": "Restore the window",
            "itemtype": "method",
            "name": "restore",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 260,
            "description": "Open the dev-tools",
            "itemtype": "method",
            "name": "openDevTools",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "detach",
                            "description": "If open the dev-tools in a new window",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 270,
            "description": "Try to adjust the window to fit the position and size we give",
            "itemtype": "method",
            "name": "adjust",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 309,
            "description": "Commit the current window state",
            "itemtype": "method",
            "name": "commitWindowState",
            "params": [
                {
                    "name": "layoutInfo",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 336,
            "description": "Restore window's position and size from the `local` profile `layout.windows.json`",
            "itemtype": "method",
            "name": "restorePositionAndSize",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 360,
            "description": "s",
            "itemtype": "property",
            "name": "window",
            "type": "Editor.Window[]",
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 385,
            "description": "Find window by name or by BrowserWindow instance",
            "itemtype": "method",
            "name": "find",
            "static": 1,
            "params": [
                {
                    "name": "param",
                    "description": "",
                    "type": "String|BrowserWindow"
                }
            ],
            "return": {
                "description": "",
                "type": "Editor.Window"
            },
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 416,
            "description": "Add an editor window",
            "itemtype": "method",
            "name": "addWindow",
            "static": 1,
            "params": [
                {
                    "name": "win",
                    "description": "",
                    "type": "Editor.Window"
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 426,
            "description": "Remove an editor window",
            "itemtype": "method",
            "name": "removeWindow",
            "static": 1,
            "params": [
                {
                    "name": "win",
                    "description": "",
                    "type": "Editor.Window"
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 443,
            "description": "Commit all opened window states",
            "itemtype": "method",
            "name": "commitWindowStates",
            "static": 1,
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 455,
            "description": "Save current windows' states to profile `layout.windows.json` at `local`",
            "itemtype": "method",
            "name": "saveWindowStates",
            "static": 1,
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 478,
            "description": "Send ipc messages to page",
            "itemtype": "method",
            "name": "sendToPage",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the request needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 495,
            "description": "Send request to page and wait for the reply\n[Editor.Window.cancelRequestToPage]",
            "itemtype": "method",
            "name": "sendRequestToPage",
            "params": [
                {
                    "name": "request",
                    "description": "the request to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the request needs",
                    "type": "...*",
                    "optional": true
                },
                {
                    "name": "reply",
                    "description": "the callback used to handle replied arguments",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The session id can be used in Editor.Window.cancelRequestToCore",
                "type": "Number"
            },
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/editor-window.js",
            "line": 529,
            "description": "Cancel request via sessionId",
            "itemtype": "method",
            "name": "cancelRequestToPage",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Window",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/core/ipc-init.js",
            "line": 140,
            "description": "Send `args...` to windows except the excluded",
            "itemtype": "method",
            "name": "sendToWindowsExclude",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                },
                {
                    "name": "excluded",
                    "description": "A [WebContents](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#class-webcontents) object.",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/ipc-init.js",
            "line": 158,
            "description": "Send `args...` to all opened windows via `channel` in asynchronous message. The `page-level`\ncan handle it by listening to the channel event of the ipc module.",
            "itemtype": "method",
            "name": "sendToWindows",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "example": [
                "\nIn `core-level`:\n\n```js\nEditor.sendToWindows('foo:bar', 'Hello World!');\n```\n\nIn `page-level`:\n\n```html\n// index.html\n<html>\n<body>\n  <script>\n    require('ipc').on('foo:bar', function(message) {\n      console.log(message);  // Prints \"Hello World!\"\n    });\n  </script>\n</body>\n</html>\n```"
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/ipc-init.js",
            "line": 196,
            "description": "Send `args...` to core itself via `channel` in asynchronous message.",
            "itemtype": "method",
            "name": "sendToCore",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/ipc-init.js",
            "line": 208,
            "description": "Send `args...` to all opened window and core via `channel` in asynchronous message.",
            "itemtype": "method",
            "name": "sendToAll",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/ipc-init.js",
            "line": 250,
            "description": "Send `args...` to specific panel via `channel` in asynchronous message.",
            "itemtype": "method",
            "name": "sendToPanel",
            "params": [
                {
                    "name": "panelID",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "example": [
                "\n```js\nEditor.sendToPanel( 'package.panel', 'ipc-foo-bar', 'arg1', 'arg2', ... );\n```"
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/ipc-init.js",
            "line": 273,
            "description": "Send `args...` to main window via `channel` in asynchronous message.",
            "itemtype": "method",
            "name": "sendToMainWindow",
            "params": [
                {
                    "name": "channel",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/main-menu.js",
            "line": 253,
            "description": "Apply main menu changes",
            "itemtype": "method",
            "name": "apply",
            "class": "",
            "module": "Editor.MainMenu",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/main-menu.js",
            "line": 261,
            "description": "Reset main menu to its default template",
            "itemtype": "method",
            "name": "reset",
            "class": "",
            "module": "Editor.MainMenu",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/main-menu.js",
            "line": 270,
            "description": "Build a template into menu item and add it to path",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "path",
                    "description": "A menu path",
                    "type": "String"
                },
                {
                    "name": "template",
                    "description": "",
                    "type": "Object[]|object"
                }
            ],
            "class": "",
            "module": "Editor.MainMenu",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/main-menu.js",
            "line": 282,
            "description": "Remove menu item at path.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "path",
                    "description": "A menu path",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor.MainMenu",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/main-menu.js",
            "line": 293,
            "description": "Set menu options at path.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "path",
                    "description": "A menu path",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "icon] - A [NativeImage",
                            "description": "(https://github.com/atom/electron/blob/master/docs/api/native-image.md)",
                            "type": "NativeImage",
                            "optional": true
                        },
                        {
                            "name": "enabled",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "visible",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "checked",
                            "description": "NOTE: You must set your menu-item type to 'checkbox' to make it work",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "",
            "module": "Editor.MainMenu",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/protocol-init.js",
            "line": 101,
            "description": "Convert a url by its protocol to a filesystem path. This function is useful when you try to\nget some internal file. You can use {@link Editor.registerProtocol} to register and map your filesystem\npath to url. By default, Editor Framework register `editor-framework://` and `app://` protocol.",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n```js\n// it will return \"{your-app-path}/foobar/foobar.js\"\nEditor.url('app://foobar/foobar.js');\n```"
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/protocol-init.js",
            "line": 130,
            "description": "Require module through url path",
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/core/protocol-init.js",
            "line": 139,
            "description": "Register a protocol so that {@link Editor.url} can use it to convert an url to the filesystem path.\nThe `fn` accept an url Object via [url.parse](https://iojs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost)",
            "itemtype": "method",
            "name": "registerProtocol",
            "params": [
                {
                    "name": "protocol",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "example": [
                "\n```js\nvar Path = require('path');\n\nvar _url2path = function ( base ) {\n    return function ( urlInfo ) {\n        if ( urlInfo.pathname ) {\n            return Path.join( base, urlInfo.host, urlInfo.pathname );\n        }\n        return Path.join( base, urlInfo.host );\n    };\n};\n\nEditor.registerProtocol('editor-framework', _url2path(Editor.frameworkPath));\n```"
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/editor-init.js",
            "line": 16,
            "description": "Require module through url path",
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/editor-init.js",
            "line": 79,
            "description": "Log the normal message and show on the console.\nThe method will send ipc message `console:log` to core.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 50,
            "description": "Send message to core-level synchronized and return a result which is responded from core-level",
            "itemtype": "method",
            "name": "sendToCoreSync",
            "params": [
                {
                    "name": "message",
                    "description": "the message to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "return": {
                "description": "results"
            },
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 68,
            "description": "Send message to editor-core, which is so called as main app, or atom shell's browser side.",
            "itemtype": "method",
            "name": "sendToCore",
            "params": [
                {
                    "name": "message",
                    "description": "the message to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 85,
            "description": "Broadcast message to all pages.\nThe page is so called as atom shell's web side. Each application window is an independent page and has its own JavaScript context.",
            "itemtype": "method",
            "name": "sendToWindows",
            "params": [
                {
                    "name": "message",
                    "description": "the message to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "you can indicate the options such as Editor.selfExcluded",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 104,
            "description": "Broadcast message to main page.\nThe page is so called as atom shell's web side. Each application window is an independent page and has its own JavaScript context.",
            "itemtype": "method",
            "name": "sendToMainWindow",
            "params": [
                {
                    "name": "message",
                    "description": "the message to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 122,
            "description": "Broadcast message to all pages and editor-core",
            "itemtype": "method",
            "name": "sendToAll",
            "params": [
                {
                    "name": "message",
                    "description": "the message to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "you can indicate the options such as Editor.selfExcluded",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 140,
            "description": "Send message to specific panel",
            "itemtype": "method",
            "name": "sendToPanel",
            "params": [
                {
                    "name": "panelID",
                    "description": "the panel id",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "the message to send",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the message needs",
                    "type": "...*",
                    "optional": true
                }
            ],
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 161,
            "description": "Send `args...` to core via `channel` in asynchronous message, and waiting for the `core-level`\nto reply the message through `callback`.",
            "itemtype": "method",
            "name": "sendRequestToCore",
            "params": [
                {
                    "name": "channel",
                    "description": "the request message channel",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "whatever arguments the request needs",
                    "type": "...*",
                    "optional": true
                },
                {
                    "name": "reply",
                    "description": "the callback used to handle replied arguments",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "session id, can be used in Editor.cancelRequestToCore",
                "type": "Number"
            },
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/page/ipc-init.js",
            "line": 195,
            "description": "Cancel request sent to core by sessionId",
            "itemtype": "method",
            "name": "cancelRequestToCore",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/editor-utils.js",
            "line": 6,
            "itemtype": "method",
            "name": "padLeft",
            "description": "",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ch",
                    "description": "the character used to pad",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Utils",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/editor-utils.js",
            "line": 22,
            "itemtype": "method",
            "name": "formatFrame",
            "description": "",
            "params": [
                {
                    "name": "frame",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "frameRate",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Utils",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/editor-utils.js",
            "line": 40,
            "itemtype": "method",
            "name": "smoothScale",
            "description": "",
            "params": [
                {
                    "name": "curScale",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "",
            "module": "Editor.Utils",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/editor-utils.js",
            "line": 52,
            "description": "Wrap error so that it can be sent between core and page level",
            "itemtype": "method",
            "name": "wrapError",
            "class": "",
            "module": "Editor.Utils",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/ipc-init.js",
            "line": 7,
            "description": "This option is used to indicate that the message should not send to self.\nIt must be supplied as the last argument of your message if you want.",
            "itemtype": "property",
            "name": "selfExcluded",
            "type": "{Object}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/ipc-init.js",
            "line": 18,
            "description": "This option is used to indicate that the message listener should receive a ipc event as its first argument.\nIt must be supplied as the last argument of your message if you want.",
            "itemtype": "property",
            "name": "requireIpcEvent",
            "type": "{Object}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/ipc-init.js",
            "line": 38,
            "description": "Register ipc message and respond it with the callback function",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "ipc",
                    "description": "message name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "IpcListener",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/share/ipc-init.js",
            "line": 49,
            "description": "Register ipc message and respond it once with the callback function",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "ipc",
                    "description": "message name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "IpcListener",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/share/ipc-init.js",
            "line": 60,
            "description": "Clear all registered ipc messages in this ipc listener",
            "itemtype": "method",
            "name": "clear",
            "class": "IpcListener",
            "module": "Editor",
            "_global": false
        },
        {
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 18,
            "description": "Copy property by name from source to target",
            "itemtype": "method",
            "name": "copyprop",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "Editor.JS",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 27,
            "description": "copy all properties not defined in obj from arguments[1...n]",
            "itemtype": "method",
            "name": "addon",
            "params": [
                {
                    "name": "obj",
                    "description": "object to extend its properties",
                    "type": "Object"
                },
                {
                    "name": "sourceObj",
                    "description": "source object to copy properties from",
                    "type": "...object"
                }
            ],
            "return": {
                "description": "the result obj",
                "type": "Object"
            },
            "class": "",
            "module": "Editor.JS",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 48,
            "description": "Extract properties by `propNames` from `obj`",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "obj",
                    "description": "object to extend its properties",
                    "type": "Object"
                },
                {
                    "name": "propNames",
                    "description": "",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "the result obj",
                "type": "Object"
            },
            "class": "",
            "module": "Editor.JS",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 67,
            "description": "Copy all properties from arguments[1...n] to obj",
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "sourceObj",
                    "description": "",
                    "type": "...object"
                }
            ],
            "return": {
                "description": "the result obj",
                "type": "Object"
            },
            "class": "",
            "module": "Editor.JS",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 92,
            "description": "Derive the class from the supplied base class.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "cls",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "base",
                    "description": "the baseclass to inherit",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the result class",
                "type": "Function"
            },
            "class": "",
            "module": "Editor.JS",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/js-utils.js",
            "line": 117,
            "description": "Removes all enumerable properties from object",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "",
            "module": "Editor.JS",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/keycode.js",
            "line": 8,
            "description": "Conenience method returns corresponding value for given keyName or keyCode.",
            "itemtype": "method",
            "name": "KeyCode",
            "params": [
                {
                    "name": "key",
                    "description": "Can be number(key-code) or string(key-name)",
                    "type": "Number|string"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|string"
            },
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 14,
            "itemtype": "property",
            "name": "TWO_PI",
            "type": "number",
            "description": "Two Pi",
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 19,
            "itemtype": "property",
            "name": "HALF_PI",
            "type": "number",
            "description": "Half Pi",
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 24,
            "itemtype": "property",
            "name": "D",
            "type": "number",
            "description": "2R - degree to radius",
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 29,
            "itemtype": "property",
            "name": "R",
            "type": "number",
            "description": "2D - radius to degree",
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 34,
            "description": "degree to radius",
            "itemtype": "method",
            "name": "deg2rad",
            "params": [
                {
                    "name": "degree",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "radius",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 44,
            "description": "radius to degree",
            "itemtype": "method",
            "name": "rad2deg",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "degree",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 54,
            "description": "let radius in -pi to pi",
            "itemtype": "method",
            "name": "rad180",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "clamped radius",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 67,
            "description": "let radius in 0 to 2pi",
            "itemtype": "method",
            "name": "rad360",
            "params": [
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "clamped radius",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 81,
            "description": "let degree in -180 to 180",
            "itemtype": "method",
            "name": "deg180",
            "params": [
                {
                    "name": "degree",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "clamped degree",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 95,
            "description": "let degree in 0 to 360",
            "itemtype": "method",
            "name": "deg360",
            "params": [
                {
                    "name": "degree",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "clamped degree",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 109,
            "description": "Returns a floating-point random number between min (inclusive) and max (exclusive).",
            "itemtype": "method",
            "name": "randomRange",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 120,
            "description": "Returns a random integer between min (inclusive) and max (exclusive).",
            "itemtype": "method",
            "name": "randomRangeInt",
            "params": [
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random integer",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 131,
            "description": "Clamps a value between a minimum float and maximum float value.",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 155,
            "description": "Clamps a value between 0 and 1.",
            "itemtype": "method",
            "name": "clamp01",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 167,
            "itemtype": "method",
            "name": "calculateMaxRect",
            "description": "",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Rect"
                },
                {
                    "name": "p0",
                    "description": "",
                    "type": "Vec2"
                },
                {
                    "name": "p1",
                    "description": "",
                    "type": "Vec2"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "Vec2"
                },
                {
                    "name": "p3",
                    "description": "",
                    "type": "Vec2"
                }
            ],
            "return": {
                "description": "just the out rect itself",
                "type": "Rect"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/math.js",
            "line": 188,
            "itemtype": "method",
            "name": "lerp",
            "description": "",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ratio",
                    "description": "the interpolation coefficient",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "",
            "module": "Math",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 5,
            "description": "indicates whether executes in node.js application",
            "itemtype": "property",
            "name": "isNode",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 12,
            "description": "indicates whether executes in electron",
            "itemtype": "property",
            "name": "isElectron",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 19,
            "description": "indicates whether executes in native environment (compare to web-browser)",
            "itemtype": "property",
            "name": "isNative",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 26,
            "description": "indicates whether executes in common web browser",
            "itemtype": "property",
            "name": "isPureWeb",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 33,
            "description": "indicates whether executes in common web browser, or editor's window process(electron's renderer context)",
            "itemtype": "property",
            "name": "isPageLevel",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 44,
            "description": "indicates whether executes in editor's core process(electron's browser context)",
            "itemtype": "property",
            "name": "isCoreLevel",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 52,
            "description": "indicates whether executes in OSX",
            "itemtype": "property",
            "name": "isDarwin",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 59,
            "description": "indicates whether executes in Windows",
            "itemtype": "property",
            "name": "isWin32",
            "type": "{Boolean}",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/platform.js",
            "line": 73,
            "description": "Check if running in retina display",
            "itemtype": "property",
            "name": "isRetina",
            "type": "boolean",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 276,
            "description": "Confirms all current selecting objects, no matter which type they are.\nThis operation may trigger deactivated and activated events.",
            "itemtype": "method",
            "name": "confirm",
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 287,
            "description": "Cancels all current selecting objects, no matter which type they are.\nThis operation may trigger selected and unselected events.",
            "itemtype": "method",
            "name": "cancel",
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 298,
            "description": "if confirm === false, it means you are in rect selecting state, but have not confirmed yet.\nin this state, the `selected` messages will be broadcasted, but the `activated` messages will not.\nafter that, if you confirm the selection, `activated` message will be sent, otherwise `unselected` message will be sent.\nif confirm === true, the activated will be sent in the same time.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "(string|string[])"
                },
                {
                    "name": "unselectOthers",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "confirm",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 334,
            "description": "unselect with type and id",
            "itemtype": "method",
            "name": "unselect",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "(string|string[])"
                },
                {
                    "name": "confirm",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 357,
            "itemtype": "method",
            "name": "hover",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 373,
            "itemtype": "method",
            "name": "setContext",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 388,
            "itemtype": "method",
            "name": "clear",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 403,
            "itemtype": "method",
            "name": "hovering",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "hovering",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 418,
            "itemtype": "method",
            "name": "contexts",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "contexts",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 433,
            "itemtype": "method",
            "name": "curActivate",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "current activated",
                "type": "String"
            },
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 448,
            "itemtype": "method",
            "name": "curSelection",
            "description": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "selected list",
                "type": "String[]"
            },
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/share/selection.js",
            "line": 463,
            "itemtype": "method",
            "name": "filter",
            "description": "",
            "params": [
                {
                    "name": "items",
                    "description": "an array of ids",
                    "type": "String[]"
                },
                {
                    "name": "mode",
                    "description": "['top-level', 'deep', 'name']",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Editor.Selection",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 18,
            "description": "The Editor.App is your app.js module. Read more details in\n[Define your application](https://github.com/fireball-x/editor-framework/blob/master/docs/manual/define-your-app.md).",
            "itemtype": "property",
            "name": "App",
            "type": "object",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 31,
            "description": "The current app.js running directory.",
            "itemtype": "property",
            "name": "cwd",
            "type": "string",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 68,
            "description": "The name of your app. It is defined in the `name` field in package.json",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 75,
            "description": "versions of your app and submodules",
            "itemtype": "property",
            "name": "versions",
            "type": "Object",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 85,
            "description": "The absolute path of your main entry file. Usually it is `{your-app}/app.js`.",
            "itemtype": "property",
            "name": "mainEntry",
            "type": "string",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 92,
            "description": "The editor framework module path. Usually it is `{your-app}/editor-framework/`",
            "itemtype": "property",
            "name": "frameworkPath",
            "type": "string",
            "class": "",
            "module": "Editor",
            "_global": true
        },
        {
            "file": "utils/api/editor-framework/init.js",
            "line": 99,
            "description": "Your application's data path. Usually it is `~/.{your-app-name}`",
            "itemtype": "property",
            "name": "appHome",
            "type": "string",
            "class": "",
            "module": "Editor",
            "_global": true
        }
    ],
    "classinherits": [
        [
            "EventEmitter",
            "Window"
        ]
    ],
    "warnings": [
        {
            "message": "Missing item type\nUnregister a package path",
            "line": " utils/api/editor-framework/core/editor-init.js:492"
        },
        {
            "message": "Missing item type\nDereference the native window.",
            "line": " utils/api/editor-framework/core/editor-window.js:187"
        }
    ]
}