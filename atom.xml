<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Fireball Docs]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://docs.fireball-x.com/"/>
  <updated>2015-09-01T10:01:47.000Z</updated>
  <id>http://docs.fireball-x.com/</id>
  
  <author>
    <name><![CDATA[Fireball Developers]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Event Binding]]></title>
    <link href="http://docs.fireball-x.com/editor/event-binding/"/>
    <id>http://docs.fireball-x.com/editor/event-binding/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Register_Listener">Register Listener</h2><p>One way for event binding is to register event listener in Polymer constructor:</p>
<pre><code class="html">&lt;template&gt;
  &lt;div&gt;I will respond&lt;/div&gt;
  &lt;div&gt;to a tap on&lt;/div&gt;
  &lt;div&gt;any of my children!&lt;/div&gt;
  &lt;div id=&quot;special&quot;&gt;I am special!&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
Polymer({
  is: &#39;x-custom&#39;,
  listeners: {
    &#39;tap&#39;: &#39;regularTap&#39;,
    &#39;special.tap&#39;: &#39;specialTap&#39;
  },
  regularTap: function(e) {
    alert(&quot;Thank you for tapping&quot;);
  },
  specialTap: function(e) {
    alert(&quot;It was special tapping&quot;);
  }
 })
 &lt;/script&gt;
</code></pre>
<p>We register event listener for current template in <code>listeners</code> property. Please notice you can use <code>nodeId.eventName</code> pattern to specify listener to one certain element.</p>
<h2 id="DOM_Attribute">DOM Attribute</h2><p>To add event listener to your element in editor web page, use <code>on-event</code> attribute on element DOM:</p>
<pre><code class="html">&lt;dom-module id=&quot;simple-tag&quot;&gt;
  &lt;template&gt;
    &lt;h1 on-click=&quot;changeText&quot;&gt;Click on this text!&lt;/h1&gt;
  &lt;/template&gt;
&lt;dom-module&gt;
&lt;script&gt;
  Polymer({
    is: &#39;simple-tag&#39;,
    changeText: function ( event ) {
      el.innerHTML = &quot;Ooops!&quot;;
    }
  })
&lt;/script&gt;
</code></pre>
<p>The above example binds <code>on-click</code> event to a <code>h1</code> element. And call <code>changeText</code> function when event fires.</p>
<p>Please notice the traditional <code>onclick=</code> pattern for DOM event binding will not work with methods defined in <code>Polymer()</code> constructor.</p>
<h2 id="Learn_More_About_Polymer_Event_Binding">Learn More About Polymer Event Binding</h2><ul>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/events.html#event-listeners" target="_blank" rel="external">Event Listener</a></li>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/events.html#annotated-listeners" target="_blank" rel="external">Annotated Event Listener</a></li>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/events.html#gestures" target="_blank" rel="external">Gestures</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Register_Listener">Register Listener</h2><p>One way for event binding is to register event listener in Polymer constructor:</p>
<pre]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://docs.fireball-x.com/undefined/"/>
    <id>http://docs.fireball-x.com/undefined/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Fireball_Source_Guide">Fireball Source Guide</h1><p>Fireball contains several submodule repos and other “dependency” repos. This doc will guide you through Fireball repo structure and important sub repos to help you better understand and hack Fireball.</p>
<h2 id="Fireball_Structure">Fireball Structure</h2><pre><code class="plain">Fireball
  |--engine-framework (Submodule, an Entity-Component interface for connecting Fireball Editor and other game engines)
  |--editor-framework (Submodule, the backbone of Fireball editor, a framework for easy dockable editor making)
  |--asset-db (Submodule, assets and data management system, integrated with VCS and custom data interpreter)
  |--canvas-studio (aka Fireball editor, an editor-framework app)
  |--dashboard (with user login, project management, tutorial and project tempalate browser)
  |--package-studio (a helper app for creating and testing packages)
  |--builtin (Cloned repo, builtin packages, such as console, package-manager, inspector)
  |--runtime (Cloned repo, each engine has a runtime in this folder)
  |--test (Unit test run in Electron environment)
</code></pre>
<p>Developers can utilize <strong>Engine-Framework</strong>, <strong>Editor-Framework</strong> and <strong>Asset-Database</strong> to combine their favorite game engine and editor tools to make the perfect game development toolset they need.</p>
<h2 id="Editor_Framework">Editor Framework</h2><p><code>TODO</code></p>
<h2 id="Engine_Framework">Engine Framework</h2><p><code>TODO</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Fireball_Source_Guide">Fireball Source Guide</h1><p>Fireball contains several submodule repos and other “dependency” repos. This doc]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nodes In Scene]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/nodes-in-scene/"/>
    <id>http://docs.fireball-x.com/manual/scripting/nodes-in-scene/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>What is a node in a scene-graph structure?</p>
<p>From <a href="https://en.wikipedia.org/wiki/Scene_graph" target="_blank" rel="external">Scene-graph</a> on wikipedia:</p>
<blockquote>
<p>A scene graph is a collection of nodes in a graph or tree structure. A tree node (in the overall tree structure of the scene graph) may have many children but often only a single parent, with the effect of a parent applied to all its child nodes; an operation performed on a group automatically propagates its effect to all of its members.</p>
</blockquote>
<p>So it’s the basic element with parent-child relationship to compose a tree (hierarchy) structure. Cocos2d-js has a good <a href="http://www.cocos2d-x.org/programmersguide/2/index.html#scene-graph" target="_blank" rel="external">visual explanation</a> of scene-graph and nodes. It also explains <a href="http://www.cocos2d-x.org/programmersguide/2/index.html#parent-child-relationship" target="_blank" rel="external">how parent-child relationship works</a> for nodes.</p>
<h2 id="Engine_Implementation">Engine Implementation</h2><p>For different game engine there are different names for nodes:</p>
<ul>
<li><a href="http://www.cocos2d-x.org/reference/html5-js/V3.6/symbols/cc.Node.html" target="_blank" rel="external">cc.Node</a>  in Cocos2d-js</li>
<li><a href="http://pixijs.github.io/docs/PIXI.DisplayObject.html" target="_blank" rel="external">PIXI.DisplayObject</a> in Pixi.js</li>
<li><a href="http://www.createjs.com/docs/easeljs/classes/DisplayObject.html" target="_blank" rel="external">EaselJS.DisplayObject</a> in CreateJS</li>
</ul>
<p>In some of the engines ‘node’ class is abstract and you can only create instance of child class that inherits ‘node’ class, for example ‘sprite’, ‘text’, ‘button’. Fireball will take whatever an engine has and allow users to attach script to those instances.</p>
<h2 id="Extending_Nodes_in_Fireball">Extending Nodes in Fireball</h2><p>In the above engines, each node extends from the basic ‘node’ class and has fixed functionality. You cannot combine behaviors from two different nodes together.</p>
<p>Fireball makes it possible to attach scripts to a node with mixin. This way user can write scripts with modular behavior, and attach scripts with different behavior to a single node to grant it a combination of modular behaviors.</p>
<p>Let’s go over to next chapter <a href="/manual/scripting/attachable-script">Attachable Script</a> for details.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>What is a node in a scene-graph structure?</p>
<p>From <a href="https://en.wikipedia.org/wiki/Scene_graph" target="_blank" rel="external"]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Module]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/module/"/>
    <id>http://docs.fireball-x.com/manual/scripting/module/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>In Fireball you can split your program into multiple module script and reference each other. Let’s see how to define and use modules in Fireball scripts (also known as <em>modularization</em>).</p>
<blockquote>
<p>In this article, we consider module and script equal to each other. All sections with <strong>note</strong> are advanced material, beginner can safely skip those.</p>
</blockquote>
<h2 id="Overview">Overview</h2><p>If you’re not sure what can modularization do for you, it’s basically (with significant differences):</p>
<ul>
<li><code>include</code> in C/C++</li>
<li><code>using</code> in C#</li>
<li><code>import</code> in Java and Python</li>
<li><code>link</code> in HTML</li>
</ul>
<p>Modularization allow you to access other script in Fireball:</p>
<ul>
<li>Access public member of other script files</li>
<li>Call public method of other script files</li>
<li>Use public type of other script files</li>
<li>Access or inherit other Behaviors</li>
</ul>
<p>The way Fireball modularize scripts are nearly identical to JavaScript and node.js:</p>
<ul>
<li>Each individual script file is a module.</li>
<li>Each module has its own scope ( in the module, any variable declared with <code>var</code> keyword cannot be accessed by other scripts )</li>
<li>Use <code>require</code> method to reference other modules</li>
<li>Put public variables in <code>module.exports</code> to allow access from other scripts</li>
</ul>
<p>All of your script file, be it module or not, will be compiled to native JavaScript by Fireball and can run in any modern Mobile browser.</p>
<h2 id="Reference_Modules">Reference Modules</h2><h3 id="require">require</h3><p>Except API provided by Fireball, all user defined modules need to use <code>require</code> to access. Let’s say we need to access a Behavior script called <code>Rotate</code>:</p>
<pre><code class="js">var Rotate = require(&#39;rotate&#39;);
</code></pre>
<p>The return object of <code>require</code> method is target module’s exported object. Usually we will store the object into a variable. The script file name should be passed to <code>require</code>. You should not include path or file extension, also keep in mind it’s case sensitive.</p>
<h3 id="Full_Example">Full Example</h3><p>Let’s create a child class extending <code>Rotate</code>, named <code>SinRotate.js</code>:</p>
<pre><code class="js">var Rotate = require(&#39;rotate&#39;);

var SinRotate = Fire.Class({
    extends: Rotate,
    update: function (delta) {
        this.rotation += this.speed * Math.sin(Date.now());
    }
});
</code></pre>
<p>We defined a new Behavior called <code>SinRotate</code> which inherits <code>Rotate</code> and overrides <code>update</code> method. This Behavior can be accessed by other script with <code>require(&#39;SinRotate&#39;)</code>.</p>
<p><strong>Note</strong>:</p>
<ul>
<li><code>require</code> can be called anywhere in your script.</li>
<li>When the game loads all scripts will be required and executed once. No matter how many times a module is required, you still got the same module instance.</li>
<li>When debugging in <strong>DevTools</strong> console, you can require any module in the project.</li>
</ul>
<h2 id="Define_Module"><a name="define"></a>Define Module</h2><h3 id="Define_Behavior">Define Behavior</h3><p>Create a new script file named <code>Rotate.js</code>, define a Behavior like this:</p>
<pre><code class="js">var Rotate = Fire.Class({
    extends: Fire.Behavior,
    properties: {
        speed: 1
    },
    update: function () {
        this.transform.rotation += this.speed;
    }
});
</code></pre>
<p>A Behavior class should have <code>extends: Fire.Behavior</code> in prototype object. Fireball will automatically export Behavior module for you. So you can require this Behavior from any other scripts.</p>
<h3 id="Define_Non-FireClass_JavaScript_Module">Define Non-FireClass JavaScript Module</h3><p>You can use any JavaScript file as module. Let’s say we have a normal JavaScript file <code>config.js</code>.</p>
<pre><code class="js">var config = {
    moveSpeed: 10,
    version: &#39;0.15&#39;,
    showTutorial: true,

    load: function () {
        // ...
    }
};
config.load();
</code></pre>
<p>If we want to access <code>config</code> object in this script:</p>
<pre><code class="js">// player.js
var config = require(&#39;config&#39;);
Fire.log(&#39;speed is&#39;, config.moveSpeed);
</code></pre>
<p>You’ll get a error: <code>TypeError: Cannot read property &#39;moveSpeed&#39; of null</code>. Because we haven’t set export for <code>config.js</code> file. To make it work, just use <code>module.exports</code> to add <code>config</code> object:</p>
<pre><code class="js">module.exports = config;
</code></pre>
<blockquote>
<p>Why we don’t have to set exports for Behaviors?<br>  Behavior is the most common FireClass and will be treated differently by Fireball.<br>  Fireball will automatically set exports for the whole Behavior module.</p>
</blockquote>
<p>Full code for this example:</p>
<pre><code class="js">// config.js
var config = {
    moveSpeed: 10,
    version: &#39;0.15&#39;,
    showTutorial: true,

    load: function () {
        // ...
    }
};
config.load();

module.exports = config;
</code></pre>
<pre><code class="js">// player.js
var config = require(&#39;config&#39;);
Fire.log(&#39;speed is&#39;, config.moveSpeed);
</code></pre>
<p>You’ll get correct output: <code>speed is 10</code>.</p>
<h2 id="More_Examples">More Examples</h2><h3 id="Export_Variable">Export Variable</h3><ul>
<li><p><code>module.exports</code> by default is an empty object (<code>{}</code>), you can add new key-value pairs to it.</p>
<pre><code class="js">  // foobar.js:
  module.exports.foo = function () {
      Fire.log(&quot;foo&quot;);
  };
  module.exports.bar = function () {
      Fire.log(&quot;bar&quot;);
  };
  // test.js:
  var foobar = require(&quot;foobar&quot;);
  foobar.foo();    // &quot;foo&quot;
  foobar.bar();    // &quot;bar&quot;
</code></pre>
</li>
<li><p><code>module.exports</code> can add any JavaScript type:</p>
<pre><code class="js">  // foobar.js:
  module.exports = {
      FOO: function () {
          this.type = &quot;foo&quot;;
      },
      bar: &quot;bar&quot;
  };
  // test.js:
  var foobar = require(&quot;foobar&quot;);
  var foo = new foobar.FOO();
  Fire.log(foo.type);      // &quot;foo&quot;
  Fire.log(foobar.bar);    // &quot;bar&quot;
</code></pre>
</li>
</ul>
<h3 id="Encapsulate_Private_Member">Encapsulate Private Member</h3><p>All variables defined with <code>var</code> is only accessible inside the file scope of the script. So we define private member in module scope like this:</p>
<pre><code class="js">// foobar.js:
var dirty = false;
module.exports = {
    setDirty: function () {
        dirty = true;
    },
    isDirty: function () {
        return dirty;
    },
};

// test1.js:
var foo = require(&quot;foobar&quot;);
Fire.log(typeof foo.dirty);        // &quot;undefined&quot;
foo.setDirty();

// test2.js:
var foo = require(&quot;foobar&quot;);
Fire.log(foo.isDirty());           // true
</code></pre>
<p><strong>Note</strong>: If you omit <code>var</code> when define variable, it will become a global variable! (Accessible from any script in your project)</p>
<pre><code class="js">// foobar.js:
dirty = false;        // This makes dirty a global variable! don&#39;t if you&#39;re not sure!
module.exports = {
    setDirty: function () {
        dirty = true;
    },
};
</code></pre>
<h2 id="Circular_Reference">Circular Reference</h2><p>(TODO)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In Fireball you can split your program into multiple module script and reference each other. Let’s see how to define and use modules in F]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mixin Behind The Scene]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/mixin-mechanic/"/>
    <id>http://docs.fireball-x.com/manual/scripting/mixin-mechanic/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Mixin_API">Mixin API</h2><h2 id="Mixin_When_Drag_Script_to_Node">Mixin When Drag Script to Node</h2><h2 id="Dealing_With_Name_Conflict">Dealing With Name Conflict</h2><p>What if two scripts attached to a node have members with the same name? Due to the nature of mixin, the member of last attached script will override the member of previous one.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Mixin_API">Mixin API</h2><h2 id="Mixin_When_Drag_Script_to_Node">Mixin When Drag Script to Node</h2><h2 id="Dealing_With_Name_Confli]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Primer]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/javascript-primer/"/>
    <id>http://docs.fireball-x.com/manual/scripting/javascript-primer/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This guide is based on <a href="https://www.discovermeteor.com/blog/javascript-for-meteor/" target="_blank" rel="external">A JavaScript Primer For Meteor</a></p>
</blockquote>
<h2 id="Overview">Overview</h2><p>This guide provides a set of minimal JavaScript syntax and patterns for beginner to be able to understand scripting in Fireball.</p>
<p>JavaScript is a language full of contradictions: it’s named after Java even though it doesn’t have anything to do with it, it was <a href="https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript" target="_blank" rel="external">created in 10 days</a> but is still in use 20 years later, and despite getting its fair share of criticism, it’s ubiquitous on the web.</p>
<p>If JavaScript has one thing going for it, is that it’s easy to get started with. Now don’t get me wrong: truly mastering JavaScript is a difficult task. But learning enough to get by isn’t that hard, and shouldn’t take long especially if you already have some experience with other programming languages.</p>
<p>What’s more, when building Fireball games you’ll often find yourself re-using the same patterns over and over. And as stated by the Pareto principle, learning 20% of a language should be enough to cover 80% of situations.</p>
<p>So today, let’s take a look at the absolute minimum amount of JavaScript you need to know to learn Fireball.</p>
<h2 id="Following_Along">Following Along</h2><p>Did you know that you already possessed a full-fledged JavaScript development environment? I’m talking about the very browser you’re reading this with!</p>
<p>So you can follow along with all these examples simply by typing them into your browser console. Here’s <a href="http://webmasters.stackexchange.com/a/77337" target="_blank" rel="external">a handy guide</a> on how to open it in various browsers.</p>
<p>Ready? Let’s learn some JavaScript!</p>
<h2 id="Variables">Variables</h2><p>Here’s how you declare a variable in JavaScript:</p>
<pre><code class="js">var a;
</code></pre>
<p>The var keyword lets JavaScript know that whatever comes after is a variable. Now let’s assign a value to our variable:</p>
<pre><code class="js">var a = 12;
</code></pre>
<p>Now maybe you’ve seen something like this while looking at some JavaScript code:</p>
<pre><code>a = 12;
</code></pre><p>JavaScript doesn’t seem to mind when you ommit the var keyword. So what is it good for?</p>
<p>The var keyword makes our variable local. Inside a Fireball project, this means that prefixing a variable with var will restrict its scope to the function you’re declaring it in (or the file, if you declare it outside of any function).</p>
<p>On the other hand, <strong>omitting the var keyword will make your variable available to your whole Fireball project</strong>. Sometimes that’s good, but in most case it’s better to try and avoid polluting the global scope.</p>
<h2 id="Functions">Functions</h2><p>Here’s how you declare a function in JavaScript:</p>
<pre><code class="js">var myAwesomeFunction = function (myArgument) {
    // do something
}
</code></pre>
<p>And here’s how you’d call your function:</p>
<pre><code class="js">myAwesomeFunction(something);
</code></pre>
<p>You’ll notice function declarations follow the same var something = somethingElse pattern as variable declarations.</p>
<p>As they should, since in JavaScript, functions are variables too! This means that you can do stuff like using functions as arguments for other functions:</p>
<pre><code class="js">square = function (a) {
    return a * a;
}
applyOperation = function (f, a) {
    return f(a);
}
applyOperation (square, 10); // 100
</code></pre>
<h2 id="Return">Return</h2><p>A return statement takes a value and returns this value as the result of a function. The key thing to remember here is that whatever comes after return will never get executed:</p>
<pre><code class="js">myFunction = function (a) {
    return a * 3;
    explodeComputer(); // will never get executed (hopefully!)
}
</code></pre>
<h2 id="If_Statements">If Statements</h2><p>Here’s what an If statement looks like in JavaScript:</p>
<pre><code class="js">if (foo) {
    return bar;
}
</code></pre>
<h2 id="If/Else_Statements">If/Else Statements</h2><p>Here’s what an If/Else statement looks like in JavaScript:</p>
<pre><code class="js">if (foo) {
    function1();
}
else {
    function2();
}
</code></pre>
<p>If/Else statements also have their own shorthand syntax:</p>
<pre><code class="js">foo ? function1() : function2();
</code></pre>
<p>This is particularly useful when assigning a value to a variable:</p>
<pre><code class="js">var n = foo ? 1 : 2;
</code></pre>
<p>This means “if foo is true, then set n to 1, otherwise set it to 2”.</p>
<p>Oh and for good measure, here’s an If/Else If/Else:</p>
<pre><code class="js">if (foo) {
    function1();
}
else if (bar) {
    function2();
}
else {
    function3();
}
</code></pre>
<h2 id="JavaScript_Arrays">JavaScript Arrays</h2><p>Here’s how you define an array:</p>
<pre><code class="js">a = [123, 456, 789];
</code></pre>
<p>And here’s how you access an array item (indexes start at 0):</p>
<pre><code class="js">a[1]; // 456
</code></pre>
<h2 id="JavaScript_Objects">JavaScript Objects</h2><p>Here’s how you define a JavaScript object:</p>
<pre><code class="js">myProfile = {
    name: &quot;Jare Guo&quot;,
    email: &quot;blabla@gmail.com&quot;,
    &#39;zip code&#39;: 12345,
    isInvited: true
}
</code></pre>
<p>After the object declaration (<code>myProfile = {…}</code>) comes a list of comma-separated pairs. Each pair contains a key (a string, which can optionally be enclosed in quotes if it contains any spaces) and a value (any type of JavaScript item: strings, numbers, booleans, variables, arrays, objects, and even functions).</p>
<p>You can also nest objects, and even use arrays:</p>
<pre><code class="js">myProfile = {
    name: &quot;Jare Guo&quot;,
    email: &quot;blabla@gmail.com&quot;,
    city: &quot;Xiamen&quot;,
    points: 1234,
    isInvited: true,
    friends: [
        {
            name: &quot;Johnny&quot;,
            email: &quot;blablabla@gmail.com&quot;
        },
        {
            name: &quot;Nantas&quot;,
            email: &quot;piapiapia@gmail.com&quot;
        }
    ]
}
</code></pre>
<p>Accessing an object’s property couldn’t be simpler: just use the dot notation. You can even combine it with arrays:</p>
<pre><code class="js">myProfile.name; // Jare Guo
myProfile.friends[1].name; // Nantas
</code></pre>
<p>You’ll find JavaScript objects almost everywhere in JavaScript, especially when invoking functions. For example, here’s how you define a FireClass in Fireball:</p>
<pre><code class="js">var MyComponent = Fire.Class({
    extends: Fire.Component
});
</code></pre>
<p>This <code>{extends: Fire.Component}</code> argument is an anonymous JavaScript object. With JavaScript, you’ll see that most of the time you don’t actually need to assign a name to an object (or even to a function) to make use of it.</p>
<h2 id="Anonymous_Functions">Anonymous Functions</h2><p>We’ve seen you can declare functions using the following syntax:</p>
<pre><code class="js">myFunction = function (myArgument) {
    // do something
}
</code></pre>
<p>And we’ve seen that JavaScript treats functions just like variables, letting you pass them as arguments to other functions:</p>
<pre><code class="js">square = function (a) {
    return a * a;
}
applyOperation = function (f, a) {
    return f(a);
}
applyOperation(square, 10); // 100
</code></pre>
<p>And we’ve also seen that JavaScript loves coming up with shorter ways to write things. So here’s an equivalent syntax:</p>
<pre><code class="js">applyOperation = function (f, a) {
    return f(a);
}
applyOperation(
    function(a){
      return a*a;
    },
    10
) // 100
</code></pre>
<p>Instead of defining the square function and passing it as an argument, we’re defining it inside the argument call. This is known as using an “anonymous function”, and it’s one of the most common JavaScript patterns around.</p>
<h2 id="Chaining">Chaining</h2><p>We’ve seen that you can pass parameters to functions. But there’s another syntax that you’ll often encounter for things such as array or string operations:</p>
<pre><code class="js">var myArray = [123, 456];
myArray.push(789) // 123, 456, 789
var myString = &quot;abcdef&quot;;
myString.replace(&quot;a&quot;, &quot;z&quot;); // &quot;zbcdef&quot;
</code></pre>
<p>This dot notation means “call the <code>replace</code> function on <code>myString</code> with arguments “a” and “z” and return the result”.</p>
<p>The beauty of it is that you can also chain multiple links together as long as they all return something. We won’t get into how to define chainable functions, but using them is easy enough. Just follow the <code>something.function1().function2().function3()</code> pattern.</p>
<p>Each link of the chain will take a value, apply a function to it, and then pass on its result to the next link:</p>
<pre><code class="js">var n = 5;
n.double().square(); //100
</code></pre>
<h2 id="This">This</h2><p><code>this</code> is probably one of the hardest concept to master in JavaScript.</p>
<p>Basically, the <code>this</code> keyword lets you access the object on which you’re currently working: just like a chameleon, <code>this</code> keeps changing based on its surroundings.</p>
<p>So instead of trying to explain <code>this</code>, let me give you two tools to help you figure things out yourself (what do you mean, I’m taking the easy way out?!).</p>
<p>The first is the good old <code>console.log()</code>, which prints any object to the browser’s console. Adding a <code>console.log(this)</code> to begin a function is often the best way to figure out what’s going on:</p>
<pre><code class="js">myFunction = function (a, b) {
    console.log(this);
    // do something
}
</code></pre>
<p>The second pattern is assigning <code>this</code> to another variable:</p>
<pre><code class="js">myFunction = function (a, b) {
    var myObject = this;
    // do something
}
</code></pre>
<p>While it might at first seem like this doesn’t accomplish anything, it lets you safely re-use <code>myObject</code> throughout your code, since unlike <code>this</code> its value won’t change depending on the context.</p>
<p>In Fireball script, <code>this</code> usually refers to the instance of current class.</p>
<h2 id="Operators">Operators</h2><p><code>=</code> is the assigment operator. This means that <code>a = 12</code> means assign the value “12” to <code>a</code>.</p>
<p>If you want to compare two values, you would use <code>==</code>, as in <code>a == 12</code>.</p>
<p>JavaScript also features the <code>===</code> operator, which compares both value and type (i.e. string, integer, etc.):</p>
<pre><code class="js">a = &quot;12&quot;;
a == 12; // true
a === 12; // false
</code></pre>
<p>In most cases, you’ll want to use the <code>===</code> operator whenever comparing two values, because there aren’t that many cases where you’d want two variables to be equal in value but not in type.</p>
<p>Here’s JavaScript’s unequality operator:</p>
<pre><code class="js">a = 12;
a !== 11; // true
</code></pre>
<p>The <code>!</code> operator can also be used independently to get the opposite of a boolean value:</p>
<pre><code class="js">a = true;
!a; // false
</code></pre>
<p>An interesting consequence of the <code>!</code> operator is that it always returns a boolean value, even if what comes after is not a boolean:</p>
<pre><code class="js">a = 12;
!a; // false
</code></pre>
<p>This means that if you want to convert a variable to boolean you can just use the <code>!</code> operator twice (once to force the variable to boolean, a second time to revert the value back):</p>
<pre><code class="js">a = 12;
!!a; // true
</code></pre>
<p>Or:</p>
<pre><code class="js">a = 0;
!!a; // false
</code></pre>
<h2 id="Style">Style</h2><p>Finally, here are a few optional style rules that will make your JavaScript code cleaner:</p>
<ul>
<li>Use camelCase: write myRandomVariable, not my_random_variable.</li>
<li>Add a ; at the end of each line, even if it’s optional.</li>
<li>Separate each keyword with a space, i.e. a = b + 1, not a=b+1.</li>
</ul>
<p>You’ll find more guidelines in the (TODO).</p>
<h2 id="Putting_It_Together">Putting It Together</h2><p>So now that you’re equipped with the basics of JavaScript syntax, let’s try to put it together and understand a bit of Fireball code:</p>
<pre><code class="js">var Comp = Fire.Class({
    extends: Fire.Component,

    properties: {
        target: {
            default: null,
            type: Fire.Entity
        }
    },

    onStart: function () {
        this.target = Fire.Entity.find(&#39;/Main Player/Bip/Head&#39;);
    },

    update: function () {
        this.transform.worldPosition = this.target.transform.worldPosition;
    }
});
</code></pre>
<p>The above code defines a new component for engine, with a <code>target</code> parameter. At runtime this component will place itself at the same position as <code>target</code> entity.</p>
<p>Let’s break this down (I’ll highlight each syntax pattern as we go):</p>
<p><code>var Comp = Fire.Class({</code>: We’re diving into the <code>Fire</code> object, using <strong>dot notation</strong> to call the <code>Class()</code> function (which is itself a property of <code>Fire</code>) on an anonymous <strong>JavaScript object</strong> (<code>{}</code>) (chaining, JavaScript objects).</p>
<p><code>target: { default: null, type: Fire.Entity }</code>: This key-pair defines a <code>target</code> property. Value is an object literal, which specifies default value and type for <code>target</code>.</p>
<p><code>extends: Fire.Component</code>: This means the class inherits from <code>Fire.Component</code>，it’s a builtin class in Fireball.</p>
<p><code>onStart: function () {</code>: The key/value pair implement an instance method called onStart, the value is an <strong>anonymous function</strong>.</p>
<p><code>this.target = Fire.Entity.find(&#39;</code>: In this context, <code>this</code> corresponds to the component being created. We use <code>this.target</code> to access <code>target</code> property.</p>
<h2 id="Going_Forward">Going Forward</h2><p>This tutorial is by no means meant to replace actually learning JavaScript. But the various patterns covered here should be enough to let you understand the vast majority of Discover Fireball’s code, at least from a syntax point of view.</p>
<p>So if like me you prefer learning by doing, hopefully this should be enough to get you ready to start building Fireball games!</p>
<h2 id="JavaScript_Resources">JavaScript Resources</h2><p>If you want to learn more about JavaScript, we recommend the following ebook:</p>
<ul>
<li><a href="http://eloquentjavascript.net/" target="_blank" rel="external">Eloquent JavaScript</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/" target="_blank" rel="external">JavaScript Garden</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>This guide is based on <a href="https://www.discovermeteor.com/blog/javascript-for-meteor/" target="_blank" rel="external">A]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Advanced FireClass]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/class/"/>
    <id>http://docs.fireball-x.com/manual/scripting/class/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>All “Note” section is advanced learning material, beginner can safely skip those parts.</p>
</blockquote>
<p><code>Fire.Class</code> can define classes with Fireball specific features. To make things clear, we call it <strong>FireClass</strong> if a class is defined by <code>Fire.Class</code>. <strong>FireClass</strong> can be extended very easily, and able to define type-rich data.</p>
<h2 id="Overview">Overview</h2><h3 id="Create_FireClass">Create FireClass</h3><p>To define a FireClass, you need to call <code>Fire.Class</code> with a prototype object as parameter. Add properties according to a certain key-value pair pattern to the prototype object to customize your class.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        name: &#39;Sprite&#39;
    });
</code></pre>
<p>The above code snippet created a FireClass and assigned it to <code>Sprite</code> variable. The variable name has nothing to do with class name. You can add a <code>name</code> property as class name, it only matters when you need the class to be serialized.</p>
<p>To make writing easier, we call this Fireball specific <code>{ name: &#39;Sprite&#39; }</code> pattern of defining class <strong>prototype object</strong>. The following sections will focus on how to create and do scripting in this prototype object.</p>
<h3 id="Create_Class_Instance">Create Class Instance</h3><p>FireClass is a JavaScript prototype, so you can create class instance with <code>new</code> keyword.</p>
<pre><code class="js">    var obj = new Sprite();
</code></pre>
<h3 id="Constructor">Constructor</h3><p>If you add a <code>constructor</code> property in prototype object, the function will be called during the instantiation of the FireClass. FireClass does not allow parameter for constructor.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            console.log(this instanceof Sprite);    // true
        }
    });
    var obj = new Sprite();
</code></pre>
<p><strong>Note</strong>: Behavior is a special kind of FireClass, you cannot add <code>constructor</code> to Behavior’s prototype object, but you can use <code>onLoad</code> for initialization.</p>
<h3 id="Test_Class_Prototype">Test Class Prototype</h3><p><code>instanceof</code> can be used for testing if an object uses the FireClass prototype.</p>
<pre><code class="js">    console.log(obj instanceof Sprite);     // true
</code></pre>
<p><strong>Note</strong></p>
<ul>
<li>If your class doesn’t need serialization, you can safely omit <code>name</code> property. Class name can be any string but there should not have classes with the same name in one project. You can use <code>Fire.getClassName</code> to get class name, use <code>Fire.getClassByName</code> to use name to find class.</li>
<li>If advanced developer need to use constructor with parameter, you can use <code>arguments</code> inside <code>constructor</code> to get parameters. But if this class need to be serialized, you must make sure the class can be instantiated with <code>new</code> keyword without any constructor parameter.</li>
</ul>
<h2 id="Members">Members</h2><h3 id="Instance_Variable">Instance Variable</h3><p>Instance variables should be declared in constructor:</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            // declare instance variable and gives default value
            this.url = &quot;&quot;;
            this.id = 0;
        }
    });
    var obj = new Sprite();
    // assign value
    obj.url = &#39;img/fb.png&#39;;
    obj.id = 1;
</code></pre>
<h3 id="Instance_Method">Instance Method</h3><p>Instance methods defined as prototype object’s properties:</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            // ...
        },
        // declare an instance method named &quot;load&quot;
        load: function () {
            // load this.url
        };
    });
    var obj = new Sprite();
    // call instance method
    obj.load();
</code></pre>
<h3 id="Static_Class_Variable_and_Method">Static Class Variable and Method</h3><p>Static class variable and class method can be added to class outside of prototype object:</p>
<pre><code class="js">    var Sprite = Fire.Class({ ... });

    // declare class variable
    Sprite.count = 0;
    // declare class method
    Sprite.getBounds = function (spriteList) {
        // ...
    };
</code></pre>
<p>You can also declare them in <code>statics</code> property of prototype object:</p>
<pre><code class="js">    var Sprite = Fire.Class({
        statics: {
            // declare class variable
            count: 0,
            // declare class method
            getBounds: function (spriteList) {
                // ...
            }
        }
    });
</code></pre>
<p><strong>A Full FireClass definition script:</strong></p>
<pre><code class="js">    var Sprite = Fire.Class({
        name: &#39;Sprite&#39;,
        constructor: function () {
            // instance variables
            this.url = &quot;&quot;;
            this.id = 0;
        },
        // instance method named `load`
        load: function () {
            // load this.url
        };
    });
    // class instantiation
    var obj = new Sprite();
    // access instance variable
    obj.url = &#39;sprite.png&#39;;
    // call instance method
    obj.load();

    // declare static class variable
    Sprite.count = 0;
    // declare static class method
    Sprite.getBounds = function (spriteList) {
        // ...
    };

    // call static class method
    Sprite.getBounds([obj]);
</code></pre>
<p><strong>Note</strong></p>
<ul>
<li><p>For <strong>private</strong> member that should not be accessible from outside, it’s recommended to add <code>_</code> prefix to the member name.</p>
<pre><code class="js">  var Sprite = Fire.Class({
      name: &#39;Sprite&#39;,
      constructor: function () {
          // private instance variable
          this._myData = 0;
      },
      // private instance method
      _load: function () {
          // ...
      };
  });
  // private static class variable
  Sprite._list = [];
</code></pre>
</li>
<li><p>For <strong>private</strong> static member, you can also use closure</p>
<pre><code class="js">  // private static method
  var doLoad = function (sprite) {
      // do load ...
  };
  // private static variable
  var url = &#39;foo.png&#39;;

  var Sprite = Fire.Class({
      load: function () {
          // call method with local scope
          doLoad(this, url);
      };
  });
</code></pre>
</li>
<li><p>The concept <em>instance member</em> here includes instance variable and instance method.</p>
</li>
<li>The concept <em>static member</em> here includes static variable and static method.</li>
<li>To inherit a static variable, you should <strong>shallow copy</strong> the variable to the child class.</li>
</ul>
<h2 id="Inheritance">Inheritance</h2><h3 id="How_to">How to</h3><p>To inherit a class, put the class type to prototype object’s <code>extends</code> property:</p>
<pre><code class="js">    // define base class
    var Node = Fire.Class();

    // define sub class
    var Sprite = Fire.Class({
        extends: Node
    });

    // test
    var obj = new Sprite();
</code></pre>
<p><code>instanceof</code> can be used to detect if an object are created with a class inherits from a certain parent class:</p>
<pre><code class="js">    var sub = new Sprite();
    console.log(sub instanceof Node);       // true
    var base = new Node();
    console.log(base instanceof Sprite);    // false
</code></pre>
<h3 id="Parent_Class_Constructor">Parent Class Constructor</h3><p>You should notice that no matter if child class has constructor, the parent’s constructor will be called before the child is instantiated.</p>
<pre><code class="js">    var Node = Fire.Class({
        constructor: function () {
            this.name = &quot;node&quot;;
        }
    });
    var Sprite = Fire.Class({
        extends: Node,
        constructor: function () {
            // before this code is executed, parent&#39;s constructor is already called
            // so this.name is defined.
            console.log(this.name);    // &quot;node&quot;
            // assign another value to this.name
            this.name = &quot;sprite&quot;;
        }
    });
    var obj = new Sprite();
    console.log(obj.name);    // &quot;sprite&quot;
</code></pre>
<h3 id="Override">Override</h3><p>All instance method are considered virtual, so you can override any method in child class:</p>
<pre><code class="js">    var Node = Fire.Class({
        getName: function () {
            return &quot;node&quot;;
        }
    });
    var Sprite = Fire.Class({
        getName: function () {
            return &quot;sprite&quot;;
        }
    });
    var obj = new Sprite();
    console.log(obj.getName());    // &quot;sprite&quot;
</code></pre>
<p>If you want to access parent method from child, you should use <code>call</code> or <code>apply</code> on parent’s prototype:</p>
<pre><code class="js">    var Node = Fire.Class({
        getName: function () {
            return &quot;node&quot;;
        }
    });
    var Sprite = Fire.Class({
        getName: function () {
            var baseName = Node.prototype.getName.call(this);
            return baseName + &quot;&gt;sprite&quot;;
        }
    });
    var obj = new Sprite();
    console.log(obj.getName());    // &quot;node&gt;sprite&quot;
</code></pre>
<p>Use <code>Fire.isChildClassOf</code> to detect if there are inheritance between two classes:</p>
<pre><code class="js">    var Texture = Fire.Class();
    var Texture2D = Fire.Class({
        extends: Texture
    });
    console.log(Fire.isChildClassOf(Texture2D, Texture));   // true
</code></pre>
<p>Please note parameter of <code>Fire.isChildClassOf</code> should all be class constructor, not class instance. If you pass two identical classes it will return <code>true</code> as well.</p>
<p><strong>Note</strong></p>
<ul>
<li>You can access parent class with static member <code>$super</code> from child class.</li>
<li>All instance members and static members will be inherited by child class.</li>
<li>If you prefer vanilla JavaScript type of inheritance, in other words your parent and child are not both FireClass. You can use <a href="http://docs.fireball-x.com/api/modules/Fire.JS.html#method_extend" target="_blank" rel="external">Fire.JS.extend</a> for that.</li>
</ul>
<h2 id="Properties">Properties</h2><h3 id="Define_and_Access_Properties"><a name="default"></a>Define and Access Properties</h3><p>Properties are special type of instance variable that you can see and edit them in <strong>Inspector</strong>. They can be serialized as well. To define properties, add key-object pair under prototype object’s <code>properties</code> key.</p>
<p>Let’s add a property named <code>playerName</code> in <code>Player</code> class.</p>
<pre><code class="js">    var Player = Fire.Class({
        extends: Fire.Behavior,

        properties: {
            playerName: {
                default: &#39;Jare&#39;
            }
        }
    });
</code></pre>
<p>This way <code>playerName</code> will be shown in <strong>Inspector</strong>, and it’s value will be saved together with current scene.</p>
<p>The <code>default</code> key is used to give property a default value. For value types a default value also tells Fireball the type of property. Default value is only used when class is instantiated for the first time. In other words, for serialized properties, change default value in class script does not affect class instance in scene (which is already saved), unless you remove the class instance and recreate it.</p>
<p>Properties themselves are instance members, that can be accessed easily:</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            console.log(this.width);    // access width
        },

        properties: {
            width: {
                default: 128
            },
        },

        getWidth: function () {
            return this.width;
        }
    });
</code></pre>
<p>Properties are defined before constructor function is called, so they can be accessed or has value changed in constructor function.</p>
<h3 id="Property_Attributes">Property Attributes</h3><p>Each property can have multiple attributes, to customize the way property is shown in <strong>Inspector</strong> and how its serialized.</p>
<pre><code class="js">    properties {
        score: {
            default: 0,
            type: Fire.Integer,
            tooltip: &#39;The score of player&#39;
        }
    }
</code></pre>
<p>The above code make sure you can only input integer value for <code>score</code> in <strong>Inspector</strong>. Also when move your mouse over the property it should display tooltip.</p>
<p>Below are common attributes, for more details please read <a href="/manual/scripting/attributes">Property Attributes</a>.</p>
<ul>
<li>type: define data type of the property</li>
<li>url: define asset type of property (asset accessed with url).</li>
<li>visible: set it to <code>false</code> to hide the property in <strong>Inspector</strong>.</li>
<li>serializable: set it to <code>false</code> will make the property non-serializabe.</li>
<li>displayName: show different name in <strong>Inspector</strong></li>
<li>tooltip: mouse over tooltip in <strong>Inspector</strong></li>
</ul>
<h4 id="Visible_Attribute"><a name="visible"></a>Visible Attribute</h4><p>By default, if a property is shown in <strong>Inspector</strong> depends on if the property name starts with <code>_</code>. All properties with <code>_</code> prefix are hidden in <strong>Inspector</strong>.</p>
<p>To enforce showing these properties in  <strong>Inspector</strong>, you can set <code>visible</code> attribute to <code>true</code>:</p>
<pre><code class="js">    properties {
        _id: {      //
            default: 0,
            visible: true // force showing property despite `_` prefix
        }
    }
</code></pre>
<p>To force hiding a property, you can set <code>visible</code> attribute to <code>false</code>:</p>
<pre><code class="js">    properties {
        id: {       // force hiding property
            default: 0,
            visible: false
        }
    }
</code></pre>
<h4 id="Serializable_Attribute"><a name="serializable"></a>Serializable Attribute</h4><p>All properties by default are serializable, you can set <code>serializable: false</code> if you like otherwise.</p>
<pre><code class="js">    temp_url: {
        default: &#39;&#39;,
        serializable: false
    }
</code></pre>
<h4 id="Type_Attribute"><a name="type"></a>Type Attribute</h4><p>If <code>default</code> attribute alone cannot provide enough details about type information, we need to use <code>type</code> explicitly declare property type in order to correctly display and edit the property:</p>
<ul>
<li><p>For reference data type, usually the default value is <code>null</code>. We need to set a specific type so <code>Inspector</code> knows how to create an instance and edit the property:</p>
<pre><code class="js">      enemy: {
          default: null,
          type: cc.Node
      }
</code></pre>
</li>
<li><p>For primary value type (such as Number), set <code>type</code> to <code>Fire.Integer</code> to constrain property value to integer. This way user will not be able to input decimal point in <strong>Inspector</strong>:</p>
<pre><code class="js">      score: {
          default: 0,
          type: Fire.Integer
      }
</code></pre>
</li>
<li><p>Set <code>type</code> to a enum type (can be defined with <a href="http://docs.fireball-x.com/api/modules/Fire.html#method_defineEnum" target="_blank" rel="external">Fire.defineEnum</a>), you’ll be able to select value from a drop down list in <strong>Inspector</strong>.</p>
<pre><code class="js">      wrap: {
          default: Fire.Texture.WrapMode.Clamp,
          type: Fire.Texture.WrapMode
      }
</code></pre>
</li>
<li><p>If <code>default</code> is set to an empty array (<code>[]</code>), you need to use <code>type</code> to represent each element’s data type in order to show and edit property in <strong>Inspector</strong> properly.</p>
<pre><code class="js">      nameList: {
          default: [],
          type: [Fire.String]     // this make sure each array element&#39;s type is `Fire.String`
      },
      enemyList: {
          default: [],
          type: [cc.Node]
      }
</code></pre>
</li>
</ul>
<h4 id="Url_Attribute"><a name="url"></a>Url Attribute</h4><p>Some properties are used for referencing asset url. You need to use <code>url</code> key to define property type so you can drag the asset you want to <strong>Inspector</strong> and serialize it.</p>
<pre><code class="js">    texture: {
        default: &quot;&quot;,
        url: Fire.Texture
    },
</code></pre>
<p><strong>Note</strong></p>
<ul>
<li>Properties will be inherited by child class, but you can’t override parent’s properties.</li>
<li><p>If a property’s default value need to be fetched or calculated, you can assign its value in <code>constructor</code> function.</p>
<pre><code class="js">  var Sprite = Fire.Class({
      constructor: function () {
          this.img = LoadImage();
      },
      properties: {
          img: null
      }
  });
</code></pre>
</li>
</ul>
<h2 id="GetSet_Method">GetSet Method</h2><p>You can add <code>get</code> or <code>set</code> method in a property. This way <code>get</code> or <code>set</code> method will be called whenever the property is accessed.</p>
<h3 id="get">get</h3><p>To add a <code>get</code> method:</p>
<pre><code class="js">    properties: {
        width: {
            get: function () {
                return this.__width;
            }
        }
    }
</code></pre>
<p><code>get</code> method can return any type of value.<br>This property will be shown in <strong>Inspector</strong>, and can be accessed from anywhere.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            this.__width = 128;
            console.log(this.width);    // 128
        },
        properties: {
            width: {
                get: function () {
                    return this.__width;
                }
            }
        }
    });
</code></pre>
<p><strong>Note</strong>:</p>
<ul>
<li><p>A property with <code>get</code> method cannot be serialized, and cannot have default value. But you can add any attribute to it except <code>default</code> and <code>serializable</code>.</p>
<pre><code class="js">      width: {
          get: function () {
              return this.__width;
          },
          type: Fire.Integer,
          tooltip: &quot;The width of sprite&quot;
      }
</code></pre>
</li>
<li><p>A property with <code>get</code> method is read-only, but the returned object or value is not. You can still modify internal object in your script.</p>
<pre><code class="js">  var Sprite = Fire.Class({
      ...
      position: {
          get: function () {
              return this.__position;
          },
      }
      ...
  });
  var obj = new Sprite();
  obj.position = new Fire.Vec2(10, 20);   // WRONG! position is read-only
  obj.position.x = 100;                   // ALLOWED! position object can be modified!
</code></pre>
</li>
</ul>
<h3 id="set">set</h3><p>To add a <code>set</code> method:</p>
<pre><code class="js">    width: {
        set: function (value) {
            this.__width = value;
        }
    }
</code></pre>
<p><code>set</code> method can have a parameter with any type.</p>
<p><code>set</code> can be used together with <code>get</code>:</p>
<pre><code class="js">    width: {
        get: function () {
            return this.__width;
        },
        set: function (value) {
            this.__width = value;
        },
        type: Fire.Integer,
        tooltip: &quot;The width of sprite&quot;
    }
</code></pre>
<p><strong>Note</strong>:</p>
<ul>
<li>If not defined together with a <code>get</code> method, you cannot pass parameter to <code>set</code> method.</li>
<li>You can’t serialize a property if it has a <code>set</code> method.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>All “Note” section is advanced learning material, beginner can safely skip those parts.</p>
</blockquote>
<p><code>Fire.Clas]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Property Attributes]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/attributes/"/>
    <id>http://docs.fireball-x.com/manual/scripting/attributes/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Attributes_for_Inspector_Property">Attributes for Inspector Property</h2><p>When we declare property exposed to Inspector, we can specify attributes to customize it as we wish.</p>
<p>Following attributes are also available to <code>get</code> method.</p>
<table>
<thead>
<tr>
<th>Attribute Name</th>
<th>Description</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/manual/scripting/class#type">type</a></td>
<td>define data/value type of property (see <a href="/manual/scripting/class#type">example</a>)</td>
<td style="text-align:center">(Any)</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td><a href="/manual/scripting/class#visible">visible</a></td>
<td>Whether to show or hide property in Inspector</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">(Note1)</td>
</tr>
<tr>
<td>url</td>
<td>if property is for referencing asset url, use this attribute (see <a href="/manual/scripting/class#url">example</a>)</td>
<td style="text-align:center">function(constructor)</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>displayName</td>
<td>Inspector will show displayName instead of property name</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>tooltip</td>
<td>Add tooltip when mouse over this property in Inspector</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>multiline</td>
<td>Enable multiline input field for text property</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>readonly</td>
<td>Mark this property readonly in Inspector</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>watch</td>
<td>watch other property updates and run a callback function</td>
<td style="text-align:center">{ “prop names”: function (this, uiCtrl) {} }</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>range</td>
<td>constrain property range and edit property value with a slider</td>
<td style="text-align:center">[min, max]</td>
<td style="text-align:center">undefined</td>
</tr>
</tbody>
</table>
<p>Note:</p>
<ol>
<li>whether a property is visible by default is determined by its name. Property starts with a <code>_</code> is hidden by default.</li>
</ol>
<h2 id="Serialization">Serialization</h2><p>These attributes are related to serialization, and cannot be used with <code>get</code> method.</p>
<table>
<thead>
<tr>
<th>Attribute Name</th>
<th>Description</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/manual/scripting/class#serializable">serializable</a></td>
<td>This property will be serialized</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td>editorOnly</td>
<td>This property will be removed after building</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>rawType</td>
<td>This property is native object type for host platform</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
</tr>
</tbody>
</table>
<h2 id="Other_Attributes">Other Attributes</h2><table>
<thead>
<tr>
<th>Attribute Name</th>
<th>Description</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Note</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/manual/scripting/class#default">default</a></td>
<td>default value of the property</td>
<td style="text-align:center">(Any)</td>
<td style="text-align:center">For serializable property, changing the default value will not affecting property value after it’s modified in Inspector</td>
</tr>
<tr>
<td>notify</td>
<td>trigger the function when property value is changed</td>
<td style="text-align:center">function (oldValue) {}</td>
<td style="text-align:center">need to have default value</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Attributes_for_Inspector_Property">Attributes for Inspector Property</h2><p>When we declare property exposed to Inspector, we can sp]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Behavior]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/attachable-script/"/>
    <id>http://docs.fireball-x.com/manual/scripting/attachable-script/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>What’s the point of a scene editor if we can’t attach scripts to scene nodes and give them behaviors that we can combine and tweak in Inspector? Fireball’s great advantage is to allow you write script that can be attached to scene nodes, while you can still call any engine API from the script! Let’s work it out.</p>
<h2 id="Behavior_(Attachable_Script)">Behavior (Attachable Script)</h2><p>An attachable script must contain definition of a <code>Behavior</code>. The filename of the script is the class name. For example a script named <code>MyClass.js</code> creates a <code>Behavior</code> named <code>MyClass</code>.</p>
<p>(screenshot)</p>
<p>Once the script is attached to a node, the class name will be used for identifying this modular script in Inspector.</p>
<p>(screenshot)</p>
<p>The whole process is similar to how you write component script for an entity-component system but behind the scene they are quite different.</p>
<p>Behavior is one of the most usual <strong>FireClass</strong>. For details and advanced usage of FireClass, please refer to the <a href="/manual/scripting/class">FireClass</a>.</p>
<h3 id="Shared_Instance_of_Behavior">Shared Instance of Behavior</h3><p>Fireball use mixin to combine all scripts attached to a single node together. Thus for all of the scripts that attached to the same node, their instance (<code>this</code>) point to the same node.</p>
<p>Compare to other entity-component system, Fireball don’t have ‘component’ instance and ‘entity’ instance. There is only the node instance, with all properties and method available from scripts attached to the node.</p>
<p>To learn more about how script mixin works in Fireball, see <a href="mixin-mechanic.md">Mixin Mechanics</a>.</p>
<h2 id="Basic_Structure_of_an_Attachable_Script">Basic Structure of an Attachable Script</h2><p>Create a script file that follow this pattern:</p>
<pre><code class="js">var MyClass = Fire.Class({ // use Fire.Class to define your class
    extends: Fire.Behavior, // must have, every FireClass inherit from Fire.Behavior
    properties: {
        // properties that you want to serialize and exposed in Inspector
    },
    statics: {
        // you can export variables and functions declared outside of FireClass prototype object in this script
    },
    onLoad: {
        // initialization code
    }
});
</code></pre>
<p>The name <code>MyClass</code> in the script is not relevant, only the <strong>filename of the script</strong> is used for identifying this FireClass. Thus it’s not allowed to create scripts with the same name in a single project.</p>
<p>As long as your script contains a Behavior definition, it can be dragged and attached onto a node. Let’s keep going to see how to add property and function to your script.</p>
<h2 id="Add_Properties">Add Properties</h2><p>To allow values/variables in your script to be edited from the Inspector, you must add them as <code>properties</code> in your script.</p>
<pre><code class="js">var MyClass = Fire.Class({ // use Fire.Class to define your class
    extends: Fire.Behavior,
    properties: {
        myNumber: 0,
        myNode: {
            default: null,
            wrapper: cc.Node
        }
    }
});
</code></pre>
<p>In the above example, we defined two properties with different format.</p>
<ul>
<li>If your property is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values" target="_blank" rel="external">primitive value</a>, just write the default value that follows colon.</li>
<li>If your property is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects" target="_blank" rel="external">object</a>, you need to explicitly define its default value and type. In the type field you can also write class defined with game engine API.</li>
</ul>
<p>Once this is done, your properties will be serialized and shown in Inspector. From here on you can edit them in Inspector, no need for changing the code if you just want value or reference to be updated.</p>
<p>In your script, you can access your properties with <code>this.myNumber</code>, <code>this.myNode</code>. For detailed script access information, read the next chapter <a href="">Access Scripts</a>.</p>
<h2 id="Add_Functions">Add Functions</h2><p>To add a function:</p>
<pre><code class="js">var MyClass = Fire.Class({ // use Fire.Class to define your class
    extends: Fire.Behavior,
    properties: {
        // some properties
    },
    myFunction: function() {
        Fire.log(&#39;hellow world!&#39;);
    }
});
</code></pre>
<p>Similar to properties, call a function in script with <code>this.myFunction()</code>.</p>
<h2 id="Initialization">Initialization</h2><p>If you want to declare variables that not exposed to Inspector, or run any initialization code when the class is created, put your code in <code>onLoad</code> function:</p>
<pre><code class="js">var MyClass = Fire.Class({ // use Fire.Class to define your class
    extends: Fire.Behavior,
    onLoad: function() {
        this.myVariable = 1;
    }
});
</code></pre>
<p>Event if <code>this.myVariable</code> is not shown in Inspector. It’s still accessible via other scripts. Again, more details can be found at <a href="access-script.md">Access Scripts</a>.</p>
<h2 id="Update">Update</h2><p><code>update</code> is another function that will be called by lifecycle control.</p>
<pre><code class="js">var MyClass = Fire.Class({ // use Fire.Class to define your class
    extends: Fire.Behavior,
    properties: {
        myCounter: 0
    }
    update: function() {
        this.myCounter++;
        Fire.log(this.myCounter);
    }
});
</code></pre>
<p><code>update</code> function will be called every frame by game engine. For different game engine the exact timing of <code>update</code> in program lifecycle may differ. Usually it’s before rendering happens for each frame.</p>
<p>The above example will increase <code>this.myCounter</code> by one each frame, and log the value to Fireball console view.</p>
<h2 id="Game_Engine_API">Game Engine API</h2><p>In your FireClass script, you can use any game engine API, including creating a class instance defined in a pure game engine script.</p>
<p>Let’s take Cocos2d-js engine API for example. If we’d like to set position for the current node. We have to rely on Cocos2d-js API:</p>
<pre><code class="js">var MyClass = Fire.Class({
    extends: Fire.Behavior,
    properties: {
        targetPosX: 0,
        targetPosY: 0
    }
    changePosition: function() {
        // call cc.Node.setPosition(x,y) to change node position
        this.setPosition(this.targetPosX, this.targetPosY);
    }
});
</code></pre>
<p>Don’t worry if you’re not Cocos2d-js user, the only thing that matters is you can use your favorite engine’s API in FireClass.</p>
<p>You can see exactly what you should do for writing script for a specific engine:</p>
<ul>
<li><a href="runtimes/cocos2d-js.md">Cocos2d-js</a></li>
<li>Pixi (coming soon)</li>
<li>Phaser (coming soon)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>What’s the point of a scene editor if we can’t attach scripts to scene nodes and give them behaviors that we can combine and tweak in Ins]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Script Accessibility]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/access-script/"/>
    <id>http://docs.fireball-x.com/manual/scripting/access-script/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>In this chapter we introduce how to communicate between:</p>
<ul>
<li>FireClass and the node it attached to</li>
<li>Different FireClass scripts</li>
<li>FireClass and EngineClass (means class defined in a script with engine API)</li>
</ul>
<h2 id="Access_Current_Node">Access Current Node</h2><p>Use <code>this</code> in your FireClass to access current node. FireClass must be attached to a node to work, so <code>this</code> always point to its node instance.</p>
<h2 id="Access_FireClass_Members">Access FireClass Members</h2><p>If two FireClass are attached to the same node, the communication between these two are very straight-forward:</p>
<pre><code class="js">//ClassA.js
var ClassA = Fire.Class({
    extends: Fire.Behavior,
    properties: {
        propA: &#39;hello world!&#39;
    }
});

//ClassB.js
var ClassB = Fire.Class({
    extends: Fire.Behavior,
    // ...
    whatASay: function() {
        Fire.log(this.propA);
    }
});
</code></pre>
<p>This example shows as long as you have two scripts attached to the same node, they share the same class instance (thanks to mixin). Thus you can use <code>this.propA</code> to access ClassA’s member from ClassB’s script.</p>
<blockquote>
<p><strong>IMPORTANT NOTE</strong> Although it looks easy to access another class on the same node via <code>this</code>, we strongly recommend to use this pattern with caution. Since it’s easy to get bloated member list and it’s hard to differentiate which class a member belong to on the same node. For more specific strategy and recommended patterns, read <a href="">Best Scripting Practice</a>.</p>
</blockquote>
<h3 id="Access_Class_Member_on_Another_Node">Access Class Member on Another Node</h3><p>If two FireClass attached to two different nodes, all you need to do is to access the node instance. Then every member from scripts that attached to it are available.</p>
<pre><code class="js">//ClassA.js attached to NodeA
var ClassA = Fire.Class({
    extends: Fire.Behavior,
    properties: {
        propA: &#39;hello world!&#39;
    }
});

//ClassB.js attached to NodeB
var ClassB = Fire.Class({
    extends: Fire.Behavior,
    properties: {
        classAInstance: { // drag NodeA to this property field of NodeB Inspector
            default: null,
            wrapper: cc.Node
        }
    }
    whatClassASay: function() {
        Fire.log(classAInstance.targetN.propA);
    }
});
</code></pre>
<h2 id="Access_Non-FireClass_Script_(not_attached_to_node)">Access Non-FireClass Script (not attached to node)</h2><p>You can write any kind of JavaScript in your project, and your FireClass script or other non-FireClass script will be able to access them. Basically there are two ways:</p>
<h3 id="Global_Variable">Global Variable</h3><p>If you create a variable in your JavaScript without using <code>var</code> or <code>function</code> keyword, your variable will be accessible from any script in your project.</p>
<p>Let’s see an example:</p>
<pre><code class="js">//Resource.js, this file can have any name
global_res = {
    imageA : &quot;res/imageA.png&quot;,
    imageB : &quot;res/imageB.png&quot;
};
</code></pre>
<p>In your FireClass, you can access imageA like this:</p>
<pre><code class="js">//MyClass.js
var MyClass = Fire.Class({
    extends: Fire.Behavior,
    // ...
    loadImage: function () {
        // let&#39;s assume there&#39;s a load function in this class that takes
        // a file path and load the image file and return the resource
        var image = this.load(global_res.imageA);
    }
});
</code></pre>
<h3 id="JS_Modules">JS Modules</h3><p>If you’re not a fan of global variables, you can write your JS file as a module and use it with  <a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="external">CommonJS</a> standard. Let’s see an example:</p>
<pre><code class="js">//MyModule.js, now the filename matters
function myMethod() {
    //Do something
};
module.exports = {
    myMethod: myMethod
};

//MyFireClass.js
var MyModule = require(&#39;MyModule&#39;);
var MyFireClass = Fire.Class({
    extends: Fire.Behavior,
    // ...
    useModule: function () {
        // this feels more safe since you know where the method comes from
        MyModule.myMethod();
    }
});
</code></pre>
<p>For details, please refer to the <a href="/manual/scripting/module">Module</a>.</p>
<h3 id="Access_FireClass_From_Engine_Script">Access FireClass From Engine Script</h3><p>Access FireClass during runtime is the same deal with access a node instance with engine API. For example:</p>
<ul>
<li>In Cocos2d-js, you can find a node with <a href="http://www.cocos2d-x.org/reference/html5-js/V3.6/symbols/cc.Node.html#getChildByName" target="_blank" rel="external">cc.Node.getChildByName</a></li>
<li>In Pixi.js, you can find a node with <a href="http://pixijs.github.io/docs/PIXI.Container.html#getChildAt" target="_blank" rel="external">PIXI.Container.getChildAt</a></li>
</ul>
<p>Once you have the node, you can access all FireClass properties, functions and members. Of course, you need to attach your FireClass onto that node first.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In this chapter we introduce how to communicate between:</p>
<ul>
<li>FireClass and the node it attached to</li>
<li>Different FireClass ]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Project Structure]]></title>
    <link href="http://docs.fireball-x.com/manual/project-structure/"/>
    <id>http://docs.fireball-x.com/manual/project-structure/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Project_File_Structure">Project File Structure</h2><p>Files are structured in a Fireball project as below:</p>
<pre><code>ProjectName
├──assets
├──library
├──local
├──settings
└──temp
</code></pre><ul>
<li>Public folders to project collaborators<ul>
<li><strong>assets</strong><br>Project resource files, including all actual elements used to form up a project. Such as:<ul>
<li>Scenes</li>
<li>Scripts</li>
<li>Sprites</li>
<li>Textures</li>
<li>Audio files</li>
<li>…<br>Just think them as all loaded resources in the Assets Panel of the [Editor]（/start/editor-overview)</li>
</ul>
</li>
<li><strong>settings</strong><br>Global project settings, which are of project-level and shared by all project collaborators. Such as:<ul>
<li>Plug-in settings</li>
<li>Button settings</li>
<li>Physics settings</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>Private folders used by current client <em>(and you should ignore them in version control)</em><ul>
<li><strong>library</strong><br>Files in this folder are for resource library management, and will be used by the <a href="/manual/start/editor-overview">Editor</a> for library data persistence and resource display.</li>
<li><strong>local</strong><br>Local project settings, which store user’s customized settings, such as Editor layout.</li>
<li><strong>temp</strong><br>Temporary files created by Fireball Engine.</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Next…">Next…</h3><ul>
<li>Read <a href="/manual/start/editor-overview/">Editor Overview</a> to learn more about the IDE.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Project_File_Structure">Project File Structure</h2><p>Files are structured in a Fireball project as below:</p>
<pre><code>ProjectNam]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[What's Fireball]]></title>
    <link href="http://docs.fireball-x.com/manual/introduction/"/>
    <id>http://docs.fireball-x.com/manual/introduction/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>So is Fireball a game engine? No.<br>Is Fireball a full integrated game development solution? Yes.<br>I’m using a game engine to develop my game, can I add Fireball to my arsenal to extend my tool chain and have fully integrated assets pipeline and scene editing ability? YES!!!</p>
<h2 id="Cross-Engine_Editor">Cross-Engine Editor</h2><p>Fireball is the first cross-engine integrated game development editor in the industry. It’s structure can be described like this:</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8515113/e3bceec4-23ce-11e5-97f6-ecbe87df5d90.png" alt="fireball-structure"></p>
<p>With three layers of framework work together, it give users a full-featured game editor that can:</p>
<ul>
<li>Create and edit scenes to organize your game content.</li>
<li>Allow user to drag script to nodes (or game objects, display objects, entities, whatever it’s called in your beloved engine) to add function and behaviors in scene.</li>
<li>Serialize script variables and allow user edit those data in Inspector.</li>
<li>Run and preview game within editor, pause anytime to debug, hot update your scripts, change any variable exposed to editor.</li>
<li>Provide asset database system that manage url(file path) and uuid binding for all resources. Thus user can move/rename/duplicate assets after import to the project without breaking any reference.</li>
<li>Provide full asset workflow including: sprite, atlas, timeline animation, skeleton animation, audio, GUI, particle, prefab.</li>
<li>Extend the editor quickly and easily with the open package system. Developer with different game engine background can even collaborate on a tool together and build tools that can be used with different engines.</li>
</ul>
<p>If you’re non-programmer and have no idea what I’m talking about. Don’t worry you don’t need to understand how Fireball works before you can use it. Just skip this documentation and get on with it anyway.</p>
<h2 id="Scene-Graph_to_Hierarchy_View">Scene-Graph to Hierarchy View</h2><p>Fireball supports any <a href="https://en.wikipedia.org/wiki/Scene_graph" target="_blank" rel="external">scene-graph</a> based engine. Usually in those engines a series of function calls are used for building hierarchy structure or tree structure for all nodes in a scene. Fireball turns those function calls into an editable graphical panel: Hierarchy.</p>
<p>In this panel you can create/remove a node, expand/collapse a node, add child to a node or move a node to be child of another.</p>
<p>Hierarchy is the key junction that connects other core modules. For example the Inspector only works when you have selected a node. For details on how Hierarchy works, <a href="/manual/editor-overview#hierarchy">read this section</a>.</p>
<p><strong>Note:</strong> If you’re unclear of the concept ‘Node’, you can read this <a href="http://www.cocos2d-x.org/programmersguide/2/index.html#scene-graph" target="_blank" rel="external">comprehensive article from Cocos2d-x programming guide</a>.</p>
<h2 id="Node_Type_and_Behavior">Node Type and Behavior</h2><p>Engines supported by Fireball are usually consists of a lot individual classes. You can create instance of these classes in <a href="/manual/editor-interface/hierarchy">Hierarchy</a> panel. For example a Sprite node is an instance of <code>cc.Sprite</code> (cocos2d-js) class, a LabelBMFont node is an instance of <code>cc.LabelBMFont</code> class. Different type of nodes are capable of rendering sprite, text, UI elements, tilemap and animation.</p>
<p>In Fireball, user can add properties and functions to any type of node easily by creating a <strong>Behavior</strong> script and attach it to the node.</p>
<h3 id="Inspector">Inspector</h3><p><a href="/manual/editor-interface/inspector">Inspector</a> is a panel to display detailed information about your currently selected node. We call these editable information <strong>properties</strong>. There are properties of node class and properties defined in behavior scripts.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9423058/c973e162-48e5-11e5-8858-5d9661dee749.png" alt="inspector"></p>
<p>Programmers can write behavior script with properties that can be edited in <strong>Inspector</strong>, effectively delegate data inputing and tweaking work to non-programmers such as artists and designers.</p>
<p>For details on how Inspector works, <a href="/manual/editor-interface/inspector">read this section</a> in Editor Overview.</p>
<h3 id="Attach_Behavior_to_Node">Attach Behavior to Node</h3><p>To add behaviors to a node, all you have to do is drag your script to the <strong>Inspector</strong> with the node selected. The behavior will be added to Inspector. You can drag more script onto a single node. Inspector will show each behavior separately with their properties.</p>
<p>To learn the details on how behavior works, please read <a href="/manual/scripting/attachable-script">Behavior</a> guide.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>So is Fireball a game engine? No.<br>Is Fireball a full integrated game development solution? Yes.<br>I’m using a game engine to develop ]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Editor Overview]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-overview/"/>
    <id>http://docs.fireball-x.com/manual/editor-overview/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This chapter will introduce you all the features of Fireball Editor. It would be a good place for being familiar with Fireball Editor, and getting ready for your future Fireball works.<br>Please make sure you have finished reading the following articles before going further:</p>
<ul>
<li><a href="/manual/introduction">Introduction</a></li>
<li><a href="/manual/dashboard">Dashboard</a></li>
</ul>
</blockquote>
<h2 id="Overview">Overview</h2><p>You’ll have no chance to build an exciting game without understanding what all the editor tools can do for you first, so hold your horse for a while and meet the Fireball Editor along with thrilling features. And, whenever you are in doubt, don’t forget this chapter is a good place to look up for as well.</p>
<p>Fireball Editor mainly consists of several panels. These panels cover project asset management, scene editing, data inspecting, building and other extended functions which completes the full workflow of creating a game. You can adjust each panel’s size and position by your own taste. Beside of these panels, there are other UIs which are essential for building a game, including menus, tool bar and DevTools window, and you should know about them as well.</p>
<p>Check out the screenshot below - it gives a basic concept of the UI layout. We will discuss every piece of features in the sections below.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9374257/9d4c2ba0-4726-11e5-99bd-afaac5e59940.png" alt="editor-overview-intro"></p>
<h2 id="Panels">Panels</h2><p>Please read through each of the following panels to learn how it works:</p>
<ul>
<li><a href="/manual/editor-interface/assets">Assets</a></li>
<li><a href="/manual/editor-interface/hierarchy">Hierarchy</a></li>
<li><a href="/manual/editor-interface/scene">Scene</a></li>
<li><a href="/manual/editor-interface/inspector">Inspector</a></li>
<li><a href="/manual/editor-interface/console">Console</a></li>
<li><a href="/manual/editor-interface/main-menu">Main Menu</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>This chapter will introduce you all the features of Fireball Editor. It would be a good place for being familiar with Fireba]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scene Panel]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-interface/scene/"/>
    <id>http://docs.fireball-x.com/manual/editor-interface/scene/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9374374/c5ee4920-4727-11e5-803d-78de5f3d4fa1.png" alt="scene-panel"><br>The <strong>Scene Panel</strong> is a WYSIWYG visual editor where we assembles the graphic and interactive node in scene, such as setting up background, floor, obstacles, GUI, menus and other visual elements.</p>
<h2 id="Navigation">Navigation</h2><p>Currently there are two operation for scene panel navigation:</p>
<ul>
<li><kbd>Shift + Mouse Drag</kbd>: pan the scene view.</li>
<li><kbd>Mouse Scroll</kbd>: zoom in and out.</li>
</ul>
<h2 id="Selection">Selection</h2><p>Left click on a visual element (for example a sprite) to select it, you’ll see the blue frame around the sprite indicating it’s the current selection.</p>
<p>If you drag a selection box around multiple sprites, you’ll select them all at once.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9401288/b0aa5288-47ff-11e5-84f3-421b3486777f.png" alt="drag selection"></p>
<p>Your selection in <strong>Scene</strong> and <strong>Hierarchy</strong> will reflect each other. Sometimes it’s hard to select what you want in a visually crowded scene, you can always find the node in <strong>Hierarchy</strong> tree view, then manipulate it in <strong>Scene</strong>. Thus, please always name your node with something meaningful.</p>
<h2 id="Transform_Manipulation">Transform Manipulation</h2><p>One of the key purpose of using <strong>Scene</strong> panel is to layout graphical elements. We do this by using <strong>Transform Gizmos</strong>, which is on the top left corner of <strong>Scene</strong> panel.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9401661/763a3c5c-4805-11e5-83c6-8b9db276765f.png" alt="move"></p>
<p><strong>Translate</strong>: this is the default transform gizmo when you launch Fireball Editor. It has two arrow handle and and a blue center handle. Drag green arrow moves your element along y axis, drag red arrow moves it along x axis. Drag on the center handle moves the element freely.</p>
<p>You can activate this gizmo by pressing <kbd>W</kbd> when <strong>Scene</strong> panel is focused.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9401725/63ad22a6-4806-11e5-90a9-315d1fa69a55.png" alt="rotate"></p>
<p><strong>Rotate</strong>: click on the middle one of gizmo selection buttons will switch over to Rotate gizmo, which looks like a red circle with an arrow. Drag on the arrow or anywhere inside the circle to change the rotation of the node.</p>
<p>You can activate this gizmo by pressing <kbd>E</kbd> when <strong>Scene</strong> panel is focused.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9401739/9349109c-4806-11e5-9826-1393b530a4be.png" alt="scale"></p>
<p><strong>Scale</strong>: drag on the green box to change the scale of the node’s y axis, or drag on the red box to change the node’s x axis. Or you can drag on the center handle to scale both axis.</p>
<p>You can activate this gizmo by pressing <kbd>R</kbd> when <strong>Scene</strong> panel is focused.</p>
<h2 id="Design_Resolution">Design Resolution</h2><p><img src="https://cloud.githubusercontent.com/assets/344547/9403726/2367c6d6-481c-11e5-869b-f867670ef5cb.png" alt="design resolution"></p>
<p>You can set design resolution (width and height) by the widget on top of <strong>Scene</strong> panel.</p>
<p>Design Resolution decides how much of scene content (in pixels) will be shown in the final game view. Game developer use this set of values together with screen content policy to make sure the game can be scaled up and down on different devices.</p>
<p>Your design resolution setting will be shown as a purple frame in the scene, only the content inside the purple frame will make into the game!</p>
<hr>
<p>Continue to read <a href="/manual/editor-interface/inspector">Inspector</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9374374/c5ee4920-4727-11e5-803d-78de5f3d4fa1.png" alt="scene-panel"><br>The <]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Main Menu]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-interface/main-menu/"/>
    <id>http://docs.fireball-x.com/manual/editor-interface/main-menu/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Fireball">Fireball</h2><ul>
<li><strong>About Fireball</strong><br>Display about information and copyrights of Fireball Editor.</li>
<li><strong>Hide Fireball (Shortcut: <kbd>H</kbd> )</strong><br><em>mac only</em> Hide Fireball window.</li>
<li><strong>Hide Others (Shortcut: <kbd>Shift + H</kbd> )</strong><br><em>mac only</em> Hide all other windows except Fireball</li>
<li><strong>Show All</strong><br><em>mac only</em> Show all hidden window.</li>
<li><strong>Quit (Shortcut: <kbd>Ctrl/Command + Q</kbd> )</strong><br>Exit Fireball Editor</li>
</ul>
<h2 id="File">File</h2><ul>
<li><strong>Open Project…</strong><br>Close Fireball Editor and open Dashboard.</li>
<li><strong>New Scene (Shortcut: <kbd>Ctrl/Command + N</kbd> )</strong><br>Create a new scene in current project.<br>A game consists of one or more scenes. You’ll need to create new scenes when you indend to make indepent modules such as new stages, main menu, loading screen, setting screen, etc.</li>
<li><strong>Save Scene (Shortcut: <kbd>Ctrl/Command + S</kbd> )</strong><br>Save the current editing scene.<br>A save file dialog will pop up if the current scene is never saved before, in which you can determine where to save your scene file (*.fire). If the scene has been saved, Fireball Editor will update the save file directly.<blockquote>
<p>It is suggested to place all scene files in a particular directory for management, for example <strong>assets/scenes</strong>.</p>
</blockquote>
</li>
<li><strong>Build Settings</strong><br>Set the project build parameters.<br>Building is a critical step in the deployment process. Fireball Editor will pack and optimize your game files during building process, in order to make it able to be deployed on various platforms fast, safely and correctly. Through Build Settings, you can fine tuning the parameters for certain needs, as well as to preview your game before deployment.<br>You will find more information about Build Settings in the [Tool Windows](#tool-windows] section.</li>
</ul>
<h2 id="Edit">Edit</h2><ul>
<li><strong>Undo (Shortcut: <kbd>Z</kbd> )</strong><br>Undo the last operation.</li>
<li><strong>Redo (Shortcut: <kbd>Shift + Z</kbd> )</strong><br>Redo the latest undone operation.</li>
<li><strong>Cut (Shortcut: <kbd>X</kbd> )</strong><br>Cut the selected Entity into the clipboard.</li>
<li><strong>Copy (Shortcut: <kbd>C</kbd> )</strong><br>Copy the selected Entity into the clipboard.</li>
<li><strong>Paste (Shortcut: <kbd>V</kbd> )</strong><br>Paste the Entity in the clipboard into the current scene.</li>
<li><strong>Select All (Shortcut: <kbd>A</kbd> )</strong><br>Select all Entities in the current scene.</li>
<li><strong>Play (Shortcut: <kbd>Ctrl/Command + P</kbd> )</strong><br>Play current scene in browser.</li>
<li><strong>Reload Connected Device (Shortcut: <kbd>Shift + Ctrl/Command + P</kbd>)</strong><br>Reload browser tab that currently playing the current scene.</li>
</ul>
<h2 id="Panel">Panel</h2><ul>
<li><strong>Assets (Shortcut: <kbd>Ctrl/Command + 2</kbd></strong><br>Open or focus <strong>Assets</strong> panel.</li>
<li><strong>Hierarchy (Shortcut: <kbd>Ctrl/Command + 4</kbd></strong><br>Open or focus <strong>Hierarchy</strong> panel.</li>
<li><strong>Inspector (Shortcut: <kbd>Ctrl/Command + 3</kbd></strong><br>Open or focus <strong>Inspector</strong> panel.</li>
<li><strong>Scene (Shortcut: <kbd>Ctrl/Command + 1</kbd></strong><br>Open or focus <strong>Scene</strong> panel.</li>
</ul>
<h2 id="Layout">Layout</h2><ul>
<li><strong>Default</strong><br>Classic layout with <strong>Assets</strong>, <strong>Inspector</strong>, <strong>Hierarchy</strong>, <strong>Scene</strong> and <strong>Console</strong> panels open.</li>
<li><strong>Assets</strong><br>A layout designed for asset and data extension developer, with <strong>Assets</strong>, <strong>Inspector</strong>, <strong>AssetDB Debugger</strong> and <strong>Console</strong> panel open.</li>
</ul>
<h2 id="Developer">Developer</h2><ul>
<li><strong>Reload (Shortcut: <kbd>Ctrl/Command + R</kbd> )</strong><br>Reload the Fireball Editor.</li>
<li><strong>Compile (Shortcut: <kbd>F7</kbd> )</strong><br>Recompile all scripts in the current scene.</li>
<li><strong>Developer Tools (Shortcut: <kbd>Alt + Ctrl/Command + I</kbd> )</strong><br>Open the <strong>Developer Tools</strong> window.<br>Various useful and powerful features are provided in <strong>Developer Tools</strong> for analyzing, debugging and tracing, which are essential for game script developers. You will find more information about <strong>Developer Tools</strong> in the <a href="#tool-windows">Tool Windows</a> section.</li>
<li><strong>Run Test</strong><br>Run unit tests.</li>
</ul>
<h2 id="Help">Help</h2><ul>
<li><strong>Website</strong><br>Visit the official website of Fireball Engine for more information.</li>
<li><strong>Documentation</strong><br>Visit the documentation site of Fireball Engine for engine manuals and scripting API references.</li>
<li><strong>Forum</strong><br>Visit the forum of Fireball Engine to share ideas with other users and developers.</li>
<li><strong>Submit An Issue On Github</strong><br>Commit an issue in the Fireball Engine Github repository. You can always let us know by committing issues if you encounter bugs or have better ideas about Fireball Engine. Our team will be cheerful and reply you as soon as possible.</li>
<li><strong>Subscribe To Newsletter</strong><br>Subscribe to Fireball Engine news letters for latest news and updates.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Fireball">Fireball</h2><ul>
<li><strong>About Fireball</strong><br>Display about information and copyrights of Fireball Editor.</li>]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Inspector Panel]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-interface/inspector/"/>
    <id>http://docs.fireball-x.com/manual/editor-interface/inspector/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9423058/c973e162-48e5-11e5-8858-5d9661dee749.png" alt="inspector"></p>
<p>The <strong>Inspector Panel</strong> allows you to inspect and edit properties of selected node in scene. There are two sources of properties in inspector:</p>
<ul>
<li>properties from the base node (such as <code>position</code>, <code>rotation</code>, <code>color</code> from Node class, and <code>texture</code> from Sprite class).</li>
<li>properties from behaviors attached to the node (such as <code>gravity</code> from Sheep class, which is a user script attached to the node)</li>
</ul>
<p>All modifications made in <strong>Inspector</strong> will be applied onto selected item without recompiling. You can tested this by modifying position property of any selected node and see its position changing immediately in <strong>Scene</strong> view.</p>
<p>If you’d like to learn how to create Behavior script, please read <a href="/manual/scripting/attachable-script">Behavior</a> scripting guide.</p>
<h2 id="Modify_Property">Modify Property</h2><p>Number, string, color and enum are value type properties. You can modify these properties with easy operations:</p>
<ul>
<li><strong>Number</strong>: type a number in the property field, or click on the up or down arrow at the right of the field to increase or decrease the value step by step.</li>
<li><strong>String</strong>:  type text in the input field. Or paste any text into the field.</li>
<li><strong>Enum</strong>:  to set enum value, click to open the drop down list and choose a value from the list.</li>
<li><strong>Color</strong>: click on the color indicator to open color panel, and choose the color you want.</li>
</ul>
<p>Then there are reference type properties, such as node and asset. To set or modify these properties, simply drag a node or an asset onto the property field. These properties are identified with a colored label, yellow label requires an asset while green label requires a node.</p>
<h2 id="Change_Node_Name">Change Node Name</h2><p>At the top of the <strong>Inspector</strong> panel there’s a input field showing the node name. You can change the node name by typing in this field. So you can rename a node in either <strong>Inspector</strong> or <strong>Hierarchy</strong>.</p>
<h2 id="Behavior_In_Inspector">Behavior In Inspector</h2><p>To add behavior to a node, drag a script from <strong>Asset</strong> panel to <strong>Inspector</strong> will attach the script to the current selected node. You’ll see the Behavior at the bottom of <strong>Inspector</strong>.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9423595/0b8cedca-48fd-11e5-9100-2559f6065098.png" alt="behavior"></p>
<p>You can click the title of Behavior (with a down arrow at the left) to fold the behavior properties. This is convenient if you have a lot of properties to show in your <strong>Inspector</strong> panel.</p>
<p>To remove (detach) a behavior from a node, click the <strong>x</strong> button at the right of behavior title.</p>
<hr>
<p>Continue to read <a href="/manual/editor-interface/console">Console</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9423058/c973e162-48e5-11e5-8858-5d9661dee749.png" alt="inspector"></p>
<p>The]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hierarchy Panel]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-interface/hierarchy/"/>
    <id>http://docs.fireball-x.com/manual/editor-interface/hierarchy/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9374769/9ba11b76-472b-11e5-9c1f-2c3f540da3fa.png" alt="hierarchy panel"></p>
<p><strong>Hierarchy</strong> panel is a tree view contains all nodes in the current open scene. Each entry in this tree view represents an individual <strong>node</strong>. And nodes are usually organized hierarchically (parent-child relationship in other words). This panel’s main purpose is to manage the hierarchical structure of current scene, also giving you quick access to each node so you can edit them.</p>
<h2 id="Create_Node">Create Node</h2><p>There are two ways to add node to Hierarchy tree view:</p>
<ul>
<li>click “+” button at top left corner, and select your node type from the context menu.</li>
<li>drag an associated asset from <strong>Assets</strong> view to <strong>Hierarchy</strong> view. For example texture asset (<code>.png</code>, <code>.jpg</code>, etc ) are associated to Sprite, dragging a texture asset to <strong>Hierarchy</strong> will create a Sprite node with that texture.</li>
</ul>
<p>The list of node from create node context menu will vary according to the current engine your project use.</p>
<h2 id="Parenting">Parenting</h2><p>You can make a node the child of another node, by dragging the desired child node onto the node you want it to be parent. A parent node can be child of yet another node. You can create nested node structure as you like, and change their hierarchical relationship anytime.</p>
<p>Once you have some nested node, you’ll see a right arrow on the left of a parent node. Click on the node will expand its children list. Click on an expanded node will fold it, just like in <strong>Assets</strong> tree view.</p>
<h2 id="Reorder_Node">Reorder Node</h2><p>Besides drag a node onto another node, you can also drag the node to move up and down over its siblings.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9401105/ca2718c0-47fc-11e5-97e2-3e2ea1087907.png" alt="reorder node"></p>
<p>The orange frame shows current dragging node’s parent scope, the green line indicates where the node should end up with.</p>
<p>Currently node order are used for rendering order. The node at top of the list will be rendered first, the node at bottom of the list will be rendered last. In the game view you will always see node at bottom of the list over other node.</p>
<h2 id="Manage_Node">Manage Node</h2><p>Right click on a node to bring up its context menu, you can do these jobs:</p>
<ul>
<li>Create a new node as child of current selected node.</li>
<li>Duplicate node, make the new node a sibling of current selected node. Can also be done with <kbd>Cmd/Ctrl + D</kbd></li>
<li>Rename node, can also be done with pressing <kbd>Enter</kbd> on mac or <kbd>F2</kbd> on windows.</li>
</ul>
<hr>
<p>Continue to read <a href="/manual/editor-interface/scene">Scene</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9374769/9ba11b76-472b-11e5-9c1f-2c3f540da3fa.png" alt="hierarchy panel"></p>
]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Console Panel]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-interface/console/"/>
    <id>http://docs.fireball-x.com/manual/editor-interface/console/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9423605/021a5b0a-48fe-11e5-93d9-d728d4c81eef.png" alt="console"></p>
<p>The <strong>Console Panel</strong> is for monitoring game script running status and console output, in purpose of debugging. Information printed here can be from your scripts, or Fireball Editor itself.</p>
<p>Fireball Editor distinguishes different levels of information by colors. The severities are ordered from the lowest to the highest as:</p>
<ul>
<li><strong>Log</strong> (grey): information usually for tracking or debugging.</li>
<li><strong>Info</strong>（blue): information usually for notification or notes.</li>
<li><strong>Success</strong> (green): information for feedback of successful operation.</li>
<li><strong>Warn</strong>（yellow）: information usually for indicating that there is an abnormal situation, but won’t crash the game.</li>
<li><strong>Error</strong>（red）: information for fatal errors which will crash the game, such as uncaught exceptions.</li>
</ul>
<p>You can manage information in the <strong>Console Panel</strong> when there is too many:</p>
<ul>
<li><strong>Clear</strong> <img src="https://cloud.githubusercontent.com/assets/344547/9423627/4faead48-48ff-11e5-8373-8aad225d82d5.png" alt="clear">: Clear all console outputs.</li>
<li><strong>Filter box</strong> <img src="https://cloud.githubusercontent.com/assets/344547/9423628/5a771b3e-48ff-11e5-9189-4c589b22ceb0.png" alt="filter">:<br>Filter console information by keywords. When <strong>Regex</strong> checkbox is ticked, content in the filter box is considered as a regular expression.</li>
<li><strong>Level filter combobox</strong> <img src="https://cloud.githubusercontent.com/assets/344547/9423630/64b8f9a0-48ff-11e5-90ea-b035f9504962.png" alt="level">:<br>Display information of only one severity level. All levels will be shown when <strong>All</strong> is selected.</li>
<li><strong>Collapse checkbox</strong> <img src="https://cloud.githubusercontent.com/assets/344547/9423634/7552bc2e-48ff-11e5-89c2-2ad2603d87c8.png" alt="collapse">: Ticking this checkbox will merge same outputs, with a leading number that tells how many times it has been repeated. This feature is rather useful and space economic when there are many outputs and their sequence don’t matter.</li>
</ul>
<hr>
<p>Continue to read <a href="/manual/editor-interface/main-menu">Main Menu</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9423605/021a5b0a-48fe-11e5-93d9-d728d4c81eef.png" alt="console"></p>
<p>The <]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hierarchy]]></title>
    <link href="http://docs.fireball-x.com/manual/editor-interface/assets/"/>
    <id>http://docs.fireball-x.com/manual/editor-interface/assets/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9374759/8e996776-472b-11e5-93fa-c22247676283.png" alt="Assets"></p>
<p>This is where you can access and manage assets of your game. You’d better start from here if you just created an empty project. In that case you’ll see an empty list waiting for you to drag stuff into it.</p>
<h2 id="Basics">Basics</h2><p>The list matches file content inside your project’s <code>assets</code> folder. (to learn the file structure of a Fireball project, read <a href="/manual/project-structure">Project Structure</a> ) If your project assets folder have several sub-folders, you will see them as folder icon <img src="https://cloud.githubusercontent.com/assets/344547/9375313/c04287fc-4731-11e5-8cda-259bebe5584a.png" alt="folder"> in <strong>Assets</strong> panel as well. If you see a right arrow icon on the left of a folder in the list, you can click on it to expand the nested list it contains. Click on an expanded folder to “fold” it so you have more space.</p>
<p>The files in Assets view are displayed with an icon and filename. Icon indicates the type of file identified by file extension, here’s the details:</p>
<ul>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375307/c016678a-4731-11e5-93a0-b0673e894c6c.png" alt="asset"> <strong>Default asset</strong>: if a file cannot be recognized as one of the registered type, this default asset icon will be used.</li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375310/c018bdd2-4731-11e5-9b3c-1772695feb4f.png" alt="atlas"> <strong>Atlas plist</strong>: A common sprite atlas asset type with <code>.plist</code> extension, you can create this type of assets in tools such as <a href="https://www.codeandweb.com/texturepacker" target="_blank" rel="external">TexturePacker</a></li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375309/c0182fac-4731-11e5-80d9-e74b92f0e098.png" alt="audio-clip"> <strong>Audio clip</strong>: Any audio file with <code>.mp3</code>, <code>.wav</code>, <code>.ogg</code></li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375308/c018043c-4731-11e5-823a-9c60222a6c35.png" alt="bitmap-font"> <strong>Bitmap font</strong>: a font format commonly used in games to render characters as sprite. You can use these tools (<a href="http://glyphdesigner.71squared.com/" target="_blank" rel="external">Glyph Designer</a> <a href="http://www.angelcode.com/products/bmfont/" target="_blank" rel="external">AngleCode Bmfont</a> ) to create <code>.fnt</code> bitmap font files.</li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375314/c044c364-4731-11e5-9990-b3356ffd1e45.png" alt="javascript"><img src="https://cloud.githubusercontent.com/assets/344547/9375320/c06efc4c-4731-11e5-85c0-c21419fffb62.png" alt="typescript"><img src="https://cloud.githubusercontent.com/assets/344547/9375311/c03314d4-4731-11e5-945b-e1c6a72a0be6.png" alt="coffeescript"><img src="https://cloud.githubusercontent.com/assets/344547/9375312/c03f1c20-4731-11e5-8e90-ca90d442e12c.png" alt="css"><img src="https://cloud.githubusercontent.com/assets/344547/9375315/c044f352-4731-11e5-8788-e0e569574fdf.png" alt="html"> <strong>Script files</strong>: including Javascript <code>.js</code>, TypeScript <code>.ts</code>, Coffeescript <code>.coffee</code>, CSS <code>.css</code>, HTML <code>.html</code>. These file format are all supported for scripting your game or editor extensions.</li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375317/c057cfea-4731-11e5-8d57-e43d9dfd03b6.png" alt="scene"> <strong>Scene</strong>: Fireball’s scene file. Can only be created in <strong>Assets</strong> view.</li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375319/c06c4718-4731-11e5-99e2-a47912dc5c2d.png" alt="text"> <strong>Text file</strong>: a file with extension <code>.txt</code>.</li>
<li><img src="https://cloud.githubusercontent.com/assets/344547/9375321/c0733c8a-4731-11e5-9648-77d857c60c55.png" alt="ttf-font"> <strong>TTF font</strong>: TrueType font format.</li>
</ul>
<h2 id="Add_Assets_to_Project">Add Assets to Project</h2><p>There are three ways of add new assets to project:</p>
<ul>
<li>create asset in <strong>Assets</strong> view.</li>
<li>drag asset files from your file system (such as Finder for Mac or Explorer for Windows) into <strong>Assets</strong> view.</li>
<li>copy or move asset files to your project’s <code>assets</code> folder in your file system, then focus Fireball Editor window to automatically scan and import new assets.</li>
</ul>
<p>Add new files from file system is self explanatory, let’s see how to creating asset in  <strong>Assets</strong> view:</p>
<ul>
<li>Click on the top-left <img src="https://cloud.githubusercontent.com/assets/344547/9375817/dbe3e608-4737-11e5-90d1-5a575600c398.png" alt="image"> plus button.</li>
<li>or right click anywhere on <strong>Assets</strong> panel, and select <code>Create</code> sub menu.</li>
<li>In either way, you will see the following options in <code>Create</code> context menu:<ul>
<li>Folder</li>
<li>JavaScript</li>
<li>CoffeeScript</li>
<li>Scene</li>
</ul>
</li>
<li>click one of them and your asset will be created in currently selected folder.</li>
</ul>
<p>There seems to be not many options at the moment, but as development goes, Fireball will be able to create more types of assets with builtin tools, and saves user money and trouble to find external tools.</p>
<h2 id="Manage_Assets">Manage Assets</h2><p>You can rename/move/delete assets in this panel.</p>
<ul>
<li>to rename an asset, right click the asset and select <code>rename</code> from context menu.</li>
<li>to move an asset, drag the asset around the tree view, until you’re happy with where its new location is. The new folder to hold the asset will be highlighted in orange.</li>
<li>to delete an asset, right click and select <code>delete</code> or select the asset and press <kbd>Cmd + Backspace</kbd> on mac or <kbd>Del</kbd> on windows.</li>
</ul>
<p>Besides these operations, there are other options in right click context menu that gives you more details about the asset:</p>
<ul>
<li><code>Reveal in Finder</code> (mac) <code>Reveal in Explorer</code> (win): select this and Fireball will open the folder that contains the asset in Finder/Explorer.</li>
<li><code>Reveal in Library</code>: open the library folder that contains the imported copy of the asset.</li>
<li><code>Show UUID</code>: print the UUID of the asset in console panel. This is mainly for debug purpose and normal user should not need it.</li>
</ul>
<h2 id="Search_Asset">Search Asset</h2><p>By typing in the search field at top of <strong>Assets</strong> panel,  the asset tree view will only show assets whose filename contains your typed search keyword.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/9376761/ffbc3312-4743-11e5-9b3e-d7f5abe64b95.png" alt="search asset"></p>
<p>It’s convenient to find the asset you want this way if your project is getting bigger. Once you find the asset you want, select it in the filtered list, and click the pin icon at the right of search field. It will go back to assets tree view and keep the asset you find highlighted.</p>
<hr>
<p>Continue to read <a href="/manual/editor-interface/hierarchy">Hierarchy</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/344547/9374759/8e996776-472b-11e5-93fa-c22247676283.png" alt="Assets"></p>
<p>This i]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dashboard]]></title>
    <link href="http://docs.fireball-x.com/manual/dashboard/"/>
    <id>http://docs.fireball-x.com/manual/dashboard/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>Dashboard is the first thing you see when launch Fireball Editor. From here you can create new project, open existing project and get helpful information. Let’s open Fireball and get started right now!</p>
<h2 id="Dashboard_Overview">Dashboard Overview</h2><p><img src="https://cloud.githubusercontent.com/assets/344547/8473028/d0fc7a50-20d8-11e5-8737-dd2fca288d9f.png" alt="dashboard-overview"></p>
<p>This is Fireball dashboard, it contains the following tabs:</p>
<ul>
<li><strong>Recent Projects</strong>: a list of recently opened projects</li>
<li><strong>New Project</strong>: a wizard to guide you through creating a new Fireball project.</li>
<li><strong>Open Others</strong>: open a project anywhere on your disk, click this tab will open a dialog to browse files.</li>
<li><strong>Help</strong>: a static page with useful information about Fireball and dashboard.</li>
</ul>
<p>Let’s get to know them one by one.</p>
<h3 id="Recent_Projects">Recent Projects</h3><p>You can quickly access recently opened projects via <strong>Rencent Projects</strong>. This page may be empty the first time you run Fireball, don’t worry you can get back here after you created one or two projects.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8473491/97fc0438-20dc-11e5-9b07-18f6963d5945.png" alt="recent project hovering"></p>
<p>By hovering your mouse on a recent project entry, action buttons will be displayed on top of the project entry. You can:</p>
<ul>
<li>Click <strong>Open</strong> to open the project in Fireball Editor</li>
<li>Click <strong>Close</strong> to remove the selected entry from the recent project list. This doesn’t delete the actual project folder from your disk.</li>
</ul>
<p>By hovering or click on a project entry, you’ll see its location path in status bar at the bottom of dashboard:</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8473565/3892ba7c-20dd-11e5-954e-5bd7aac44575.png" alt="status bar"></p>
<h3 id="New_Project">New Project</h3><p>You can create a new Fireball project via <strong>New Project</strong> tab. Click <code>New Project</code> will bring out a wizard page for setting up new project as you want.</p>
<h4 id="Select_a_Runtime_Engine">Select a Runtime Engine</h4><p>First we will choose a runtime game engine for your project. Beware that in Fireball we use game engine’s original API for scripting, so you can’t really convert a project with EngineA to EngineB once you create it. Choose the game engine you’re familiar with or most suitable for your project.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8473934/9ba21e6c-20df-11e5-8057-09cbfb38aebc.png" alt="choose runtime engine"></p>
<p>In this page you can see a list of runtime engine. By clicking on one of them, you’ll see the runtime engine’s description at the bottom of the page.</p>
<p>Click <strong>Learn More</strong> to jump over to the website of current selected runtime engine.</p>
<p>Click <strong>Next</strong> button to go to next step.</p>
<h4 id="Select_a_Project_Template">Select a Project Template</h4><p>Now we’re at project template selecting page. A project template can contain scaffolding of a certain type of game project, or a bunch of useful resources and scripts to help you create game more quickly and easily.</p>
<p><em>Note: There are not many template to choose at early stage of Fireball. We will keep adding templates to cover more game type and user needs in future releases.</em></p>
<p>Click on one of the template to see its description.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8474608/de419eb0-20e3-11e5-8b10-f55ba37806ef.png" alt="choose template"></p>
<p>At the bottom of the page you can specify the location path and name of your project. The text input field shows you the location path, the last part of the path will be used as project name.</p>
<p>You can also click <strong>Browse</strong> button to choose a location by browsing through your disk.</p>
<p>Once everything is ok, click <strong>Create</strong> button to create your new project. Dashboard will be shut down, the new project will be loaded in Fireball Editor.</p>
<p>You can also click <strong>Back</strong> to go back and choose another engine.</p>
<h3 id="Open_Other…">Open Other…</h3><p>Can’t find your project in <strong>Recent Projects</strong> page? Or just downloaded a project from online? You can find your project anywhere in your disk with <strong>Open Other</strong> tab.</p>
<p>Click the tab will open a pop-up dialog with local file system. Choose your project folder in this dialog. Fireball Editor maintains projects with directory instead of a particular project file.</p>
<h3 id="Help">Help</h3><p>You can access Fireball manuals and help documentations in <strong>Help</strong> page.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8475754/e5ea1ee0-20ec-11e5-9cbe-ab8ee3540de5.png" alt="dashboard help"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dashboard is the first thing you see when launch Fireball Editor. From here you can create new project, open existing project and get hel]]>
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[User Manual]]></title>
    <link href="http://docs.fireball-x.com/manual/index/"/>
    <id>http://docs.fireball-x.com/manual/index/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>This is the user manual of Fireball Editor. It introduces Fireball Editor and shows you how to make games with it.</p>
<h2 id="Get_Started">Get Started</h2><ul>
<li><a href="/manual/introduction">What’s Fireball</a></li>
<li><a href="/manual/dashboard">Dashboard</a></li>
<li><a href="/manual/project-structure">Project Structure</a></li>
<li><a href="/manual/editor-overview">Editor Overview</a></li>
</ul>
<h2 id="Scripting">Scripting</h2><ul>
<li><a href="/manual/scripting/javascript-primer">JavaScript Primer</a></li>
<li><a href="/manual/scripting/nodes-in-scene">Nodes In Scene</a></li>
<li><a href="/manual/scripting/attachable-script">Behavior (Attachable Script)</a></li>
<li><a href="/manual/scripting/access-script">Access Script</a></li>
<li><a href="/manual/scripting/mixin-mechanic">Mixin Mechanic</a></li>
<li><a href="/manual/scripting/class">Advanced FireClass</a></li>
<li><a href="/manual/scripting/attributes">Attributes</a></li>
<li><a href="/manual/scripting/module">Module</a></li>
</ul>
<h3 id="Engine_Specific_Scripting_Guide">Engine Specific Scripting Guide</h3><ul>
<li><a href="/manual/scripting/runtimes/cocos2d-js">Cocos2d-js</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>This is the user manual of Fireball Editor. It introduces Fireball Editor and shows you how to make games with it.</p>
<h2 id="Get_Starte]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://docs.fireball-x.com/undefined/"/>
    <id>http://docs.fireball-x.com/undefined/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Cocos2d-js_Examples">Cocos2d-js Examples</h2><ul>
<li><a href="https://github.com/fireball-x/example-cocos2d-js" target="_blank" rel="external">Basic Examples</a> A collection of basic examples showing how basic node types work</li>
<li><a href="https://github.com/fireball-x/game-duang-sheep" target="_blank" rel="external">Duang Sheep</a> a flappy bird clone</li>
<li><a href="https://github.com/nantas/fighter-demo" target="_blank" rel="external">RPG Combat Demo</a> a flashy combat demo with some practical action strategy</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Cocos2d-js_Examples">Cocos2d-js Examples</h2><ul>
<li><a href="https://github.com/fireball-x/example-cocos2d-js" target="_blank" rel]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Extending Editor]]></title>
    <link href="http://docs.fireball-x.com/editor/index/"/>
    <id>http://docs.fireball-x.com/editor/index/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>This section shows you how to extend Fireball Editor by creating and modifying packages, with <a href="https://github.com/fireball-x/editor-framework" target="_blank" rel="external">Editor framework</a> API.</p>
<h2 id="Extending_Editor">Extending Editor</h2><ul>
<li><a href="/editor/define-your-app">Define Your App</a> This is for creating app with editor-framework. You don’t need to read it if you’re using Fireball.</li>
<li><a href="/editor/editor-module">Editor Module</a></li>
<li><a href="/editor/ipc-channel">Ipc Channels Between Core and Page Level</a></li>
<li><a href="/editor/unit-test">Unit Test</a></li>
<li><a href="/editor/css-layout">CSS Layout Helper</a></li>
<li><a href="/editor/event-binding">Event Binding</a></li>
</ul>
<h2 id="Packages">Packages</h2><ul>
<li><a href="/editor/packages/create-package">Create Your Package</a></li>
<li><a href="/editor/packages/create-panels">Create Panels</a></li>
<li><a href="/editor/packages/register-shortcuts">Register Shortcuts</a></li>
<li><a href="/editor/packages/create-widgets">Create Widgets</a></li>
<li><a href="/editor/packages/load-and-build">Load and Build Packages</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>This section shows you how to extend Fireball Editor by creating and modifying packages, with <a href="https://github.com/fireball-x/edit]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Unit Test]]></title>
    <link href="http://docs.fireball-x.com/editor/unit-test/"/>
    <id>http://docs.fireball-x.com/editor/unit-test/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>In Editor Framework, we can make and run unit test easily with our Test Suite.</p>
<h2 id="Package_Test">Package Test</h2><p>Any package can run test for itself using <a href="https://github.com/fireball-packages/Tester" target="_blank" rel="external">Tester</a>. Open the Package Manager, and click <code>Test</code> button of the package you want to run test with. It will run tests you registered in the <code>test</code> filed of your package’s <code>package.json</code>.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8370061/888597ee-1bf5-11e5-8132-b7ca4db4f4b6.png" alt="image"></p>
<p>If the test is a <code>.html</code> file, Tester will run it as a page-level test. If it is a <code>.js</code> file, Tester will run it in the core process as a core-level test.</p>
<pre><code class="js">// your pacakge.json
...
&quot;test&quot;: [
  &quot;test/basic.html&quot;, // &lt;= this will be test in page-level
  &quot;test/basic-asset-db.js&quot;, // &lt;= this will be test in core-level
],
</code></pre>
<p>How to choose process to run your test? If you are developing <strong>Widget</strong>, <strong>Panel</strong>, you should provide <code>.html</code> file and test them in Tester’s page-level environment. You can check following builtin packages for example:</p>
<ul>
<li><a href="https://github.com/fireball-packages/ui-kit" target="_blank" rel="external">ui-kit</a>,</li>
<li><a href="https://github.com/fireball-packages/console" target="_blank" rel="external">console</a></li>
</ul>
<p>If you are developing <strong>Assets</strong>, <strong>Meta</strong>, you should provide <code>.js</code> file and test them in Tester’s core-level environment. Example packages:</p>
<ul>
<li><a href="https://github.com/fireball-packages/canvas-assets" target="_blank" rel="external">canvas-assets</a></li>
</ul>
<h3 id="Write_Page-Level_Test">Write Page-Level Test</h3><p>The page-level test suite provides three environment:</p>
<ul>
<li><a href="https://github.com/fireball-packages/tester/blob/master/env/env-widget.html" target="_blank" rel="external">env-widget.html</a></li>
<li><a href="https://github.com/fireball-packages/tester/blob/master/env/env-panel.html" target="_blank" rel="external">env-panel.html</a></li>
<li><a href="https://github.com/fireball-packages/tester/blob/master/env/env-canvas-studio.html" target="_blank" rel="external">env-canvas-studio.html</a></li>
</ul>
<p>Each test environment import necessary files for your test to run.</p>
<p>For example, if you are writing a panel for editor-framework, you can write your test html like this:</p>
<pre><code class="html">&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;link rel=&quot;import&quot; href=&quot;packages://tester/env/env-panel.html&quot;&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;panel-fixture id=&quot;panel&quot; panel-id=&quot;my.panel&quot;&gt;&lt;/panel-fixture&gt;
        &lt;script src=&quot;basic.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>The <code>basic.js</code> file is a standard <a href="http://mochajs.org/#getting-started" target="_blank" rel="external">mocha</a> test file with <a href="http://chaijs.com/" target="_blank" rel="external">chai</a> assertions. You can use helper functions in your test file depending on your test environment. Go through each environment files to see what helper library they have included.</p>
<p>Check out the builtin package test examples to see what you can do. Such as <a href="https://github.com/fireball-packages/console/tree/master/test" target="_blank" rel="external">console</a>.</p>
<p>If you are working with Fireball, change the <code>env-panel</code> to <code>env-canvas-studio</code> instead, it will load the additional script that Fireball needs before running your test.</p>
<h3 id="Write_Core-Level_Test">Write Core-Level Test</h3><p>You don’t need to worry about test environment for your core-level test in Tester.</p>
<p>When Tester run a <code>.js</code> test file registered in <code>package.json</code>, it will send a ipc message <code>tester:run-test</code> to core-level script (Tester’s <code>main.js</code>). Then it will spawn a child process using Electron as executable, and run the <code>js</code> file with <code>--test path/to/test/file --report-detials</code> arguments. If there are any test result that need to report back from the child process, it will send over ipc message, and the message is handled in one of <a href="https://github.com/fireball-packages/tester/blob/master/main.js#L28-L63" target="_blank" rel="external">ipcHandlers</a> of <code>main.js</code>.</p>
<p>Core-level testing is useful for packages that dealing with Meta and Asset import/export. You can learn more about core-level testing by reading the test method for editor and engine below.</p>
<h2 id="Editor_and_Engine_Test">Editor and Engine Test</h2><p>For Fireball and Editor Framework developer, we have two ways to run unit test.</p>
<h3 id="Test_In_Terminal">Test In Terminal</h3><p>The framework can test itself or its submodules by running these shell commands:</p>
<ul>
<li><code>your-app --test &lt;your/test/file&gt;</code> Running a single test and output test report in terminal or command line tool you use.</li>
<li><code>your-app --test &lt;your/test/file&gt; --report-failures</code> Running a single test and collect its failures to the main-process, useful when doing full test</li>
<li><code>your-app --test &lt;your/test/file&gt; --report-details</code> Running a single test and collect every detail of the test to the main-process, useful when you try to test core-level modules in Tester</li>
</ul>
<p>By default, <code>--test</code> use <code>DefaultReporter</code> and print the result in terminal. But sometimes we need to run tests in the child process and report back to main process. Editor Framework provides two additional <a href="https://github.com/mochajs/mocha/wiki/Third-party-reporters" target="_blank" rel="external">reporters</a> for doing this.</p>
<p>With the <code>--report-failures</code> argument, it will report if there are any failure during the tests, then sending back the data below when test process finished:</p>
<pre><code class="js">{
  channel: &#39;process:end&#39;,
  failures: ${failure count},
  path: ${current test path},
}
</code></pre>
<p>With the <code>--report-details</code> argument it will send every mocha test event and its data back to main process. These test events including: <code>start</code>, <code>end</code>, <code>suite</code>, <code>suite end</code>, <code>test</code>, <code>test end</code>, see <a href="https://github.com/fireball-x/editor-framework/blob/master/core/test-runner.js#L183-L244" target="_blank" rel="external">test-runner</a> for details.</p>
<h3 id="Test_In_Editor">Test In Editor</h3><p>You can also run tests within Editor Framework’s graphical editor UI.</p>
<p>Go to the main menu <code>Developer/Run Tests</code> and Editor Framework will run all the tests and report the result in a panel(not implement yet). This is almost the same as Test in Terminal, except the report is output to a editor panel and you don’t need a terminal for that. (Means user with release version of Fireball or Editor-Framework app can see the test report as well)</p>
<h2 id="Conclusion">Conclusion</h2><p>Let’s put all these test method together to help users better understand the pipeline.</p>
<h4 id="Test_in_Terminal">Test in Terminal</h4><p><code>--test &lt;file&gt;</code> -&gt; <code>core/test-runner.js</code> -&gt; <code>Test.run(file)</code> -&gt; results</p>
<h4 id="Test_in_Editor_Framework">Test in Editor Framework</h4><p>Editor Framework -&gt; Menu <code>Developer/Run Tests</code> -&gt; <code>Test.liveRun()</code> -&gt; <code>Editor.sendToWindow ( details )</code></p>
<h4 id="Test_in_Tester_(Page_Environment)">Test in Tester (Page Environment)</h4><p>Package Manager -&gt; Test Button -&gt; <code>Tester._run</code> -&gt; Tester’s webview load ( your-test-html ) -&gt; <code>sendToHost</code> (send back result to Tester)</p>
<h4 id="Test_in_Tester_(Core_Environment)">Test in Tester (Core Environment)</h4><p>Package Manager -&gt; Test Button -&gt; <code>Tester._run</code> -&gt; <code>Editor.sendToCore( &#39;tester:run-test&#39;, your-test-js )</code> -&gt; <code>child_process --test &lt;your-test-js&gt; --report-details</code> -&gt; listen on the details -&gt; <code>Editor.sendToPanel( &#39;tester.panel&#39;, details )</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In Editor Framework, we can make and run unit test easily with our Test Suite.</p>
<h2 id="Package_Test">Package Test</h2><p>Any package ]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Polymer Primer]]></title>
    <link href="http://docs.fireball-x.com/editor/polymer-primer/"/>
    <id>http://docs.fireball-x.com/editor/polymer-primer/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>Fireball and Editor Framework use <a href="polymer-project.org">Polymer</a> to build the whole editor front end. This doc is for crediting Polymer as the perfect UI system solution for building a complex game editor toolset. Also we’d like to point to some core polymer documentation that will help you get start with developing app with Editor Framework.</p>
<h2 id="Why_Polymer">Why Polymer</h2><p>Fireball is a single cross-platform app with a lot of panels. We evaluated CSS frameworks such as Zurb Foundation and Semantic-UI. But they are all too heavy and not precise enough for a game editing tools. We decided to build our own light weight custom element UI system, to populate panels with UI elements and components.</p>
<p>The UI elements we created is not just for Fireball’s core editor, we’d like our users to be able to reuse Fireball’s custom-elements or even build their own elements to extend the editor UI and create tools to fit their exact needs.</p>
<p>Currently there are several contenders in custom element domain, such as Angular, Ember and React. But they are all too heavy with MV* patterns. Polymer is the only one that keep it light and focus on UI creating.</p>
<p>On another important note, Fireball’s UI panels are designed to be able to extend by users. We need to make sure there are no CSS pollution between core panels and user created panels. Shadow DOM technology used by Polymer is by far the best solution for our need.</p>
<p>Polymer utilizes the power of Custom Element, Shadow DOM and Data Binding without importing irrelevant functions. The design pattern is on the same track as Fireball. Fireball aims to use HTML5 web development technology (Elements, Styles, Data Attributes) to create the core of a powerful but flexible Editor UI system, and Polymer is the wheel we don’t have to reinvent.</p>
<h2 id="Fireball_UI_Library_and_Packages_Built_With_Polymer">Fireball UI Library and Packages Built With Polymer</h2><ul>
<li><a href="https://github.com/fireball-packages/ui-kit" target="_blank" rel="external">UI-kit</a> is the new standard Fireball UI component and widget library. It’s also a builtin package of Editor Framework so any app you create with it can use these elements.</li>
<li><a href="https://github.com/fireball-x/deprecated-editor-ui" target="_blank" rel="external">Editor UI</a> is the old UI library for Fireball 0.4 and previous versions. It’s deprecated but you can still take them if you want.</li>
<li>Besides UI elements (widgets), we create all of our editor panels and tools (Such as scene editor, asset manager and console) as Polymer templates. Most packages from <a href="https://github.com/fireball-packages" target="_blank" rel="external">fireball-packages</a> organization are built with Polymer. Fell free to check them out and learn how to make your own!</li>
</ul>
<h2 id="Get_Started_With_Polymer">Get Started With Polymer</h2><p>Please read the following material to learn enough Polymer for building app with Editor Framework.</p>
<ul>
<li><a href="https://www.polymer-project.org/1.0/docs/start/quick-tour.html" target="_blank" rel="external">Polymer Quick Tour</a> Get familiar with the structure and pattern of Polymer custom elements.</li>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/properties.html" target="_blank" rel="external">Polymer Properties</a></li>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/styling.html" target="_blank" rel="external">Styling Local DOM</a></li>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/events.html" target="_blank" rel="external">Events</a></li>
<li><a href="https://www.polymer-project.org/1.0/docs/devguide/data-binding.html" target="_blank" rel="external">Data Binding</a></li>
</ul>
<p>Feel free to read through polymer documentations to fully understand the technology!</p>
<h2 id="Polymer_Elements">Polymer Elements</h2><p>Polymer has an official elements library called <a href="https://elements.polymer-project.org/" target="_blank" rel="external">Catalog</a>. You can browse through the library, see demo of elements and read their documentation.</p>
<p>If you’d like to use some of them in your app, simply install them with bower. And import the element’s html file into your template.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Fireball and Editor Framework use <a href="polymer-project.org">Polymer</a> to build the whole editor front end. This doc is for creditin]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Register Shortcuts]]></title>
    <link href="http://docs.fireball-x.com/editor/packages/register-shortcuts/"/>
    <id>http://docs.fireball-x.com/editor/packages/register-shortcuts/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>You can define keyboard shortcuts for your panel in <code>package.json</code>. Here is a simple example:</p>
<pre><code class="json">&quot;panel&quot;: {
  &quot;shortcuts&quot;: {
    &quot;command+k&quot;: &quot;clear&quot;,
    &quot;#props&quot;: {
      &quot;command+delete&quot;: &quot;delete&quot;
    },
    &quot;#view&quot;: {
      &quot;command+delete&quot;: &quot;delete&quot;
    }
  }
}
</code></pre>
<p>The shortcut is directly bind to method in your panel frame. Just make sure your have defined the method otherwise the framework will raise a warning.</p>
<p>Editor Framework allows you to register shortcut for a specific element in your panel frame. In this way, you can have a better way to manage your key mappings when focused on different elements.</p>
<p>To achieve this, just add an <code>id</code> in your sub-element, and write the id selector (a.k.a <code>#{your-id}</code>) as a key in the shortcut, and define the key mappings in it.</p>
<p>Learn more about this in <a href="https://github.com/fireball-x/editor-framework/tree/master/demo/shortcuts" target="_blank" rel="external">shortcuts-demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>You can define keyboard shortcuts for your panel in <code>package.json</code>. Here is a simple example:</p>
<pre><code class="json">&quo]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Load and Build Packages]]></title>
    <link href="http://docs.fireball-x.com/editor/packages/load-and-build/"/>
    <id>http://docs.fireball-x.com/editor/packages/load-and-build/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>Packages can be developed in any of the following file format:</p>
<ul>
<li>HTML</li>
<li>JavaScript with ES6 and ES7 features</li>
<li><a href="https://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a></li>
<li><a href="http://lesscss.org/" target="_blank" rel="external">Less</a></li>
<li><a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a></li>
<li><a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a> will be supported, PR is welcome!</li>
<li><a href="http://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a> will be supported, PR is welcome!</li>
</ul>
<p>To make sure package users facing consistent file format, Editor-Framework provides a pipeline to automatically build any of the above file format to vanila ES5 JavaScript and CSS. Here’s how.</p>
<h2 id="Loading_Packages">Loading Packages</h2><p>To load packages into your Editor-Framework app, you need to either:</p>
<ul>
<li>Specify a path to load your packages from by running the method <code>Editor.registerPackagePath</code> in your <code>App.init</code> function. Then put all your packages into that path folder.</li>
<li>By default, Editor-Framework load all packages in <a href="/demo">/demo</a> folder. You can also created your packages here to quickly see it in Package Manager list.</li>
<li>You can also put your packages into <code>~/.{app-name}/packages</code> folder, read <a href="/docs/manual/create-your-package.md#create-your-package">create packages</a> doc for details.</li>
</ul>
<p>To load packages for <a href="https://github.com/fireball-x/fireball" target="_blank" rel="external">Fireball</a>, you can open Package-studio with the following parameter:</p>
<pre><code class="bash"># Open Fireball Package Studio with all packages in editor-framework/demo loaded
gulp package-studio --path editor-framework/demo
</code></pre>
<p>This way you can specify any folder you like to hold all your packages and they will be loaded by Package-studio automatically.</p>
<h2 id="Building_Package">Building Package</h2><p>You can enable building for any loaded package, just add the property <code>&quot;build&quot;: &quot;true&quot;</code> to your package’s <code>package.json</code> file.</p>
<p>If a package has building enabled(<code>&quot;build&quot;:&quot;true&quot;</code>), Editor-framework will build the package and put the compiled file into <code>package-name/bin/dev</code> folder. Then load the package from <code>package-name/bin/dev</code>.  The <code>&quot;build&quot;: &quot;true&quot;</code> property will also be removed from the compiled package’s <code>package.json</code> file, making it ready to ship.</p>
<p>A package will also be rebuild when <code>package-name/bin/dev/package.json</code> has a different version number than <code>package-name/package.json</code>.</p>
<p>If a package has no <code>build</code> property or has it disabled, Editor-framework will load the package as it is from <code>package-name</code> folder. No build or rebuild process will be applied to this package.</p>
<h2 id="File_Change_Watch">File Change Watch</h2><p>When Editor-framework is running, it will watch all loaded packages. If you modified files in your package:</p>
<ul>
<li>File change notification fired by package watcher.</li>
<li>If package has building enabled, rebuild the package.</li>
<li>If building disabled or rebuild success, go through the dirty notify pipeline. If rebuild failed, stop the process.</li>
</ul>
<p>Dirty notification has different pipeline for <code>page-level</code> changes and <code>core-level</code> changes:</p>
<ul>
<li>For <code>page-level</code> changes, for example you changed the html or style in your <code>panel.html</code> file, it will send ipc message to panel indicating panel out-of-date. And your panel’s tab will turn red. You can reload the editor page to remove the ‘out-of-date’ state of page by select <code>Developer/Reload</code> or press Command+R (on Mac) or Control+R (on Windows).<br><img src="https://cloud.githubusercontent.com/assets/344547/8019179/70f804fe-0c73-11e5-8736-8df1a71e34a4.png" alt="red tab"></li>
<li>For <code>core-level</code> changes, for example modification to <code>main.js</code> file, it will unload and reload the package.</li>
</ul>
<h2 id="Manual_Reload_Package">Manual Reload Package</h2><p>With your package loaded in Package Manager, you can also reload your package by clicking ‘Reload’ button in your package item:</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/8019037/beb6e248-0c6c-11e5-868d-9fe40c056155.png" alt="image"></p>
<p>When ‘Reload’ button is clicked, Package Manager will:</p>
<ul>
<li>Check if the package has building enabled. If yes, rebuild it.</li>
<li>If rebuild success, unload the package. If an error raised while compiling, don’t go to next step.</li>
<li>Load the package again.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Packages can be developed in any of the following file format:</p>
<ul>
<li>HTML</li>
<li>JavaScript with ES6 and ES7 features</li>
<li><]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create Package]]></title>
    <link href="http://docs.fireball-x.com/editor/packages/create-package/"/>
    <id>http://docs.fireball-x.com/editor/packages/create-package/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>Editor Framework loads package before App runs. By default it loads packages from <code>editor-framework://builtin/</code> and <code>~/.{app-name}/packages/</code>. If you are working with <a href="https://github.com/fireball-x/fireball" target="_blank" rel="external">Fireball</a>, then it will load packages from <code>fireball/builtin</code> and <code>~/.fireball/packages</code> folder.</p>
<p>You can customize the location it loads package from through the method <code>Editor.registerPackagePath</code> in your <code>App.init</code> function.</p>
<h2 id="Structure">Structure</h2><p>In general, packages should have the following structure:</p>
<pre><code class="plain">MyPackage
  |--(optional)panel
  |   |--mypanel.html
  |   |--(optional)mypanel.js
  |   |--(optional)mypanel.css
  |--(optional)widget
  |     |--mywidget
  |       |--mywidget.html
  |       |--(optional)mywidget.js
  |       |--(optional)mywidget.css
  |--main.js
  |--package.json
</code></pre>
<p>Some key parts explained:</p>
<ul>
<li><code>main.js</code>: main entry file, read the <a href="#main-entry">Main Entry</a> section.</li>
<li><code>package.json</code>: package description file, not used for <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>, read <a href="#package-description">Package Description</a> section.</li>
<li><code>panel</code>: this folder is necessary if your package need to open a panel to work. You can create any number of panel html files or sub-folders in this <code>panel</code> folder, if you need more than one panel for your package.</li>
<li><code>widget</code>: this folder is optional, it contains ‘elements’ you can use in your panels or in panels of other packages. For example buttons, drop-down menu, tabs, etc. You can organize widgets in this folder any way you like. We recommend creating a folder for each of your widget element.</li>
</ul>
<p>For panels and widgets, you can combine script and styles to a single html file. See <a href="/test/fixtures/packages/simple/panel/panel.html">this simple test case</a> as an example. You can also write script and styles in any file format that compiles to JavaScript or CSS, such as <a href="http://coffeescript.org/" target="_blank" rel="external">coffeescript</a>, <a href="https://learnboost.github.io/stylus/" target="_blank" rel="external">stylus</a>, <a href="http://lesscss.org/" target="_blank" rel="external">less</a>, <a href="http://sass-lang.com/" target="_blank" rel="external">sass</a>. Check out <a href="load-and-build-packages.md">Building Packages</a> documentation for details.</p>
<h2 id="Package_Description">Package Description</h2><p>Each package uses a <code>package.json</code> file to describe itself. Just create this file in your package project folder.</p>
<p>For example:</p>
<pre><code class="js">{
  &quot;name&quot;: &quot;demo-simple&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;description&quot;: &quot;Simple Demo&quot;,
  &quot;author&quot;: &quot;Firebox Technology&quot;,
  &quot;main&quot;: &quot;main.js&quot;,
  &quot;menus&quot;: {
    &quot;Examples/Simple&quot;: {
      &quot;message&quot;: &quot;demo-simple:open&quot;
    }
  },
  &quot;panels&quot;: {
    &quot;panel&quot;: {
      &quot;frame&quot;: &quot;panel/panel.html&quot;,
      &quot;type&quot;: &quot;dockable&quot;,
      &quot;title&quot;: &quot;Simple&quot;,
      &quot;width&quot;: 800,
      &quot;height&quot;: 600,
      &quot;messages&quot;: [
      ]
    }
  }
}
</code></pre>
<p>Explanation for each key-value pair:</p>
<ul>
<li><code>name</code> <em>String</em> - Name of the package, this name must be unique, otherwise it can not be published online.</li>
<li><code>version</code> <em>String</em> - The version number that follows <a href="http://semver.org/" target="_blank" rel="external">semver</a> pattern.</li>
<li><code>description</code> <em>String</em> (Optional) - A simple description of what your package does.</li>
<li><code>author</code> <em>String</em> (Optional) - Who created this package.</li>
<li><code>build</code> <em>Boolean</em> (Optional) - If build the package to <code>bin/dev</code></li>
<li><code>hosts</code> <em>Object</em> (Optional) - The version of the hosts required for this package.</li>
<li><code>main</code> <em>String</em> (Optional) - A file path to the main entry javascript. Usually <code>main.js</code>, you can also use other filename and specify it here.</li>
<li><code>menus</code> <em>Object</em> (Optional) - The menu list.<ul>
<li><code>key</code> <em>String</em> - Menu path, example: <code>foo/bar/foobar</code></li>
<li><code>value</code> <em>Object</em> - Menu options<ul>
<li><a href="https://github.com/fireball-x/editor-framework/blob/master/docs/api/core/menu.md" target="_blank" rel="external">Editor Menu Template</a></li>
</ul>
</li>
</ul>
</li>
<li><code>panels</code> <em>Object</em> (Optional) - The panel list.<ul>
<li><code>key</code> <em>String</em> - Panel name, this name will be combined with package name to create an unique panelID (e.g. <code>PackageName.PanelName</code>).</li>
<li><code>value</code> <em>Object</em> - Panel options.<ul>
<li><code>frame</code> <em>String</em> - The panel frame html file. ( It is recommended to define it as a Polymer element ).</li>
<li><code>type</code> <em>String</em> (Optional) - Default is <code>dockable</code>, can be <code>dockable</code>, <code>float</code>, <code>fixed-size</code>, <code>quick</code>.</li>
<li><code>title</code> <em>String</em> (Optional) - The panel title shows in the tab label, default to the panelID.</li>
<li><code>popable</code> <em>Boolean</em> (Optional) - Default is <code>true</code>, indicate if the panel is popable.</li>
<li><code>width</code> <em>Integer</em> (Optional) - The width of the panel frame.</li>
<li><code>height</code> <em>Integer</em> (Optional) - The height of the panel frame.</li>
<li><code>min-width</code> <em>Integer</em> (Optional) - The min-width of the panel frame.</li>
<li><code>min-height</code> <em>Integer</em> (Optional) - The min-height of the panel frame.</li>
<li><code>shortcuts</code> <em>Object</em> (Optional) - The keyboard shortcut for the panel.<ul>
<li><code>key</code> <em>String</em> - define the key combination (example: <code>command+k</code>).</li>
<li><code>value</code> <em>String</em> - The method name defined in the panel frame.</li>
</ul>
</li>
<li><code>messages</code> <em>Array</em> (Optional) - The ipc message name list.</li>
<li><code>profiles</code> <em>Object</em> (Optional) - The list of default profile settings.<ul>
<li><code>key</code> <em>String</em> - The profile type, by default it can be <code>local</code> or <code>global</code>. You can register more profile type through <code>Editor.registerProfilePath</code>.</li>
<li><code>value</code> <em>Object</em> - The default setting values.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>widgets</code> <em>Object</em> (Optional) - The widget list.<ul>
<li><code>key</code> <em>String</em> - Widget name, this name will be used as host name in <code>widgets://{host-name}/</code> protocol.</li>
<li><code>value</code> <em>Object</em> - The widget folder path</li>
</ul>
</li>
<li><code>dependencies</code> <em>Object</em> (Optional) - The dependencies list.</li>
<li><code>npmDependencies??</code> <em>Object</em> (Optional) - The npm dependencies list.</li>
<li><code>bowerDependencies??</code> <em>Object</em> (Optional) - The bower dependencies list.</li>
</ul>
<h2 id="Main_Entry">Main Entry</h2><p>The <code>main.js</code> file (or any file you register as main entry in <code>package.json</code>) serves as main entry of the package program. Main entry usually looks like this:</p>
<pre><code class="js">module.exports = {
    load: function () {
        // callback when package has been loaded
    },

    unload: function () {
        // callback when package has been unloaded
    },

    // a IPC message receiver
    &#39;demo-simple:open&#39;: function () {
        Editor.Panel.open(&#39;demo-simple.panel&#39;);
    },
};
</code></pre>
<h3 id="module-exports">module.exports</h3><p>Fireball run each package’s main entry as a module with <code>require</code>, so you must expose properties and method in your main entry with <code>module.exports</code>. See <a href="https://iojs.org/api/modules.html#modules_module_exports" target="_blank" rel="external">iojs module API docs</a> for details.</p>
<h3 id="IPC_Message_Receiver">IPC Message Receiver</h3><p>In the above example, main entry listen to an IPC message <code>demo-simple:open</code> and call <code>Editor.Panel.open</code> to open a package panel. This is the most common way to open a package panel. To learn more about IPC messages and how package communicate between core and page level, read <a href="ipc-channel.md">IPC Channel docs</a>.</p>
<p>The initial <code>demo-simple:open</code> message is registered in <code>menus[&#39;Examples/Simple&#39;].message</code> property of <code>package.json</code>. See the above <code>package.json</code> example.</p>
<h3 id="Core-Level_Process">Core-Level Process</h3><p>Main entry runs in core-level process, you can do following things in core-level scripts:</p>
<ul>
<li>Use full <a href="https://iojs.org/api/" target="_blank" rel="external">iojs API</a></li>
<li>Use <a href="https://github.com/atom/electron/tree/master/docs#api-references" target="_blank" rel="external">Electron’s API</a> that listed under ‘modules for the main process’ or ‘modules for both processes’</li>
<li>Require any core, local or npm module. For npm modules, you can install those modules in Fireball’s root folder. And require them anywhere in your core-level scripts.</li>
</ul>
<h2 id="Menu_Path">Menu Path</h2><p>Menu paths are defined in <code>menus</code> property of <code>pacakge.json</code>. Menu paths definition should looks like this:</p>
<pre><code class="json">&quot;menus&quot;: {
    &quot;Examples/Simple&quot;: {
        &quot;message&quot;: &quot;demo-simple:open&quot;
    },
    &quot;Examples/Advanced&quot;: {
        &quot;message&quot;: &quot;demo-simple:advance&quot;
    }
}
</code></pre>
<p>A menu path looks like <code>MenuName/ItemName</code>. You can also write <code>MenuName/GroupName/ItemName</code>, results in the following menu:<br><img src="https://cloud.githubusercontent.com/assets/344547/8249697/89da532e-169f-11e5-9f69-d49731ea0ca6.png" alt="image"></p>
<p>When a menu item is clicked, it sends an IPC message from page-level. That’s why we usually make a “package-name:open” IPC message receiver to actually open the package panel.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Editor Framework loads package before App runs. By default it loads packages from <code>editor-framework://builtin/</code> and <code>~/.{]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create Widgets]]></title>
    <link href="http://docs.fireball-x.com/editor/packages/create-widgets/"/>
    <id>http://docs.fireball-x.com/editor/packages/create-widgets/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>Widgets are pluggable custom elements that can be shared by panels. Widgets must be created inside a package. A good example of a widgets library is Fireball’s builtin <a href="https://github.com/fireball-packages/ui-kit" target="_blank" rel="external">ui-kit</a>.</p>
<h2 id="Register_Widget">Register Widget</h2><p>Define a widget in <code>page-level</code>, then save it as <code>simple-widget.html</code> in your package’s <code>widget</code> folder.</p>
<pre><code class="html">&lt;dom-module id=&quot;simple-widget&quot;&gt;
    &lt;style&gt;
        :host {
            color: red;
        }
    &lt;/style&gt;

    &lt;template&gt;
        This is a simple widget
    &lt;/template&gt;
&lt;/dom-module&gt;

&lt;script&gt;
    Editor.registerWidget( &#39;simple-widget&#39;, {
        is: &#39;simple-widget&#39;,
    });
&lt;/script&gt;
</code></pre>
<p>Register the html file in <code>package.json</code>:</p>
<pre><code class="json">{
  &quot;name&quot;: &quot;simple&quot;,
  &quot;widgets&quot;: {
    &quot;simple-widget&quot;: &quot;widget/simple-widget.html&quot;
  }
}
</code></pre>
<h2 id="Reference_Widget">Reference Widget</h2><p>Once you register the package in package.json, you can reference the widget with package name as the route path like this:</p>
<pre><code class="js">`packages://{package-name}/widget`
</code></pre>
<p>For example, suppose you have a <code>panel.html</code> in other packages, you can import the widget above like this:</p>
<pre><code class="html">&lt;link rel=&quot;import&quot; href=&quot;packages://simple/widget/simple-widget.html&quot;&gt;
</code></pre>
<p>Then you can use widget element anywhere in your panel:</p>
<pre><code class="html">&lt;simple-widget&gt;&lt;/simple-widget&gt;
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>Widgets are pluggable custom elements that can be shared by panels. Widgets must be created inside a package. A good example of a widgets]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create Panels]]></title>
    <link href="http://docs.fireball-x.com/editor/packages/create-panels/"/>
    <id>http://docs.fireball-x.com/editor/packages/create-panels/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>Panel is the dockable “mini-windows” unit in Editor Framework. Each panel contains a panel frame.</p>
<p>You can define a polymer element as your panel frame, and register it in <code>package.json</code>. The Editor Framework will dynamically load your polymer element when the panel is opened.</p>
<p>To define a panel frame, just create a html file like this:</p>
<pre><code class="html">&lt;dom-module id=&quot;simple-panel&quot;&gt;
    &lt;style&gt;
        :host {
            display: flex;
            flex-wrap: nowrap;
            align-items: stretch;
            flex-direction: column;
        }
    &lt;/style&gt;

    &lt;template&gt;
        This is a simple panel
    &lt;/template&gt;
&lt;/dom-module&gt;

&lt;script&gt;
    Editor.registerPanel( &#39;simple.panel&#39;, {
        is: &#39;simple-panel&#39;,
    });
&lt;/script&gt;
</code></pre>
<p>Then save it to your package’s <code>panel</code> folder. After that register the html file in <code>package.json</code>:</p>
<pre><code class="json">{
  &quot;name&quot;: &quot;simple&quot;,
  &quot;panels&quot;: {
    &quot;panel&quot;: {
      &quot;frame&quot;: &quot;panel/simple.html&quot;,
      &quot;type&quot;: &quot;dockable&quot;,
      &quot;title&quot;: &quot;Simple&quot;,
      &quot;width&quot;: 800,
      &quot;height&quot;: 600
    }
  }
}
</code></pre>
<p>Once your package is loaded, you can use <code>Editor.Panel.open(&#39;simple.panel&#39;)</code> to open your panel.</p>
<h2 id="Panel_ID">Panel ID</h2><p>A panelID is a string equals to <code>{package-name}.{panel-name}</code>. It is used in most of the functions in <code>Editor.Panel</code> that needs to operate on a specific panel.</p>
<p>Suppose we have the following <code>package.json</code> file:</p>
<pre><code class="json">{
  &quot;name&quot;: &quot;foo&quot;,
  &quot;panels&quot;: {
    &quot;bar&quot;: {
      &quot;frame&quot;: &quot;panel/simple.html&quot;
    },
    &quot;bar02&quot;: {
      &quot;frame&quot;: &quot;panel/simple.html&quot;
    }
  }
}
</code></pre>
<p>The file registers two panels <code>bar</code> and <code>bar02</code>, so that we will have two panelID which are <code>foo.bar</code> and <code>foo.bar02</code>.</p>
<h2 id="Messages">Messages</h2><p>TODO:</p>
<h2 id="Shortcuts">Shortcuts</h2><p>TODO:</p>
<h2 id="Profiles">Profiles</h2><p>TODO:</p>
<h2 id="Message:_‘panel:open_(argv)’">Message: ‘panel:open (argv)’</h2><p>Invoked when panel opens or panel shows up. The <code>argv</code> is an <code>Object</code> that you send through <code>Editor.Panel.open</code>.</p>
<p>Example:</p>
<pre><code class="javascript">Editor.Panel.open( &#39;your.panel.id&#39;, {
    cwd: &#39;~/editor-framework/&#39;,
    file: &#39;foo/bar/foobar.js&#39;,
});
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>Panel is the dockable “mini-windows” unit in Editor Framework. Each panel contains a panel frame.</p>
<p>You can define a polymer element]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ipc Channel Between Core and Page Process]]></title>
    <link href="http://docs.fireball-x.com/editor/ipc-channel/"/>
    <id>http://docs.fireball-x.com/editor/ipc-channel/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Core_and_Page_Process">Core and Page Process</h2><p>Editor framework (and Fireball) has two levels of processes:</p>
<ul>
<li>Core-level process: In charge of creating window and web pages, access to file system, run any task that iojs (or nodejs) are capable of.</li>
<li>Page-level process: Render HTML web page and run client-side JavaScript. Each web page is rendered in a separated page-level process so they will not pollute each other’s DOM.</li>
</ul>
<p>To better understand these two type of processes, read <a href="https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md#introduction" target="_blank" rel="external">Electron’s introduction document</a>, core-level process is Electron’s main process, page-level process is Electron’s renderer process. If you’re still confused, think of core-level process as server JavaScript, and page-level process as client JavaScript, in a web development context.</p>
<p>To allow communication between core and page processes. We enhanced <a href="https://github.com/atom/electron/blob/master/docs/api/ipc-renderer.md" target="_blank" rel="external">Electron’s ipc API</a> (ipc stands for Inter-process communication). Fireball and Editor Framework user will have much cleaner and easier API to build ipc communication channel between core and page level processes.</p>
<h2 id="Ipc_Channel_Identifier">Ipc Channel Identifier</h2><p>An Ipc channel is a string to identify the message between processes. The message sender send the message with a specific channel identifier. And message handler in other process can specify which channel to “listen to”.</p>
<p>We recommend the following pattern for an Ipc channel identifier:</p>
<pre><code class="json">&#39;package-name-or-scope:channel-name&#39;
</code></pre>
<p>Basically you can use any string as channel identifier, but we strongly recommend you connect package name and descriptive channel name with a colon to make a channel identifier. Let’s see it in action:</p>
<pre><code class="json">&#39;editor:reset-layout&#39;
</code></pre>
<p>Editor framework use this channel to send message for reseting editor layout. <code>editor</code> is the scope, <code>reset-layout</code> describe what the channel is for.</p>
<pre><code class="json">&#39;demo-simple:open&#39;
</code></pre>
<p><code>demo-simple</code> is the name of an example package, you can see the code <a href="https://github.com/fireball-packages/package-examples/tree/master/simple" target="_blank" rel="external">here.</a> <code>open</code> is the action taken for message handler, usually this channel is for open a package panel, so we can use <code>sendToPanel</code> method like this:</p>
<pre><code class="js">// first argument is panelID, second is channel id
Editor.sendToPanel(&#39;demo-simple.panel&#39;, &#39;demo-simple:open&#39;);
</code></pre>
<p>To understand panelID, read <a href="register-panels.md#panel-id">panelID part in register panel docs</a>.</p>
<p>Let’s see message sending methods:</p>
<h2 id="Core_Level">Core Level</h2><p>In core-level script, you can use the following method to send messages:</p>
<ul>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToWindows" target="_blank" rel="external">Editor.sendToWindows</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToMainWindow" target="_blank" rel="external">Editor.sendToMainWindow</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToAll" target="_blank" rel="external">Editor.sendToAll</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToCore" target="_blank" rel="external">Editor.sendToCore</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToPanel" target="_blank" rel="external">Editor.sendToPanel</a></li>
<li><a href="http://docs.fireball-x.com/api/classes/Window.html#method_sendToPage" target="_blank" rel="external">windowInstance.sendToPage</a> you can use <code>Editor.Window.find</code> to get window instance</li>
<li><a href="http://docs.fireball-x.com/api/classes/Window.html#method_sendRequestToPage" target="_blank" rel="external">windowInstance.sendRequestToPage</a> see also windowInstance.cancelRequestToPage</li>
<li><a href="http://docs.fireball-x.com/api/classes/Window.html#method_cancelRequestToPage" target="_blank" rel="external">Editor.cancelRequestToPage</a></li>
</ul>
<h2 id="Page_Level">Page Level</h2><p>In page-level script, you can use the following method to send messages:</p>
<ul>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToWindows" target="_blank" rel="external">Editor.sendToWindows</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToMainWindow" target="_blank" rel="external">Editor.sendToMainWindow</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToCore" target="_blank" rel="external">Editor.sendToCore</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToCoreSync" target="_blank" rel="external">Editor.sendToCoreSync</a> will get return value directly</li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToPanel" target="_blank" rel="external">Editor.sendToPanel</a></li>
<li><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendRequestToCore" target="_blank" rel="external">Editor.sendRequestToCore</a></li>
</ul>
<p>See also <a href="http://docs.fireball-x.com/api/modules/Editor.html#method_cancelRequestToCore" target="_blank" rel="external">Editor.cancelRequestToCore</a> for cancel request.</p>
<h2 id="Message_Handlers">Message Handlers</h2><h3 id="On_Core_Level">On Core Level</h3><p>Register a message handler in core-level script is easy, just add a property with the name of Ipc channel id to your core-level module:</p>
<pre><code class="js">module.exports = {
    // ...

    &#39;demo-simple:open&#39;: function () {
        // do your job in core level, such as open a panel
        Editor.Panel.open(&#39;demo-simple.panel&#39;);
    }
};
</code></pre>
<h3 id="On_Page_Level">On Page Level</h3><p>Register the Ipc channel id you want to listen to in <code>panels.panel.messages</code> property of <code>package.json</code>:</p>
<pre><code class="json">&quot;panels&quot;: {
  &quot;panel&quot;: {
    &quot;messages&quot;: [
        &quot;demo-simple:run&quot;
    ]
  }
}
</code></pre>
<p>Please notice <code>panel</code> is the name for panelID, you can register your panel with any name you like, see <a href="packages/create-panels.md">Create Panels</a>.</p>
<p>Once Ipc channel id registered, you can add a property in your <code>Editor.registerPanel</code> object:</p>
<pre><code class="js">Editor.registerPanel( &#39;demo-simple.panel&#39;, {
    is: &#39;demo-simple&#39;,
    // ...
    // to receive IPC message on page-level, you need to register message in package.json
    &quot;demo-simple:run&quot; : function () {
        // run some tasks on page-level
    }
});
</code></pre>
<h2 id="Message_With_Arguments">Message With Arguments</h2><p>You can pass any number of parameters you like with a message:</p>
<pre><code class="js">// on core-level
Editor.sendToPanel(&#39;demo-simple.panel&#39;, &#39;demo-simple:log&#39;, someText);

// on page-level
Editor.registerPanel( &#39;demo-simple.panel&#39;, {
    // log the text passed to editor console
    &quot;demo-simple:log&quot; : function (text) {
        Editor.log(text);
    }
}
</code></pre>
<h3 id="Pass_Event_Object_As_Argument">Pass Event Object As Argument</h3><p>When you use <a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToAll" target="_blank" rel="external">Editor.sendToAll</a> and <a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToCore" target="_blank" rel="external">Editor.sendToCore</a>, you can add <a href="http://docs.fireball-x.com/api/modules/Editor.html#property_requireIpcEvent" target="_blank" rel="external">Editor.requireIpcEvent</a> as the last argument.</p>
<p>For example:</p>
<p><code>Editor.sendToCore(&#39;foo:bar&#39;, &#39;say hello&#39;, Editor.requireIpcEvent )</code></p>
<p>When you respond to the message in core level, the first parameter will be event object instead of ‘say hello’, for more details about event object read <a href="https://github.com/atom/electron/blob/master/docs/api/ipc-main-process.md#class-event" target="_blank" rel="external">class:event</a> of Electron docs.</p>
<p>The message handler looks like this:</p>
<pre><code class="js">    &#39;foo:bar&#39;:function ( event, text ) {
      // the event is the ipc-event object
      // the text is &#39;say hello&#39;
    }
</code></pre>
<p>This is very useful if you want to known who send you this Ipc message by looking at <code>event.sender</code>.</p>
<p>For example if we want to know from which editor window the message is sent, we can do it like this:</p>
<pre><code class="js">// in the message handler above:

// get browserWindow (or we call nativeWin) which is part of electron
var win = BrowserWindow.fromWebContents( event.sender );

// get our Editor.Window instance
var editorWin = Editor.Window.find(win);
</code></pre>
<h2 id="Broadcast_Message">Broadcast Message</h2><p><a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToWindows" target="_blank" rel="external">Editor.sendToWindows</a> and <a href="http://docs.fireball-x.com/api/modules/Editor.html#method_sendToAll" target="_blank" rel="external">Editor.sendToAll</a> can be used to broadcast message. To prevent sending message to self, you can add <a href="http://docs.fireball-x.com/api/modules/Editor.html#property_selfExcluded" target="_blank" rel="external">Editor.selfExcluded</a> as the last argument. For example:</p>
<p><code>Editor.sendToAll( &#39;foo:bar&#39;, Editor.selfExcluded )</code> will not send Ipc message to the script itself.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Core_and_Page_Process">Core and Page Process</h2><p>Editor framework (and Fireball) has two levels of processes:</p>
<ul>
<li>Core-l]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cocos2d-js scripting in Fireball]]></title>
    <link href="http://docs.fireball-x.com/manual/scripting/runtimes/cocos2d-js/"/>
    <id>http://docs.fireball-x.com/manual/scripting/runtimes/cocos2d-js/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="manual" scheme="http://docs.fireball-x.com//manual/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Editor Module]]></title>
    <link href="http://docs.fireball-x.com/editor/editor-module/"/>
    <id>http://docs.fireball-x.com/editor/editor-module/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p><code>Editor</code> is a module contains app-wide core editor functionality. You can access properties or methods of Editor module anytime, anywhere in your editor framework app (including Fireball).</p>
<p>This module can be categorized into the following parts:</p>
<h2 id="Paths">Paths</h2><p>Editor module provides following properties to give user access to common paths:</p>
<ul>
<li><code>Editor.appPath</code>: The current app.js working directory path.</li>
<li><code>Editor.mainEntry</code>: Your main entry file. Usually it is <code>{your-app}/app.js</code>.</li>
<li><code>Editor.frameworkPath</code>: The editor framework module path. Usually it is <code>{your-app}/editor-framework/</code></li>
<li><code>Editor.appHome</code>: Your application’s home path. Usually it is <code>~/.{your-app-name}</code></li>
</ul>
<h2 id="Protocols">Protocols</h2><p>Due to the complicated situation of current working directory between core-level and page-level processes. We created the following custom protocols to give user easy access to key location inside editor-framework app and Fireball:</p>
<ul>
<li><code>editor-framework://</code>: Map to the editor framework module path.</li>
<li><code>app://</code>: Map to the root path of your app.</li>
<li><code>packages://{package-name}</code>: Map to the <code>{package-name}</code> path.</li>
<li><code>packages://{package-name}/widget</code>: Map to a widget path.</li>
</ul>
<p>If you know exactly how to reference a resource in your script, you can use absolute path or relative path as well.</p>
<p>Url with custom protocols can be used directly in HTML and CSS import. In page-level or core-level JavaScript, you should write:</p>
<pre><code class="js">var myFilePath = Editor.url(&#39;app://myfolder/myfile.js&#39;);
</code></pre>
<p><code>Editor.url</code> method will convert your url to absolute path of the file system of your OS.</p>
<h2 id="Options">Options</h2><ul>
<li><code>Editor.isDev</code>: Indicate if the application running with <code>--dev</code> option.</li>
<li><code>Editor.showDevtools</code>: Indicate if the application running with <code>--show-devtools</code>.</li>
</ul>
<h2 id="Editor-App">Editor.App</h2><p>The Editor.App is your app.js module. Read more in <a href="../../manual/define-your-app.md">Define your application</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>Editor</code> is a module contains app-wide core editor functionality. You can access properties or methods of Editor module anytim]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Define Your App]]></title>
    <link href="http://docs.fireball-x.com/editor/define-your-app/"/>
    <id>http://docs.fireball-x.com/editor/define-your-app/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>To run your app with editor-framework, you should download and put <code>editor-framework</code> into your app folder. You also need to create a <code>package.json</code> file in your app’s root folder, and set its main to your app.js.</p>
<p>Your project structure should look like this:</p>
<pre><code>your-app-path/
├── editor-framework/
├── package.json
└── app.js
</code></pre><p>The <code>package.json</code> should look like this:</p>
<pre><code class="json">{
  &quot;name&quot;: &quot;your app name&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;description&quot;: &quot;A simple app based on editor-framework.&quot;,
  &quot;dependencies&quot;: {},
  &quot;main&quot;: &quot;app.js&quot; //&lt;== Important!!! Must have.
}
</code></pre>
<h2 id="app-js">app.js</h2><p>Here is an example:</p>
<pre><code class="javascript">// you MUST assigned to global.__app
global.__app = {
    initCommander: function ( commander ) {
        // optional
    },

    init: function ( options ) {
        // must have, important
    },

    run: function () {
        // must have, important

        // create main window
        var mainWin = new Editor.Window(&#39;main&#39;, {
            &#39;title&#39;: &#39;Editor Framework&#39;,
            &#39;min-width&#39;: 800,
            &#39;min-height&#39;: 600,
            &#39;show&#39;: false,
            &#39;resizable&#39;: true,
        });
        Editor.mainWindow = mainWin;

        // restore window size and position
        mainWin.restorePositionAndSize();

        // load and show main window
        mainWin.show();

        // page-level test case
        mainWin.load( &#39;app://app.html&#39; );

        // open dev tools if needed
        if ( Editor.showDevtools ) {
            mainWin.openDevTools();
        }
        mainWin.focus();
    },

    load: function () {
        // optional
    },

    unload: function () {
        // optional
    },

    // An ipc message start with `app:` will be automatically registerred
    &#39;app:foobar&#39;: function () {
        Editor.log(&#39;foobar&#39;);
    },
};

// must have, important
require(&#39;./editor-framework/init&#39;);
</code></pre>
<p>An example project can be checked out here: <a href="https://github.com/fireball-x/editor-framework-app" target="_blank" rel="external">https://github.com/fireball-x/editor-framework-app</a></p>
<h2 id="Class_Method:_initCommander(commander)">Class Method: initCommander(commander)</h2><ul>
<li><code>commander</code> An instance of <a href="https://github.com/tj/commander.js" target="_blank" rel="external">commander.js</a></li>
</ul>
<p>Invoked at the very beginning of the app, before Editor module initialization. No method in <code>Editor</code> module can be used in this function.</p>
<h2 id="Class_Method:_init(options)">Class Method: init(options)</h2><ul>
<li><code>options</code> The options parsed from <code>process.argv</code></li>
</ul>
<p>Invoked after <code>Editor</code> and its sub modules initialization. It is recommended to put following register work in this function:</p>
<ul>
<li>register your protocol</li>
<li>register your profile path</li>
<li>register your package path</li>
<li>define your main menu</li>
</ul>
<h2 id="Class_Method:_run()">Class Method: run()</h2><p>Invoked after finish loading all packages. Basically you should open your main window in this function.</p>
<h2 id="Define_ipc_messages_in_your_App">Define ipc messages in your App</h2><p>You can define ipc messages in your app script. Just add a function that use <code>app:</code> as prefix, the editor-framework will detect and load it before your app run.</p>
<p>Example:</p>
<pre><code class="javascript">global.__app = {
    // An ipc message start with `app:` will be automatically registerred
    &#39;app:foobar&#39;: function () {
        Editor.log(&#39;foobar&#39;);
    },
};
</code></pre>
<h2 id="Reload_your_App">Reload your App</h2><p>You can reload your App by calling <code>Editor.App.reload()</code>. This is useful if you have any changes in your app code, especially when you add or remove ipc messages.</p>
<p>The Editor Framework also add a menu item <code>Developer/Reload Editor.App</code> to help you with this task.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>To run your app with editor-framework, you should download and put <code>editor-framework</code> into your app folder. You also need to c]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Layout Helper]]></title>
    <link href="http://docs.fireball-x.com/editor/css-layout/"/>
    <id>http://docs.fireball-x.com/editor/css-layout/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>When creating new editor window or package panel, we recommend using flexbox to layout your web page.</p>
<p>Editor Framework already has polymer’s <a href="https://github.com/PolymerElements/iron-flex-layout" target="_blank" rel="external">iron-flex-layout</a> installed, with the CSS classes and properties it provides, we can easily create any layouts you want that conform to CSS3 standard.</p>
<h2 id="Flexbox_Basics">Flexbox Basics</h2><p>To learn everything you need to know about flexbox, read through the following one page guide:</p>
<ul>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">CSS-Tricks: A Guide to Flexbox</a></li>
</ul>
<h2 id="Iron-Flex-Layout">Iron-Flex-Layout</h2><p>With the help of <a href="https://github.com/PolymerElements/iron-flex-layout" target="_blank" rel="external">iron-flex-layout</a>, you don’t have to write combination of flexbox related css properties one by one. It provides two ways of adding flexbox properties to your page element:</p>
<h3 id="Custom-style_Mixin_Layout">Custom-style Mixin Layout</h3><p>This method use css mixin to add properties to your existing css selectors.</p>
<p>First checkout <a href="https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout.html" target="_blank" rel="external">iron-flex-layout Custom-style</a>.</p>
<p>You can see it includes almost every possible flexbox layout and item setup. To apply these settings to your own css:</p>
<pre><code class="html">&lt;div id=&quot;view&quot;&gt;
  &lt;div id=&quot;nav-bar&quot; /&gt;
  &lt;div id=&quot;scene&quot; /&gt;
  &lt;div id=&quot;status-bar&quot; /&gt;
&lt;/div&gt;

&lt;style&gt;
  #view {
    @apply(--layout-fit);
    @apply(--layout-vertical);
  }
  #nav-bar {
    @apply(--layout-horizontal);
  }
  #status-bar {
    @apply(--layout-horizontal);
  }
  #scene {
    @apply(--layout-flex-1);
  }
&lt;/style&gt;
</code></pre>
<p>To learn more about how mixin works in Editor Framework, check out polymer docs <a href="https://www.polymer-project.org/1.0/docs/devguide/styling.html#custom-css-mixins" target="_blank" rel="external">Custom CSS Mixins</a>.</p>
<h3 id="Class_Layout">Class Layout</h3><p>By adding CSS classes defined in <a href="https://github.com/PolymerElements/iron-flex-layout/blob/master/classes/iron-flex-layout.html" target="_blank" rel="external">iron-flex-layout Classes</a> to your element, they will be equipped with flexbox properties.</p>
<p>The same example above will now looks like:</p>
<pre><code class="html">&lt;div id=&quot;view&quot; class=&quot;layout vertical fit&quot;&gt;
  &lt;div id=&quot;nav-bar&quot; class=&quot;layout horizontal&quot; /&gt;
  &lt;div id=&quot;scene&quot; class=&quot;flex-1&quot; /&gt;
  &lt;div id=&quot;status-bar&quot; class=&quot;layout horizontal&quot; /&gt;
&lt;/div&gt;
</code></pre>
<h3 id="When_to_Use_What">When to Use What</h3><p>In general you can use any of both layout methods as you like. But there are some basic principle:</p>
<ul>
<li>If you are dynamically adding items/elements to your DOM, and want to apply layout to the element, it is recommended to use class layout, cause custom-style layout do not have effect on dynamic added elements, which explained here (<a href="https://www.polymer-project.org/1.0/docs/devguide/styling.html#style-api" target="_blank" rel="external">https://www.polymer-project.org/1.0/docs/devguide/styling.html#style-api</a>).</li>
<li>If you want to use iron-flex-layout for host item, the only way to do this is use custom style:<pre><code class="css">  :host {
    @apply(--layout-fit)
  }
</code></pre>
</li>
</ul>
<h2 id="Import_Iron-Flex-Layout">Import Iron-Flex-Layout</h2><p>By default, Editor Framework install <code>iron-flex-layout</code> at <code>bower_components/iron-flex-layout</code>.</p>
<p>You can import both or either of layout methods in your web page html:</p>
<pre><code class="html">&lt;!-- Custom-style Layout --&gt;
&lt;link rel=&quot;import&quot; href=&quot;app://bower_components/iron-flex-layout/iron-flex-layout.html&quot;&gt;
&lt;!-- Class Layout --&gt;
&lt;link rel=&quot;import&quot; href=&quot;app://bower_components/iron-flex-layout/classes/iron-flex-layout.html&quot;&gt;
</code></pre>
<p>You can also import Editor Framework’s <a href="https://github.com/fireball-x/editor-framework/blob/master/page/ui/lite.html" target="_blank" rel="external">lite.html</a> environment with standard editor page dependencies.</p>
<h2 id="CSS_Layout_Tricks">CSS Layout Tricks</h2><p>Here we gathered CSS layout tricks that’s helpful when developing web page with Editor Framework:</p>
<ul>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">A Guide to Flexbox</a></li>
<li><a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="external">Centering in CSS: A Complete Guide</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>When creating new editor window or package panel, we recommend using flexbox to layout your web page.</p>
<p>Editor Framework already has]]>
    </summary>
    
      <category term="editor" scheme="http://docs.fireball-x.com//editor/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://docs.fireball-x.com/undefined/"/>
    <id>http://docs.fireball-x.com/undefined/</id>
    <published>2015-09-01T10:01:47.000Z</published>
    <updated>2015-09-01T10:01:47.000Z</updated>
    <content type="html"><![CDATA[<p>This section shows you how to extend Fireball Editor by creating and modifying packages, with <a href="https://github.com/fireball-x/editor-framework" target="_blank" rel="external">Editor framework</a> API.</p>
<h2 id="Editor">Editor</h2><ul>
<li><a href="editor/define-your-app.md">Define Your App</a> This is for creating app with editor-framework. You don’t need to read it if you’re using Fireball.</li>
<li><a href="editor/editor-module.md">Editor Module</a></li>
<li><a href="editor/ipc-channel.md">Ipc Channels Between Core and Page Level</a></li>
<li><a href="editor/unit-test.md">Unit Test</a></li>
<li><a href="editor/css-layout.md">CSS Layout Helper</a></li>
<li><a href="editor/event-binding.md">Event Binding</a></li>
</ul>
<h2 id="Packages">Packages</h2><ul>
<li><a href="editor/packages/create-your-package.md">Create Your Package</a></li>
<li><a href="editor/packages/create-panels.md">Create Panels</a></li>
<li><a href="editor/packages/register-shortcuts.md">Register Shortcuts</a></li>
<li><a href="editor/packages/create-widgets.md">Create Widgets</a></li>
<li><a href="editor/packages/load-and-build-packages.md">Load and Build Packages</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>This section shows you how to extend Fireball Editor by creating and modifying packages, with <a href="https://github.com/fireball-x/edit]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Module]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/module/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/module/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>It is allowed to seperate code into several script files, and inter-reference among them. To make it happen, you’ll need to understand how to define and use modules in Fireball. This is often referred as  <strong>Modulization</strong></p>
<blockquote>
<p>In this chapter, the terms of ‘module’ and ‘script’ are usually of the same meaning. All <strong>Note</strong> contents are advanced skills, and are not required to be understood for beginners.</p>
</blockquote>
<h2 id="Overview">Overview</h2><p>If you are still not sure what modulization is for, consider it as:</p>
<ul>
<li><code>include</code> in C/C++</li>
<li><code>using</code> in C#</li>
<li><code>import</code> in Java &amp; Python</li>
<li><code>link</code> in HTML</li>
</ul>
<p>Modulization allows you to refer other scripts in Fireball. For instance, you can:</p>
<ul>
<li>Access public variables in other scripts</li>
<li>Call public methods in other scripts</li>
<li>Use public types in other scripts</li>
<li>Utilize or inherit public components in other scripts</li>
</ul>
<p>Fireball JavaScript implements modulization almost in the same way as node.js:</p>
<ul>
<li>A single script is a module</li>
<li>Each module has its own scope (i.e. local variables declared with <code>var</code> cannot be accessed in other modules)</li>
<li>Refer other modules <strong>synchronously</strong> by <code>require</code> method.</li>
<li>Export variables by setting <code>module.exports</code></li>
</ul>
<p>All user code will be compiled by Fireball into native JavaScript, which can be executed in mobile browsers, no matter how the modules are defined.</p>
<h2 id="Module_Reference">Module Reference</h2><h3 id="require"><code>require</code></h3><p>All modules defined by user, i.e. not Fireball built-in modules, need <code>require</code> to access. Assuming we’re trying to access a component named <code>Rotate</code> defined in another script:</p>
<pre><code class="js">var Rotate = require(&#39;rotate&#39;);
</code></pre>
<p>The return value of <code>require</code> is an object exported by module, and is usually saved in a variable for futher use. The string passed into <code>require</code> is the <strong>file name</strong> of the module. The file name has no path or suffix, and is case sensitive.</p>
<h3 id="A_Complete_Example_of_require">A Complete Example of <code>require</code></h3><p>Next we can create an inherited class from <code>Rotate</code>. Create a new script named <code>sinRotate.js</code>:</p>
<pre><code class="js">var Rotate = require(&#39;rotate&#39;);

var SinRotate = Fire.Class({
    extends: Rotate,
    update: function () {
        this.transform.rotation += this.speed * Math.sin(Fire.Time.time);
    }
});
</code></pre>
<p>We define a new component named <code>SinRotate</code>, which extends from <code>Rotate</code> and override the <code>update</code> method. The new component is available to other scripts as well, as long as there is a <code>require(&#39;sinRotate&#39;)</code>.</p>
<p><strong>Note</strong></p>
<ul>
<li><code>require</code> can be called anywhere, at any moment.</li>
<li>A script doesn’t execute until it’s required in the project for the first time, which means <code>require</code> always returns the same instance no matter how many times called.</li>
<li>When debugging, you can <code>require</code> any project module in the Developer Tools.</li>
</ul>
<h2 id="定义模块"><a name="define"></a>定义模块</h2><h3 id="定义Component">定义Component</h3><p>其实每一个单独的脚本文件就是一个模块，例如新建一个脚本 <code>rotate.js</code>，在里面定义一个 Component：</p>
<pre><code class="js">var Rotate = Fire.Class({
    extends: Fire.Component,
    properties: {
        speed: 1
    },
    update: function () {
        this.transform.rotation += this.speed;
    }
});
</code></pre>
<p>当你在脚本中定义了一个 Component，Fireball 会自动将它设置为导出模块，其它脚本直接 require 这个模块就能使用这个 Component。</p>
<h3 id="定义普通JavaScript模块">定义普通JavaScript模块</h3><p>模块里不单单能定义 Component，实际上你可以定义任意 JavaScript 对象。假设有个脚本 <code>config.js</code></p>
<pre><code class="js">var config = {
    moveSpeed: 10,
    version: &#39;0.15&#39;,
    showTutorial: true,

    load: function () {
        // ...
    }
};
config.load();
</code></pre>
<p>现在如果我们要在其它脚本中访问 config 对象：</p>
<pre><code class="js">// player.js
var config = require(&#39;config&#39;);
Fire.log(&#39;speed is&#39;, config.moveSpeed);
</code></pre>
<p>结果会有报错：<code>TypeError: Cannot read property &#39;moveSpeed&#39; of null</code>，这是因为 config 没有设置为导出对象。我们还需要在 <code>config.js</code> 的最后把 <strong>module.exports</strong> 设置成 config：</p>
<pre><code class="js">module.exports = config;
</code></pre>
<p>这样做的原因是只要有其它脚本 require 它，获得的实际上就是这里的 module.exports 对象。</p>
<blockquote>
<p>那为什么定义 Component 时可以不用设置 exports ？<br>  因为 Component 是 Fireball 中的特殊类型，如果一个脚本定义了 Component 却没有声明 exports，Fireball 会自动将它设置为对应的 Component。</p>
</blockquote>
<p>完整代码如下：</p>
<pre><code class="js">// config.js
var config = {
    moveSpeed: 10,
    version: &#39;0.15&#39;,
    showTutorial: true,

    load: function () {
        // ...
    }
};
config.load();

module.exports = config;
</code></pre>
<pre><code class="js">// player.js
var config = require(&#39;config&#39;);
Fire.log(&#39;speed is&#39;, config.moveSpeed);
</code></pre>
<p>这样便能正确输出：<code>speed is 10</code>。</p>
<h2 id="更多示例">更多示例</h2><h3 id="导出变量">导出变量</h3><ul>
<li><p>module.exports 默认就是 {}，可以直接往里面增加新的字段。</p>
<pre><code class="js">  // foobar.js:
  module.exports.foo = function () {
      Fire.log(&quot;foo&quot;);
  };
  module.exports.bar = function () {
      Fire.log(&quot;bar&quot;);
  };
  // test.js:
  var foobar = require(&quot;foobar&quot;);
  foobar.foo();    // &quot;foo&quot;
  foobar.bar();    // &quot;bar&quot;
</code></pre>
</li>
<li><p>module.exports 导出的对象的值可以是任意 JavaScript 类型。</p>
<pre><code class="js">  // foobar.js:
  module.exports = {
      FOO: function () {
          this.type = &quot;foo&quot;;
      },
      bar: &quot;bar&quot;
  };
  // test.js:
  var foobar = require(&quot;foobar&quot;);
  var foo = new foobar.FOO();
  Fire.log(foo.type);      // &quot;foo&quot;
  Fire.log(foobar.bar);    // &quot;bar&quot;
</code></pre>
</li>
</ul>
<h3 id="封装私有变量">封装私有变量</h3><p>每个脚本都是一个单独的作用域，在脚本内使用 <strong>var</strong> 定义的局部变量，将无法被模块外部访问。我们可以这样来封装模块内的私有变量：</p>
<pre><code class="js">// foobar.js:
var dirty = false;
module.exports = {
    setDirty: function () {
        dirty = true;
    },
    isDirty: function () {
        return dirty;
    },
};

// test1.js:
var foo = require(&quot;foobar&quot;);
Fire.log(typeof foo.dirty);        // &quot;undefined&quot;
foo.setDirty();

// test2.js:
var foo = require(&quot;foobar&quot;);
Fire.log(foo.isDirty());           // true
</code></pre>
<p><strong>警告：定义变量前一定要在前面加上 var</strong>，否则将会变成全局变量！在 Fireball 中禁止使用全局变量。</p>
<pre><code class="js">// foobar.js:
dirty = false;        // 这是错的，dirty 会变成全局变量！前面应该加上 var ！
module.exports = {
    setDirty: function () {
        dirty = true;
    },
};
</code></pre>
<h2 id="循环引用">循环引用</h2><p>(TODO)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It is allowed to seperate code into several script files, and inter-reference among them. To make it happen, you’ll need to understand ho]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Add Audio]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step7/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step7/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Add BGM</li>
<li>Add sfx (sound effect) for sheep jump</li>
<li>Add sheep hit pipe and game over sfx</li>
</ul>
<h2 id="Steps">Steps</h2><h3 id="Create_AudioSource">Create AudioSource</h3><p>Create an entity named <code>Audios</code> in <code>Hierarchy</code>. This entity will hold all audios we are gonna play in game.</p>
<p>Select all audio assets in <code>musics</code> folder in <code>Assets</code> view, drag them onto <code>Audios</code> entity in <code>Hierarchy</code> view. Each audio assets will generate a child entity with <code>AudioSource</code> component. <code>AudioSource</code> is Fireball’s audio play component, you can specify which audio asset to play by drag audio asset to its <code>Clip</code> property. We don’t have to do this since we created entities by dragging assets to <code>Hierarchy</code> view, all <code>Clip</code> properties will be set automatically.</p>
<p><strong>Audios Setup</strong></p>
<p> <img src="https://cloud.githubusercontent.com/assets/7564028/6865382/268578a0-d4a8-11e4-9490-d550232862ca.png" alt="000"></p>
<h3 id="Set_Auto_Play_and_Loop_BGM">Set Auto Play and Loop BGM</h3><p>We would like to play background music as game starts and loop forever. Select <code>Audios/gameBg</code> from <code>Hierarchy</code> view, check <code>Loop</code> and <code>Play on Load</code> property checkbox in <code>Fire.AudioSource</code> component.</p>
<p><strong>gameBg Setup</strong></p>
<p> <img src="https://cloud.githubusercontent.com/assets/7564028/6865439/bf79ae1e-d4a8-11e4-98ff-d7d6e2f9d7c5.png" alt="001"></p>
<h3 id="Add_Jump_SFX">Add Jump SFX</h3><p>Open <code>Sheep</code> script for editing. Add a <code>jumpAuido</code> property and use <code>play()</code> function to play it in jump event handler</p>
<p><strong>Sheep.js: <code>.....</code> are parts stay unchanged</strong></p>
<pre><code class="js">// sheep state
var State = Fire.defineEnum({.....});

var Sheep = Fire.Class({
    extends: Fire.Component,
    constructor: function () {.....},
    properties: {
        .....
        // reference to AudioSource that play jump sfx
        jumpAudio: {
            default: null,
            type: Fire.AudioSource
        }
    },
    // initialization
    onLoad: function () {.....},
    // sheep destroy
    onDestroy: function () {.....},
    // update
    update: function () {.....},
    // state update
    _updateState: function () {.....},
    // position update
    _updateTransform: function () {.....},
    // action to take when jump event fires
    _jump: function () {
        .....

        // play jump sfx from AudioSource
        this.jumpAudio.stop();
        this.jumpAudio.play();
    }
});

Sheep.State = State;
</code></pre>
<p>Once finish editing, drag <code>Audios/jump</code> entity onto <code>Sheep</code> component’s newly added <code>Jump Audio</code> property.</p>
<h3 id="Add_Other_SFX">Add Other SFX</h3><p>Edit <code>GameManager</code> script by adding the following properties:</p>
<ul>
<li><code>gameBgAudio</code>: background music</li>
<li><code>dieAudio</code>: sheep hit pipe sound</li>
<li><code>gameOverAudio</code>: game over music</li>
<li><code>scoreAudio</code> score sound</li>
</ul>
<p><strong>GameManager.js: <code>.....</code> are parts stay unchanged</strong></p>
<pre><code class="js">var Sheep = require(&#39;Sheep&#39;);
var ScrollPicture = require(&#39;ScrollPicture&#39;);
var PipeGroupManager = require(&#39;PipeGroupManager&#39;);

var GameState = Fire.defineEnum({.....});

var GameManager = Fire.Class({
    extends: Fire.Component,
    constructor: function () {.....},
    properties: {
        .....
        // reference to background music AudioSource
        gameBgAudio: {
            default: null,
            type: Fire.AudioSource
        },
        // reference to sheep hit pipe AudioSource
        dieAudio: {
            default: null,
            type: Fire.AudioSource
        },
        // reference to game over AudioSource
        gameOverAudio: {
            default: null,
            type: Fire.AudioSource
        },
        // reference to score AudioSource
        scoreAudio: {
            default: null,
            type: Fire.AudioSource
        }
    },
    start: function () {..... },
    update: function () {
        switch (this.gameState) {
            case GameState.Run:
                .....
                if (gameOver) {
                    // stop background music and play hit sfx and game over sfx
                    this.gameBgAudio.stop();
                    this.dieAudio.play();
                    this.gameOverAudio.play();

                    .....
                }
                .....
                break;
            default :
                break;
        }
    },
    updateSorce: function () {
        .....
        if (nextPipeGroup) {
           .....
            if (crossed) {
              .....
                // play get score sfx
                this.scoreAudio.play();
            }
        }
    }
});
</code></pre>
<p>Once finish editing on <code>GameManager.js</code>, drag <code>gameBg</code>, <code>die</code>, <code>gameOver</code>, <code>score</code> entities under <code>Audios</code> onto <code>GameManager</code> component’s <code>Game Bg Audio</code>、<code>Die Audio</code>、<code>Game Over Audio</code>、<code>Score Audio</code> properties in the exact order.</p>
<p><img src="https://cloud.githubusercontent.com/assets/344547/7317355/a2ef24fc-eab2-11e4-90ee-7210900905f5.png" alt="audios"></p>
<h2 id="Conclusion">Conclusion</h2><p>Click play button, and here’s your first game made with Fireball! Although it’s rather simple, you can add more details and gameplay onto it.</p>
<p>Here’s a version we created with more details: <a href="https://github.com/fireball-x/game-duang-sheep" target="_blank" rel="external">https://github.com/fireball-x/game-duang-sheep</a></p>
<p>Next you can keep learning from Fireball User manual in <a href="http://docs.fireball-x.com" target="_blank" rel="external">Fireball Learning Center</a>. We will be adding more examples and tutorial one by one, stay tuned!</p>
<p>If you have questions regarding tutorial or other documentations, don’t hesitate to send us feedback via any of the following channel:</p>
<ul>
<li><a href="https://fireball.slack.com" target="_blank" rel="external">Slack Community</a>, get invited from <a href="https://fireball-slack.herokuapp.com" target="_blank" rel="external">here</a></li>
<li><a href="https://github.com/fireball-x/fireball/issues" target="_blank" rel="external">Github Issue</a></li>
<li>Support Email：support@fireball-x.com</li>
</ul>
<hr>
<p><strong>NOTE:</strong> <a href="https://github.com/fireball-x/tutorial/commits/step-7" target="_blank" rel="external"> Step - 7 Project Snapshot for Adding Audios</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Add BGM</li>
<li>Add sfx (sound effect) for sheep jump</li>
<li>Add sheep hit pipe and game over sfx</li>
</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Game Loop]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step5/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step5/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Adding collision detect between sheep and pipes</li>
<li>When sheep hit a pipe, pop up a game over menu</li>
<li>Click the restart button in game over menu to restart game</li>
</ul>
<h2 id="Steps">Steps</h2><h3 id="Add_Collision_Detection_for_Pipes">Add Collision Detection for Pipes</h3><p>Open<code>PipeGroupManager</code> script for editing. Add a function called <code>collisionDetection</code>. Also add a property <code>pipeGroupList</code> to manage all existing <code>PipeGroup</code> entities.</p>
<p>Add the following code to <code>PipeGroupManager</code> script:</p>
<p><strong>PipeGroupManager.js: <code>.....</code> are the parts stay unchanged.</strong></p>
<pre><code class="js">var PipeGroupManager = Fire.Class({
  extends: Fire.Component,
  constructor: function () {
     .....
  },
  // Properties
  properties: {
      .....
      // a list to manage all existing pipes
      pipeGroupList: {
         get: function () {
             return this.entity.getChildren();
         },
         hideInInspector: true
        }
    },

    .....

    // create pipe group entity
    createPipeGroupEntity: function () {
        var pipeGroup = Fire.instantiate(this.srcPipeGroup);
        pipeGroup.parent = this.entity;
        pipeGroup.transform.position = this.initPipeGroupPos;
        pipeGroup.active = true;
    },
    // collision detection iterating each pipe group in the list
    collisionDetection: function (sheepRect) {
        for (var i = 0; i &lt; this.pipeGroupList.length; ++i) {
            // top pipe
            var pipeGroupEntity = this.pipeGroupList[i];
            var pipe = pipeGroupEntity.find(&#39;topPipe&#39;);
            var pipeRender = pipe.getComponent(Fire.SpriteRenderer)
            var pipeRect = pipeRender.getWorldBounds();

            if (Fire.Intersection.rectRect(sheepRect, pipeRect)) {
                return true;
            }

            // bottom pipe
            pipe = pipeGroupEntity.find(&#39;bottomPipe&#39;);
            pipeRender = pipe.getComponent(Fire.SpriteRenderer);
            pipeRect = pipeRender.getWorldBounds();

            if (Fire.Intersection.rectRect(sheepRect, pipeRect)) {
                return true;
            }
        }
        return false;
    },
  .....
});
</code></pre>
<h3 id="Add_Collision_Detection_for_Sheep">Add Collision Detection for Sheep</h3><p>Now let’s update<code>Sheep</code> script. We will add a <code>renderer</code> variable to fetch sheep’s collider information.</p>
<p>We will update <code>Sheep</code> script like this:</p>
<p><strong>Sheep.js: <code>.....</code> are parts stay unchanged</strong></p>
<pre><code class="js">// sheep states
var State = Fire.defineEnum({...});

var Sheep = Fire.Class({
    extends: Fire.Component,
    constructor: function () {
        .....
        // this variable will store the reference for sheep&#39;s SpriteRenderer
        this.renderer = null;
        .....
    },
    // properties
    properties: {....},
    // initialization
    onLoad: function () {
        .....
        // sheep&#39;s Sprite Renderer will be used as collider
        this.renderer = this.getComponent(Fire.SpriteRenderer);
        .....
      },
    .....
});

Sheep.State = State;
</code></pre>
<h3 id="Create_Game_Over_Menu">Create Game Over Menu</h3><p>We will mock up a very simple menu using assets in <code>sprite/ui</code> folder.</p>
<p>First create a <code>GameOver</code> entity in <code>Hierarchy</code> view. Then drag the following image assets from <code>sprite/ui</code> folder in <code>Assets</code> onto <code>GameOver</code>, to create its children automatically:</p>
<ul>
<li><code>gameoverbg</code></li>
<li><code>text_game_over</code></li>
<li><code>button_play</code></li>
</ul>
<p>We will use their names as they are. The complete menu should look like this:</p>
<p><strong>GameOver Setup</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6864748/8a9e57ec-d4a0-11e4-970a-21bcb3b182c1.png" alt="000"></p>
<p>Select <code>GameOver</code> entity, find the show/hide checkbox at top left of <code>Inspector</code> view:<img src="https://cloud.githubusercontent.com/assets/7564028/6864833/80d6e0ca-d4a1-11e4-88e3-05d0de382a9e.png" alt="001"></p>
<p>Uncheck it to hide <code>GameOver</code> entity in <code>Game</code> view.</p>
<h3 id="GameOver_Restart_Button">GameOver Restart Button</h3><p>Create a <code>GameOverMenu</code> script. It will add click event for restart button(<code>button_play</code> entity). Once clicked game will be restarted.</p>
<p><strong>GameOverMenu.js</strong></p>
<pre><code class="js">var GameOverMenu = Fire.Class({
  extends: Fire.Component,
  constructor: function () {
      // restart game event
      this.resetGameEvent;
  },
  // properties
  properties: {
      // reference to restart button
      btn_play: {
          default: null,
          type: Fire.Entity
      }
  },
  // restart game by reloading scene
  resetGameEvent: function () {
      Fire.Engine.loadScene(&#39;Game&#39;);
  },
  // when game starts, do button event registering
  start: function () {
      //  register click event for restart button
      this.btn_play.on(&#39;mousedown&#39;, this.resetGameEvent);
  },
  // menu destroyed
  onDestroy: function () {
      // unregister click event
      this.btn_play.off(&#39;mousedown&#39;, this.resetGameEvent);
  }
});
</code></pre>
<p>Drag <code>GameOverMenu</code> script onto <code>GameOver</code> entity in <code>Hierarchy</code> view. Then drag  <code>GameOver/button_play</code> entity onto <code>GameOverMenu</code> component’s <code>Btn Play</code> property.</p>
<h3 id="Finish_the_Game_Loop">Finish the Game Loop</h3><p>Now we are all set with collisions and menus. Let’s create a script named <code>GameManager</code> and connect all the assets and script to finish the game loop.</p>
<p><strong>GameManager.js</strong></p>
<pre><code class="js">var Sheep = require(&#39;Sheep&#39;);
var ScrollPicture = require(&#39;ScrollPicture&#39;);
var PipeGroupManager = require(&#39;PipeGroupManager&#39;);

var GameState = Fire.defineEnum({
   Run : -1,
   Over: -1
});

var GameManager = Fire.Class({
   extends: Fire.Component,
   constructor: function () {
       // current game state
       this.gameState = GameState.Run
   },
   // property
   properties: {
       // Sheep component reference
       sheep: {
           default: null,
           type: Sheep
       },
       // background reference
       background: {
           default: null,
           type: ScrollPicture
       },
       // ground reference
       ground: {
           default: null,
           type: ScrollPicture
       },
       // PipeGroupManager component reference
       pipeGroupMgr: {
           default: null,
           type: PipeGroupManager
       },
       // GameOverMenu component reference
       gameOverMenu: {
           default: null,
           type: Fire.Entity
       }
   },
   // when game starts, set state to Run
   start: function () {
       this.gameState = GameState.Run;
   },
   // update game state
   update: function () {
       switch (this.gameState) {
           case GameState.Run:
               // Get bounding box from sheep&#39;s renderer, for collision detection
               var sheepRect = this.sheep.renderer.getWorldBounds();
               var gameOver = this.pipeGroupMgr.collisionDetection(sheepRect);
               // If collisionDetection returns true, we know sheep hits pipe
               if (gameOver) {
                   // set new state for game and sheep, use enabled property to switch off scrolling of backgrounds
                   this.gameState = GameState.Over;
                   this.sheep.state = Sheep.State.Dead;
                   this.ground.enabled = false;
                   this.background.enabled = false;
                   for (var i = 0; i &lt; this.pipeGroupMgr.pipeGroupList.length; ++i) {
                       var pipeGroup = this.pipeGroupMgr.pipeGroupList[i].getComponent(&#39;PipeGroup&#39;);
                       pipeGroup.enabled = false;
                   }
                   this.pipeGroupMgr.enabled = false;
                   // turn on the active property of GameOverMenu to show it
                   this.gameOverMenu.active = true;
               }
               break;
           default :
               break;
       }
   }
});
</code></pre>
<p><strong>Final Setup</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6864920/df1f73da-d4a2-11e4-9c02-e12597cfa1dc.png" alt="002"></p>
<hr>
<p><strong>NOTE:</strong> <a href="https://github.com/fireball-x/tutorial/commits/step-5" target="_blank" rel="external"> Step - 5 Project Snapshot for Complete Game Loop</a><br>                                                                            </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Adding collision detect between sheep and pipes</li>
<li>When sheep hit a pipe, pop up a game over menu</li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Create Sheep]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step4/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step4/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Use<code>SpriteAnimation</code> component to add animations to sheep</li>
<li>Click or touch input to make sheep jump</li>
<li>Sheep state control</li>
</ul>
<h2 id="Steps">Steps</h2><h3 id="Create_Sheep_Animation_Clips">Create Sheep Animation Clips</h3><p>Create <code>assets/animations</code> folder in <code>Asset</code> view. Right click <code>animations</code> folder and choose <code>Create/New Sprite Animation</code> to create a new sprite animation clip. We will create 5 clips with the following names:</p>
<ul>
<li><code>Run</code>: sheep run animation</li>
<li><code>Jump</code>: sheep jump animation</li>
<li><code>Drop</code>: sheep falling animation</li>
<li><code>DropEnd</code>: sheep hit ground animation</li>
<li><code>Dead</code>: sheep hit pipe animation</li>
</ul>
<p>然后点击每一个动画剪辑来设置动画帧，动画剪辑资源有以下属性：</p>
<ul>
<li><p>Wrap Mode —— How animation repeats</p>
<ul>
<li>Default      Reads the default repeat mode on parent</li>
<li>One          When time reaches the end of the animation clip, the clip will automatically stop playing and time will be reset to beginning of the clip.</li>
<li>Loop         Once finished, start play from beginning</li>
<li>PingPong     Back and forth play</li>
<li>ClampForever Plays back the animation. When it reaches the end, it will keep playing the last frame and never stop playing.</li>
</ul>
</li>
<li><p>Stop Action —— Action to take when animation finished playing the last frame</p>
<ul>
<li>DoNothing     Do nothing and shows the last frame</li>
<li>DefaultSprite Switch to show default sprite</li>
<li>Hide          Hide entity</li>
<li>Destroy       Destroy entity</li>
</ul>
</li>
<li>Speed —- Animation play speed, 1 is normal speed</li>
<li>Frame Rate — Frame rate at which keyframes are sampled.</li>
<li>Frame Infos — Each animation frame’s sprite image and duration<ul>
<li>FrameInfo<ul>
<li>Sprite  Which image to show at this set of frames</li>
<li>Frames  How many frames this image lasts</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>We will first set a <code>size</code> value for <code>Frame Infos</code> property. This should match each animation’s image count. Then find each image in <code>sprites/sheep</code> folder in <code>Assets</code> view, and drag it to a <code>FrameInfo</code> in the list in correct order.</p>
<p>(This workflow will be improved in the future.)</p>
<p><strong>Run Animation Setup in Inspector</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844693/3462f6e8-d3e8-11e4-81d7-a30afbc005a1.png" alt="001"></p>
<p><strong>Jump Animation Setup in Inspector</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844691/34523650-d3e8-11e4-8d4f-3e37312fe855.png" alt="002"></p>
<p><strong>Drop Animation Setup in Inspector</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844690/3452255c-d3e8-11e4-9571-d9a09066df3b.png" alt="003"></p>
<p><strong>DropEnd Animation Setup in Inspector</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844689/34520c3e-d3e8-11e4-9d7a-5d71d11d5ebe.png" alt="004"></p>
<p><strong>Dead Animation Setup in Inspector</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844692/34543bda-d3e8-11e4-9e0e-cffae3484836.png" alt="005"></p>
<h3 id="Create_SpriteAnimation_Component">Create SpriteAnimation Component</h3><p>Create an entity named <code>Sheep</code> in <code>Hierarchy</code> view. Select the entity and click the <code>+</code> button on the top right of <code>Inspector</code> view. Add a <code>SpriteRenderer</code> component and a <code>SpriteAnimation</code> component to <code>Sheep</code> entity.</p>
<p>Drag the image asset <code>sprites/sheep/sheep_run_03</code> from <code>Assets</code> view onto <code>SpriteRenderer</code> component’s <code>Sprite</code> property, as the default sprite of sheep.</p>
<p>Make sure<code>Sheep</code> entity is selected, set <code>SpriteAnimation</code> component’s <code>Animations/size</code> to <code>5</code>. And drag the animation clips we just created to each slot in the list. The order does not matter.</p>
<p><strong>SpriteRender and SpriteAnimation Setup</strong></p>
<p> <img src="https://cloud.githubusercontent.com/assets/7564028/6845001/eb17a59e-d3ea-11e4-9b8c-05bdf19542b9.png" alt="005"></p>
<h3 id="Sheep_Control_Script">Sheep Control Script</h3><p>Create a script named <code>Sheep</code>, at the same place as other scripts. It will do the following tasks：</p>
<ul>
<li>Listen to player input and control sheep’s action</li>
<li>Calculate sheep’s position each frame during a movement</li>
<li>Play sprite animation on sheep and control states</li>
</ul>
<p>Add the following code to the script we just created, and drag the script to <code>Sheep</code> entity in <code>Hierarchy</code> view.</p>
<p><strong>Sheep.js</strong></p>
<pre><code class="js">// Sheep state enum
var State = Fire.defineEnum({
    None   : -1,
    Run    : -1,
    Jump   : -1,
    Drop   : -1,
    DropEnd: -1,
    Dead   : -1
});

var Sheep = Fire.Class({
    extends: Fire.Component,
    constructor: function () {
        // current playing animation
        this.anim = null;
        // sheep speed
        this.currentSpeed = 0;
        // jump event
        this.jumpEvent = null;
    },
    // Properties
    properties: {
        // max Y position sheep can reach
        maxY: 250,
        // ground Y position sheep will land on
        groundY: -170,
        // gravity acceleration
        gravity: 9.8,
        // jump speed
        initSpeed: 500,
        // sheep state
        _state: {
            default: State.Run,
            type: State,
            hideInInspector: true
        },
        state: {
            get: function () {
                return this._state;
            },
            set: function(value){
                if (value !== this._state) {
                    this._state = value;
                    if (this._state !== State.None) {
                        var animName = State[this._state];
                        this.anim.play(animName);
                    }
                }
            },
            type: State
        }
    },
    // initialization
    onLoad: function () {
        this.anim = this.getComponent(Fire.SpriteAnimation);

        // If a jump event fires, let sheep jump
        this.jumpEvent = function (event) {
            if (this.state !== State.Dead) {
                this._jump();
            }
        }.bind(this);
        Fire.Input.on(&#39;mousedown&#39;, this.jumpEvent);
    },
    // when sheep is destroyed
    onDestroy: function () {
        // unregister mousedown event
        Fire.Input.off(&#39;mousedown&#39;, this.jumpEvent);
    },
    // Updates
    update: function () {
        this._updateState();
        this._updateTransform();
    },
    // Update sheep state each frame
    _updateState: function () {
        switch (this.state) {
            case Sheep.State.Jump:
                if (this.currentSpeed &lt; 0) {
                    this.state = State.Drop;
                }
                break;
            case Sheep.State.Drop:
                if (this.transform.y &lt;= this.groundY) {
                    this.transform.y = this.groundY;
                    this.state = State.DropEnd;
                }
                break;
            case Sheep.State.DropEnd:
                if (!this.anim.isPlaying(&#39;dropEnd&#39;)) {
                    this.state = State.Run;
                }
                break
            default:
                break;
        }
    },
    // Update sheep position according to movement
    _updateTransform: function () {
        var flying = this.state === Sheep.State.Jump || this.transform.y &gt; this.groundY;
        if (flying) {
            this.currentSpeed -= (Fire.Time.deltaTime * 100) * this.gravity;
            this.transform.y += Fire.Time.deltaTime * this.currentSpeed;
        }
    },
    // switch to jump state when receive jump event
    _jump: function () {
        this.state = State.Jump;
        this.currentSpeed = this.initSpeed;
    }
});

Sheep.State = State;
</code></pre>
<h3 id="Run_Your_Game!">Run Your Game!</h3><p>Click play button, and check your work so far in <code>Game</code> view.</p>
<p><strong>Final Setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6864237/7847f050-d499-11e4-8385-650907a360e3.png" alt="006"></p>
<hr>
<p><strong>NOTE:</strong> <a href="https://github.com/fireball-x/tutorial/commits/step-4" target="_blank" rel="external"> Step - 4 Project Snapshot for Creating Sheep</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Use<code>SpriteAnimation</code> component to add animations to sheep</li>
<li>Click or touch input to make s]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Create Pipes]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step3/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step3/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Create a pipe template in <code>Game</code> scene, so that we can dynamically create pipes in runtime.</li>
</ul>
<hr>
<h2 id="Steps">Steps</h2><h3 id="Create_Pipe_Template">Create Pipe Template</h3><p>Create two entities named <code>Template</code> and <code>PipeGroup</code> in <code>Hierarchy</code> view. Drag <code>PipeGroup</code> onto <code>Template</code>, make it a child.</p>
<p>Find <code>sprites/background/pipe</code> image asset in <code>Asset</code> view. Drag it onto <code>Template/PipeGroup</code> in <code>Hierarchy</code> view. Expand <code>PipeGroup</code>, you’ll find a new child entity <code>pipe</code>.</p>
<p>Right click <code>pipe</code> entity, and duplicate a new entity. Name the two as <code>topPipe</code> and <code>bottomPipe</code>. Set up their <code>Transform</code> component as the following picture shows:</p>
<p><strong>Template setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6843785/03c63d12-d3e1-11e4-88b8-789dd2f0ae3f.png" alt="000"></p>
<p><strong>PipeGroup setup:</strong> (NOTE: We put PipeGroup out of screen since it’s only a template.)</p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6843962/af1fed88-d3e2-11e4-9c73-3212640a011b.png" alt="001"></p>
<p><strong>topPipe setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6843963/b2d67b4a-d3e2-11e4-95a4-2b8b1e217bf8.png" alt="002"></p>
<p><strong>bottomPipe setup:</strong> (NOTE: Set Scale to negative value will flip the sprite)</p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6843964/b54cb254-d3e2-11e4-80ad-99f900f52c36.png" alt="003"></p>
<p><strong>Final Setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6843936/59b380f8-d3e2-11e4-9d73-0c3f654a6efd.png" alt="004"></p>
<h3 id="Pipe_Scripting">Pipe Scripting</h3><p>In <code>assets/script</code> folder, create a new script file named <code>PipeGroup</code>. We will use this script to control the initialization of pipe position, the distance between top and bottom pipes, the scrolling of pipes and destroy pipe when it’s out of screen.</p>
<p>Add the following code to the script file, and drag it to <code>PipeGroup</code> entity in <code>Hierarchy</code> view.</p>
<p><strong>PipeGroup</strong></p>
<pre><code class="js">var PipeGroup = Fire.Class({
  // Inherit
  extends: Fire.Component,
  // constructor with a width member
  constructor: function () {
    // pipe width
    this.width = 0;
},
// Properties
properties: {
    // scroll speed
    speed: 200,
    // destroy pipe when reach this position
    minX: -900,
    // top pipe y position range
    topPosRange: {
        default: new Fire.Vec2(100, 160)
    },
    // top and bottom pipe distance range
    spacingRange: {
      default: new Fire.Vec2(210, 230)
    }
},
// Initialization
onEnable: function () {
    //randomly set a y position for top pipe
    var topYpos = Math.randomRange(this.topPosRange.x, this.topPosRange.y);
    //randomly set distance between top and bottom pipe
    var randomSpacing = Math.randomRange(this.spacingRange.x, this.spacingRange.y);
    var bottomYpos = topYpos - randomSpacing;

    //set pipe positions
    var topEntity = this.entity.find(&#39;topPipe&#39;);
    topEntity.transform.y = topYpos;

    var bottomEntity = this.entity.find(&#39;bottomPipe&#39;);
    bottomEntity.transform.y = bottomYpos;

    //set width
    var bottomPipeRenderer = bottomEntity.getComponent(Fire.SpriteRenderer);
    this.width = bottomPipeRenderer.sprite.width;
},
// update
update: function () {
    this.transform.x -= Fire.Time.deltaTime * this.speed;
    //destroy pipes when it reaches out of screen position
    if (this.transform.x &lt; this.minX) {
        this.entity.destroy();
    }
}
});
</code></pre>
<p><strong>PipeGroup setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844160/7ad5aa5c-d3e4-11e4-8208-c88ed5ca337a.png" alt="005"></p>
<h3 id="Pipe_Manager">Pipe Manager</h3><p>Let’s create another script in <code>assets/script</code> folder named <code>PipeGroupManager</code>, to control the generation of <code>PipeGroup</code> in runtime.</p>
<p>Add the following code to the new script. Create an entity named <code>PipeGroupManager</code> and drag the script onto it.</p>
<p><strong>PipeGroupManager:</strong></p>
<pre><code class="js">var PipeGroupManager = Fire.Class({
    extends: Fire.Component,
    constructor: function () {
    // Last PipeGroup created time
    this.lastTime = 0;
  },
  // Properties
  properties: {
      // reference to PipeGroup template
      srcPipeGroup: {
          default: null,
          type: Fire.Entity
      },
      // PipeGroup initial position
      initPipeGroupPos: {
          default: new Fire.Vec2(600, 0)
      },
      // interval to next PipeGroup spawn
      spawnInterval: 3
  },
  // Initialization
  onLoad: function () {
      this.lastTime = Fire.Time.time + 10;
  },
  // Instantiate PipeGroup
  createPipeGroupEntity: function () {
      var pipeGroup = Fire.instantiate(this.srcPipeGroup);
      pipeGroup.parent = this.entity;
      pipeGroup.transform.position = this.initPipeGroupPos;
      pipeGroup.active = true;
  },
  // Updates
  update: function () {
      // Spawn PipeGroup in a certain interval
      var idleTime = Math.abs(Fire.Time.time - this.lastTime);
      if (idleTime &gt;= this.spawnInterval) {
          this.lastTime = Fire.Time.time;
          this.createPipeGroupEntity();
      }
  }
});
</code></pre>
<p>Learn how to access entity and component by reading <a href="/manual/scripting/component/access/#access-other-component">Access Other Component in Inspector </a>. Drag <code>PipeGroup</code> entity to <code>Src Pipe Group</code> property of <code>PipeGroupManager</code> component. Now we the property <code>srcPipeGroup</code> has the reference to our Pipe template.</p>
<p><strong>PipeGroupManager setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844364/0ef1b4a0-d3e6-11e4-93e6-58d060b9a6b5.png" alt="006"></p>
<h3 id="Run_Your_Game!">Run Your Game!</h3><p>Click play button, and check your work so far in <code>Game</code> view.</p>
<p><strong>Final Setup:</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6844397/4fac07f2-d3e6-11e4-85bf-5b66604a3204.png" alt="007"></p>
<hr>
<p><strong>NOTE:</strong> <a href="https://github.com/fireball-x/tutorial/commits/step-3" target="_blank" rel="external"> Step - 3 Project Snapshot for Creating Pipes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Create a pipe template in <code>Game</code> scene, so that we can dynamically create pipes in runtime.</li>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Create Background]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step2/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step2/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Create scrolling sky and ground background in <code>Game</code> scene.</li>
</ul>
<hr>
<h2 id="Steps">Steps</h2><h3 id="Create_Sky">Create Sky</h3><p>Right click in <code>Hierarchy</code> view and choose <code>Create Empty</code> from context menu. Right click the <code>New Entity</code> object, choose <code>Rename</code> and name it to <code>Background</code>.</p>
<p>With the same entity selected, find <code>Fire.Transform</code> component in <code>Inspector</code> view and set <code>Position</code> to (0, 0).</p>
<p><strong>Background Transform:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6842952/d0a8d9ba-d3d8-11e4-979f-3f842f95f987.png" alt="000"></p>
<p>In <code>Assets</code> view, find <code>bg</code> image in <code>sprites/background</code> folder. Drag it to <code>Background</code> entity in <code>Hierarchy</code> view. You’ll find a new entity <code>bg</code> created under <code>Background</code>, with a <code>Fire.SpriteRender</code> Component.</p>
<p>Next let’s duplicate <code>bg</code> entity by right click it and choose <code>Duplicate</code>. Rename the two entities to <code>bg_1</code> and <code>bg_2</code>, set their <code>Position</code> property in <code>Inspector</code> view to <code>(0, 0)</code> and <code>(900,0)</code>.</p>
<p><strong>bg_1 setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843004/5b8c7334-d3d9-11e4-93c8-c32f8d4d8322.png" alt="001"></p>
<p><strong>bg_2 setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843007/65eadbc2-d3d9-11e4-85ab-ed773b7d0fbd.png" alt="002"></p>
<h3 id="Create_Ground">Create Ground</h3><p>Create a new entity <code>Ground</code> the same way. Drag image asset <code>sprites/background/ground</code> from <code>Assets</code> view to <code>Ground</code> entity. Duplicate <code>ground</code> entity and rename both to <code>ground_1</code> and <code>ground_2</code>, set their positions to <code>(0, -15)</code> and <code>(864, -15)</code>.</p>
<p><strong>Ground setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843009/68a489a8-d3d9-11e4-9f35-2d9df96ac0bc.png" alt="003"></p>
<p><strong>ground_1 setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843014/7d8be7d0-d3d9-11e4-98e0-323303486f3d.png" alt="004"></p>
<p><strong>ground_2 setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843016/7ffe8900-d3d9-11e4-96a7-8dab6d3ca6e3.png" alt="005"></p>
<h3 id="Create_Scrolling_Script">Create Scrolling Script</h3><p>Learn how to create a component by reading <a href="http://docs.fireball-x.com/zh/scripting/component/" target="_blank" rel="external"><strong>Component Overview</strong></a> and <a href="http://docs.fireball-x.com/zh/scripting/class/" target="_blank" rel="external"><strong>Define a Class</strong></a>. In <code>Assets</code> view, create a script file named <code>ScrollPicture</code> in <code>script</code> folder.</p>
<p>This script will make all background entities moving from right to left according to the sheep’s speed. Once a background entity moves out of sight on the left, we will reposition it to the far right and keep scrolling infinitely.</p>
<pre><code class="js">var ScrollPicture = Fire.Class({

  // Custom components must inherit from Fire.Component
  extends: Fire.Component,

  // Properties
  // The values is not relevant here, we will set proper values in Inspector
  properties: {
      // scrolling speed
      speed: 0,
      // reset position when moving past this distance
      offsetX: 0
  },

  // update background entity position
  update: function () {
      this.transform.x -= Fire.Time.deltaTime * this.speed;
      if (this.transform.x &lt; -this.offsetX) {
        this.transform.x += this.offsetX;
      }
  }
});
</code></pre>
<p>Once you put the above code into the script file, save and drag the script to <code>Background</code> and <code>Ground</code> entities. This will create <code>ScrollPicture</code> components on those entities.</p>
<p><strong>BackGround Setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843018/835bc748-d3d9-11e4-849e-3aee381b85bc.png" alt="006"></p>
<p><strong>Ground Setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843079/309b75f2-d3da-11e4-89b5-7fd2e93c3fb8.png" alt="007"></p>
<h3 id="Run_Your_Game!">Run Your Game!</h3><p>Now you can click the <code>Play</code> button <img src="https://cloud.githubusercontent.com/assets/7564028/6843101/7917f008-d3da-11e4-8577-6e68a10c36c5.png" alt="008"> at the top center of the editor to run the game and see the background scrolling already.</p>
<p><strong>Final Setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6843104/7ad32c78-d3da-11e4-98ac-a769575ea9a5.png" alt="009"></p>
<hr>
<p><strong>NOTE:</strong> <a href="https://github.com/fireball-x/tutorial/commits/step-2" target="_blank" rel="external"> Step - 2 Project Snapshot for Creating Background</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Create scrolling sky and ground background in <code>Game</code> scene.</li>
</ul>
<hr>
<h2 id="Steps">Steps<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Prepare]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step1/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step1/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Tutorial:_Duang-Sheep">Tutorial: Duang-Sheep</h2><p>Let’s learn how to use Fireball Editor by building a simple but fun game.<br>It’s a flappy bird clone, but the hero is now a sheep who can jump! Player touches or clicks screen to let sheep jump and avoid pipes,<br>jump over a pipe grants one point. Try to get the highest score among your friends!</p>
<h2 id="Download_Base_Project:">Download Base Project:</h2><blockquote>
<p>Base Project Download: <a href="https://github.com/fireball-x/tutorial/archive/base-project.zip" target="_blank" rel="external">https://github.com/fireball-x/tutorial/archive/base-project.zip</a><br>Complete Project: <a href="https://github.com/fireball-x/tutorial" target="_blank" rel="external">https://github.com/fireball-x/tutorial</a></p>
</blockquote>
<h2 id="Requirements">Requirements</h2><p>Before get started with this tutorial, please read the following documentations to learn some basic knowledge about Fireball.</p>
<ul>
<li><a href="/manual/start/get-fireball">Get Fireball</a></li>
<li><a href="/manual/start/new-project">New Project</a></li>
<li><a href="/manual/start/editor-overview">Editor Overview</a></li>
</ul>
<h2 id="Setup_Project：">Setup Project：</h2><ul>
<li>Download <a href="https://github.com/fireball-x/tutorial/archive/base-project.zip" target="_blank" rel="external">Base project</a> and extract it to your working folder.</li>
<li>Launch Fireball, Use <code>Open Other...</code> button to browse and choose <code>duang-sheep</code> from extracted files. (For more info on how to open project, follow <a href="http://docs-zh.fireball-x.com/manual/start/new-project/#Open_Other…" target="_blank" rel="external">New Project</a>) docs.</li>
<li>Select <code>Main Camera</code> entity in <code>Hierarchy</code> view. Setup camera properties like the images below:<br><img src="https://cloud.githubusercontent.com/assets/7564028/6840260/cb6f9516-d3af-11e4-8729-b842307c1aed.png" alt="000"></li>
<li>Open <code>Game</code> view, click the drop menu at top left and set preview resolution to <code>Display (4:3)</code>.<br><img src="https://cloud.githubusercontent.com/assets/7564028/6840252/99f88740-d3af-11e4-86fe-de173f1011ed.png" alt="001"></li>
<li>Press <kbd>Ctrl + S</kbd> to save scene to <code>assets/scenes</code> folder, name the scene to “Game”.</li>
</ul>
<p><strong>Final Setup:</strong><br><img src="https://cloud.githubusercontent.com/assets/7564028/6840325/dbb2a1b0-d3b0-11e4-8e10-efdd04f93bc7.png" alt="002"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Tutorial:_Duang-Sheep">Tutorial: Duang-Sheep</h2><p>Let’s learn how to use Fireball Editor by building a simple but fun game.<br>It’]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[New project]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/start/new-project/"/>
    <id>http://docs.fireball-x.com/0.4/manual/start/new-project/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>By reading this article you will learn about:</p>
<ul>
<li>How to use Fireball Dashboard to create a new project or to open a existing project.</li>
<li>How files are organized in a Fireball project.</li>
</ul>
</blockquote>
<h2 id="Managing_your_projects_with_Dashboard">Managing your projects with Dashboard</h2><p>After starting up Fireball Engine, a dashboard like this will be shown:<br><img src="https://cloud.githubusercontent.com/assets/2867434/6851104/f49912b0-d417-11e4-8338-9b72b18df4a7.png" alt="new-project-01"></p>
<h3 id="Recent_Projects">Recent Projects</h3><p>You can quickly access recently opened projects via <strong>Rencent Projects</strong>.<br>By hovering your mouse on a recent project entry, action buttons will be displayed on the bottom-right corner of the entry. You can:</p>
<ul>
<li>Click <code>Open</code> to reopen the selected project, or</li>
<li>Click <code>Close</code> to remove the selected entry from the recent project list. The actual project folder will not be deleted from your disk.<br><img src="https://cloud.githubusercontent.com/assets/2867434/6866397/b26ccc38-d4b2-11e4-89b0-91bc1d3f6d09.png" alt="new-project-02"></li>
</ul>
<h3 id="New_Project">New Project</h3><p>You can create a new Fireball project via <strong>New Project</strong><br>Click <code>New Project</code> will bring out the UI for setting up the new project properties.<br><img src="https://cloud.githubusercontent.com/assets/2867434/6851105/f5123dd4-d417-11e4-9399-3ea81c0fd3b0.png" alt="new-project-02"></p>
<p>The following settings have to be properly set:</p>
<ul>
<li><strong>Name</strong><br>The name of your new project</li>
<li><strong>Path</strong><br>The <strong>parent directory</strong> of your new project folder. Fireball will create a new folder as its child, named by the <code>Name</code> property you set, for managing project files.</li>
<li><strong>Templates</strong><br>The framework template of your new project.<br>Please select a template fitting you desired game type (2D/3D). Fireball will take care of loading and referencing all necessary libraries.<br><em>Note: Fireball Engine currently supports creating 2D game only. Supporting for building 3D game will be available in future versions.</em></li>
<li><strong>Game Kits</strong><br>Creating your new project with a specific Game Kit.<br>By using Game Kit, it will be nice and easy to create a game of desired genre (RPG, ACT, STG). Game Kits contain a bunch of basic logical frameworks and resources that are designed for specific genres, so you don’t need to get yourself in trouble of most low-level works. Game Kits make it possible to build and release your game in lightspeed.<br><em>Note: This feature is not currently available. Game Kits will be provided in future releases.</em></li>
</ul>
<p>Once finishing setting up properties, please click <code>Create</code> button to make the new project created. Fireball will shut the Dashboard and load the project in Fireball Editor.</p>
<h3 id="Open_Other…">Open Other…</h3><p>You can open Fireball projects manually by <strong>Open Other…</strong>, in case of your project is not listed in Recent Projects.</p>
<p>Click <code>Open Other...</code> and choose the <strong>project folder</strong> in a pop-up dialog. Fireball Engine maintains projects with <strong>directories</strong> instead of particular project files.</p>
<h3 id="Help">Help</h3><p>You can access Fireball manuals and help documentations with <strong>Help</strong>.</p>
<h2 id="Project_File_Structure">Project File Structure</h2><p>Files are structured in a Fireball project as below:</p>
<pre><code>ProjectName
├──assets
├──library
├──local
├──settings
└──temp
</code></pre><ul>
<li>Public folders to project collaborators<ul>
<li><strong>assets</strong><br>Project resource files, including all actual elements used to form up a project. Such as:<ul>
<li>Scenes</li>
<li>Scripts</li>
<li>Sprites</li>
<li>Textures</li>
<li>Audio files</li>
<li>…<br>Just think them as all loaded resources in the Assets Panel of the [Editor]（/start/editor-overview)</li>
</ul>
</li>
<li><strong>settings</strong><br>Global project settings, which are of project-level and shared by all project collaborators. Such as:<ul>
<li>Plug-in settings</li>
<li>Button settings</li>
<li>Physics settings</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>Private folders used by current client <em>(and you should ignore them in version control)</em><ul>
<li><strong>library</strong><br>Files in this folder are for resource library management, and will be used by the <a href="/manual/start/editor-overview">Editor</a> for library data persistence and resource display.</li>
<li><strong>local</strong><br>Local project settings, which store user’s customized settings, such as Editor layout.</li>
<li><strong>temp</strong><br>Temporary files created by Fireball Engine.</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Next…">Next…</h3><ul>
<li>Read <a href="/manual/start/editor-overview/">Editor Overview</a> to learn more about the IDE.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>By reading this article you will learn about:</p>
<ul>
<li>How to use Fireball Dashboard to create a new project or to open ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Get Fireball]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/start/get-fireball/"/>
    <id>http://docs.fireball-x.com/0.4/manual/start/get-fireball/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Thank your for gazing on Fireball Engine!<br>This article will guide you downloading and running Fireball Engine, so you can get yourself started as soon as possible.</p>
</blockquote>
<h2 id="Downloading_Fireball">Downloading Fireball</h2><p>You need to visit the <a href="http://www.fireball-x.com/en" target="_blank" rel="external">official site</a> of Fireball for the latest release.<br>Click <strong>Try Now</strong> or <strong>Download</strong> menu button on the homepage to enter the download page.</p>
<p><img src="https://cloud.githubusercontent.com/assets/2867434/6846086/3cc070fa-d3f6-11e4-8f92-2b00d4ba0a9f.png" alt="get-fireball-01"></p>
<p>There is a list of released versions on the download page. Please select a preferred one, and click the following <strong>download</strong> link for detailed descriptions.</p>
<p><em>We suggest you to download the latest version of Fireball.</em><br><em>As we are continuously improving our product, every release will bring out new features or user experience enhancements.</em></p>
<p><img src="https://cloud.githubusercontent.com/assets/2867434/6846084/3bf9c8ec-d3f6-11e4-852e-ad5defde3b0a.png" alt="get-fireball-02"></p>
<p>Binary packages for different systems are provided in the detail page. Please select an appropriate one to download (Mac/Windows).<br>Bundled scripting API documentations are provided for downloading as well. Please do get a copy if you need to check for API references offline.</p>
<p><img src="https://cloud.githubusercontent.com/assets/2867434/6846085/3c0a631e-d3f6-11e4-9108-d6d809434549.png" alt="get-fireball-03"></p>
<p>You can learn detailed information of selected version in the detail page, including:</p>
<ul>
<li>New features</li>
<li>Feature improvements</li>
<li>Fixed bugs</li>
</ul>
<p><em>Clicking the reference ID following description entries will redirect you to the issue page on Github, in case of you want to know more about the entry.</em></p>
<h2 id="Running_Fireball">Running Fireball</h2><ul>
<li><strong>For Windows Users</strong><br>Unzip the package to any preferred directory (e.g. <code>D:\Fireball</code>), and execute <code>fireball.exe</code>.</li>
<li><strong>For Mac Users</strong><br>Open the zipped package, drag <code>Fireball.app</code> to <code>Apps</code> and execute it.</li>
</ul>
<hr>
<h3 id="Next…">Next…</h3><ul>
<li>Read <a href="/manual/start/new-project/">New project</a> and learn how to create your first Fireball game.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Thank your for gazing on Fireball Engine!<br>This article will guide you downloading and running Fireball Engine, so you can]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[From Unity]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/start/from-unity/"/>
    <id>http://docs.fireball-x.com/0.4/manual/start/from-unity/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>Though there are many differences between Fireball and <a href="http://unity3d.com/" target="_blank" rel="external">Unity®</a>, they are both designed based on components, and share some common user experiences. Knowledge of Unity is therefore helpful for getting started with Fireball. You will find this chapter useful if you ever used Unity.</p>
<p>This chapter will not give you a detailed introduction of Fireball from scratch, nor will list all differences from Unity.</p>
<h2 id="Differences_In_Terms">Differences In Terms</h2><table>
<thead>
<tr>
<th>Terms in Fireball</th>
<th>Terms in Unity</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Scene</td>
<td>Level</td>
<td>Game Scene</td>
</tr>
<tr>
<td>Entity</td>
<td>GameObject</td>
<td>Objects in game scene, which may include multiple Components respectively.</td>
</tr>
<tr>
<td>Assets</td>
<td>Project</td>
<td>Project resources</td>
</tr>
</tbody>
</table>
<h2 id="Differences_In_Design">Differences In Design</h2><ul>
<li>Parent-child relations are maintained by Entity in Fireball, while in Unity are by Transform.</li>
<li>Fireball chooses uppper-left corner as origin point (i.e. (0,0)) in coordinates system (both Viewport and Screen), while Unity chooses bottom-left corner.</li>
<li>NonSerialized fields <strong>can</strong> be shown in Fireball Inspector Panel, while they cannot to so in Unity.</li>
<li>Fireball <strong>can</strong> access properties defined by getter/setter in Inspector Panel. Unity can’t.</li>
</ul>
<h2 id="Differences_in_API">Differences in API</h2><ul>
<li>Fireball methods’ names start with lower-cased letters.</li>
<li>Fireball objects are all inherited from Fire.FObject. (As Unity objects are inherited from UnityEngine.Object)</li>
<li>Fireball doesn’t destroy objects by calling Object.Destroy(obj), but by <code>obj.destroy()</code>.</li>
<li>Fireball checks if an object has been destroyed by <code>if(obj.isValid)</code> or <code>Fire.isValid(obj)</code>, and <code>if(obj)</code> doesn’t work. <code>obj.isValid</code> is available only when the reference to <code>obj</code> is not null.</li>
<li>Fireball uses <code>Entity.active</code> to get and set the activation state for entities. (Unity uses <code>activeSelf</code>)</li>
<li>Fireball components are of type <code>Component</code> <del>and <code>Behaviour</code></del>. There is no <code>Monobehaviour</code>.</li>
<li>Fireball adds components by <code>entity.addComponent(MyComponent)</code> or <code>entity.addComponent(&quot;MyComponent&quot;)</code>.</li>
<li>Fireball gets components by <code>entity.getComponent(MyComponent</code> or <code>entity.GetComponent(MyComponent)</code>.</li>
<li>Fireball retrieves Entity from components by <code>component.entity</code>. (Unity uses <code>component.gameObject</code>)</li>
<li>Fireball retrieves and sets parent objects directly by <code>Entity.parent</code>. Related interfaces such as <code>children</code>, <code>sibling</code> and <code>find</code> can be accessed through Entity as well.</li>
<li>Fireball uses the local coordinates of the parent object, not the world coordinates, for the value of <code>Transform.position</code>. Values of <code>rotation</code> and <code>scale</code> follow the same rule.</li>
<li>Fireball provides <code>transform.x</code> and <code>transform.y</code> in Transform for users’ convenience.</li>
<li>Fireball provides the <code>onLoad</code> callback for components, equaling to <code>Awake</code> in Unity.</li>
<li>Fireball provides the <code>start</code> callback for components, equaling to <code>Start</code> in Unity.</li>
<li>Fireball follows the node.js style in callback functions, which means the first parameter is error message, and the second is actual passed data.</li>
<li>Fireball can set an Entity as <code>dontDestroyOnLoad = true</code>, which equals to <code>DontDestroyOnLoad()</code> in Unity.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Though there are many differences between Fireball and <a href="http://unity3d.com/" target="_blank" rel="external">Unity®</a>, they are ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meet Editor]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/start/editor-overview/"/>
    <id>http://docs.fireball-x.com/0.4/manual/start/editor-overview/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This chapter will introduce you all the features of Fireball Editor. It would be a good place for being familiar with Fireball Editor, and getting ready for your future Fireball works.<br>Please make sure you have finished reading the following articles before going further:</p>
<ul>
<li><a href="/manual/start/get-fireball/">Get Fireball</a></li>
<li><a href="/manual/start/new-project/">New Project</a></li>
</ul>
</blockquote>
<h1 id="Introduction">Introduction</h1><p>You’ll have no chance to build an exciting game without understanding what all the editor tools can do for you first, so hold your horse for a while and meet the Fireball Editor along with thrilling features. And, whenever you are in doubt, don’t forget this chapter is a good place to look up for as well.</p>
<p>Fireball Editor mainly consists of serveral panels, which are designed for finishing specific tasks, respectively. You can adjust their sizes and positions by your own taste. Beside of these panels, there are other UIs which are essential for building a game, including menu bar, tool bar and tool windows, and you should know about them as well.</p>
<p>Check out the screenshot below - it gives a basic concept of the UI layout (In the default layout, <strong>Game Panel</strong> and <strong>Scene Panel</strong> are overlapped, and you may need to switch between them by clicking the <code>Scene</code> tab and <code>Game</code> tab). We will discuss every piece of features in the sections below.</p>
<p><img src="/manual/start/editor-overview/editor-overview-intro.png" alt="editor-overview-intro"></p>
<h1 id="Menus">Menus</h1><h2 id="Fireball">Fireball</h2><ul>
<li><strong>Hide Fireball (Shortcut: <kbd>H</kbd> )</strong><br><em>In construction</em></li>
<li><strong>Hide Others (Shortcut: <kbd>Shift + H</kbd> )</strong><br><em>In construction</em></li>
<li><strong>Show All</strong><br><em>In construction</em></li>
<li><strong>Quit (Shortcut: <kbd>Ctrl/Command + Q</kbd> )</strong><br>Exit Fireball Editor</li>
<li><strong>Check For Updates</strong><br>Check if there is any new version of Fireball Editor to update.</li>
<li><strong>About</strong><br>Display about information and copyrights of Fireball Editor.</li>
<li><strong>Panels</strong><br><em>In construction</em></li>
</ul>
<h2 id="File">File</h2><ul>
<li><strong>New Scene (Shortcut: <kbd>Ctrl/Command + N</kbd> )</strong><br>Create a new scene in current project.<br>A game consists of one or more scenes. You’ll need to create new scenes when you indend to make indepent modules such as new stages, main menu, loading screen, setting screen, etc.</li>
<li><strong>Save Scene (Shortcut: <kbd>Ctrl/Command + S</kbd> )</strong><br>Save the current editing scene.<br>A save file dialog will pop up if the current scene is never saved before, in which you can determine where to save your scene file (*.fire). If the scene has been saved, Fireball Editor will update the save file directly.<blockquote>
<p>It is suggested to place all scene files in a particular directory for management, for example <strong>assets/scenes</strong>.</p>
</blockquote>
</li>
<li><strong>Build Settings</strong><br>Set the project build parameters.<br>Building is a critical step in the deployment process. Fireball Editor will pack and optimize your game files during building process, in order to make it able to be deployed on various platforms fast, safely and correctly. Through Build Settings, you can fine tuning the parameters for certain needs, as well as to preview your game before deployment.<br>You will find more information about Build Settings in the [Tool Windows](#tool-windows] section.</li>
</ul>
<h2 id="Edit">Edit</h2><ul>
<li><strong>Undo (Shortcut: <kbd>Z</kbd> )</strong><br>Undo the last operation.</li>
<li><strong>Redo (Shortcut: <kbd>Shift + Z</kbd> )</strong><br>Redo the latest undone operation.</li>
<li><strong>Cut (Shortcut: <kbd>X</kbd> )</strong><br>Cut the selected Entity into the clipboard.</li>
<li><strong>Copy (Shortcut: <kbd>C</kbd> )</strong><br>Copy the selected Entity into the clipboard.</li>
<li><strong>Paste (Shortcut: <kbd>V</kbd> )</strong><br>Paste the Entity in the clipboard into the current scene.</li>
<li><strong>Select All (Shortcut: <kbd>A</kbd> )</strong><br>Select all Entities in the current scene.</li>
</ul>
<h2 id="Entity">Entity</h2><blockquote>
<p>In Fireball Engine, a game object is called a <strong>Entity</strong>. <strong>Entity</strong> will appear or behave differently by attaching different resources or components. The presentation, interactions and logic execution of a scene are organized by multiple <strong>Entities</strong>.</p>
</blockquote>
<ul>
<li><strong>Create Empty</strong><br>Create an empty <strong>Entity</strong> in the scene.<br>An empty <strong>Entity</strong> solely contains its <strong>Transform information</strong>, i.e. its position, rotation and scale. The default property values are:<ul>
<li><strong><em>Position</em></strong> x=0, y=0</li>
<li><strong><em>Rotation</em></strong> 0</li>
<li><strong><em>Scale</em></strong> x=1, y=1</li>
</ul>
</li>
<li><strong>Create Empty Child</strong><br>Create a <strong>Child Entity</strong> that belongs to the selected <strong>Entity</strong>.<br>For the situation of no <strong>Entity</strong> is selected, this function will create an empty <strong>Entity</strong> as a root one, which behaves exactly the same as <strong>Create Empty</strong> function.</li>
</ul>
<h2 id="View">View</h2><p><em>In construction</em></p>
<h2 id="Window">Window</h2><ul>
<li><strong>Close (Shortcut: <kbd>W</kbd> )</strong><br>Close the Fireball Editor window.</li>
</ul>
<h2 id="Developer">Developer</h2><ul>
<li><strong>Reload (Shortcut: <kbd>Ctrl/Command + R</kbd> )</strong><br>Reload the Fireball Editor.</li>
<li><strong>Recompile (Shortcut: <kbd>F7</kbd> )</strong><br>Recompile all scripts in the current scene.</li>
<li><strong>Developer Tools (Shortcut: <kbd>Alt + Ctrl/Command + I</kbd> )</strong><br>Open the <strong>Developer Tools</strong> window.<br>Various useful and powerful features are provided in <strong>Developer Tools</strong> for analyzing, debugging and tracing, which are essential for game script developers. You will find more information about <strong>Developer Tools</strong> in the <a href="#tool-windows">Tool Windows</a> section.</li>
<li><strong>Show Selected Asset in Library</strong><br>Open the sub-directory of the Library folder where stores the currently selected asset in system file explorer.</li>
<li><strong>Test</strong><ul>
<li><strong>Reload Window Scripts</strong><br><em>In construction</em></li>
<li><strong>Reload Core Plugins</strong><br><em>In construction</em></li>
<li><strong>Thrown an Uncaught Exception</strong><br><em>In construction</em></li>
<li><strong>Ipc send2panel foo:bar@foobar@fire</strong><br><em>In construction</em></li>
<li><strong>AssetDB Debugger</strong><br>Open the <strong>AssetDB Debugger</strong>, which is for tracking asset modifications and correspondings during debugging. You will find more information about <strong>AssetDB Debugger</strong> in the <a href="#tool-windows">Tool Windows</a> section.</li>
</ul>
</li>
</ul>
<h2 id="Help">Help</h2><ul>
<li><strong>Website</strong><br>Visit the official website of Fireball Engine for more information.</li>
<li><strong>Documentation</strong><br>Visit the documentation site of Fireball Engine for engine manuals and scripting API references.</li>
<li><strong>Forum</strong><br>Visit the forum of Fireball Engine to share ideas with other users and developers.</li>
<li><strong>Submit An Issue On Github</strong><br>Commit an issue in the Fireball Engine Github repository. You can always let us know by committing issues if you encounter bugs or have better ideas about Fireball Engine. Our team will be cheerful and reply you as soon as possible.</li>
<li><strong>Subscribe To Newsletter</strong><br>Subscribe to Fireball Engine news letters for latest news and updates.</li>
</ul>
<h1 id="Toolbar">Toolbar<a id="toolbar"></a></h1><h2 id="Move_Tool">Move Tool <img src="/manual/start/editor-overview/tool-move.png" alt="tool-move"></h2><p>Move the selected <strong>Entity</strong> by handlers. The handlers will look like below when using the Move Tool:<br><img src="/manual/start/editor-overview/preview-move.png" alt="preview-move"></p>
<ul>
<li>Dragging the green arrow will move the <strong>Entity</strong> along the coordinates’ Y-axis.</li>
<li>Dragging the red arrow will move the <strong>Entity</strong> along the coordinates’ X-axis.</li>
<li>Dragging the blue rectangle in the centre will move the <strong>Entity</strong> along both of the coordinates’ X and Y axes.</li>
</ul>
<h2 id="Rotate_Tool">Rotate Tool <img src="/manual/start/editor-overview/tool-rotate.png" alt="tool-rotate"></h2><p>Rotate the selected <strong>Entity</strong> by hander. The handler will look like below when using the Rotate Tool:<br><img src="/manual/start/editor-overview/preview-rotate.png" alt="preview-rotate"></p>
<ul>
<li>Dragging the red handler or any point inside the circle will rotate the <strong>Entity</strong> clockwise or counter-clockwise, depending on the direction of dragging.</li>
<li>The angel of rotation will be shown during your rotation.</li>
</ul>
<h2 id="Scale_Tool">Scale Tool <img src="/manual/start/editor-overview/tool-scale.png" alt="tool-scale"></h2><p>Scale the selected <strong>Entity</strong> by handlers. The handlers will look like below when using the Scale Tool:<br><img src="/manual/start/editor-overview/preview-scale.png" alt="preview-scale"></p>
<ul>
<li>Dragging the green handler will scale the <strong>Entity</strong> along the coordinates’ Y-axis.</li>
<li>Dragging the red handler will scale the <strong>Entity</strong> along the coordinates’ X-axis.</li>
<li>Dragging the grey rectangle in the centre will scale the <strong>Entity</strong> along both of the coordinates’ X and Y axes.</li>
</ul>
<h2 id="Use_self_coordinates">Use self coordinates <img src="/manual/start/editor-overview/tool-self-coordinate.png" alt="tool-self-coordinate"></h2><p>The handlers aligns with <strong>Entity</strong>‘s self coordinates, and will rotate as <strong>Entity</strong> rotates.<br>The handlers will behave as below when using self coordinates.<br><img src="/manual/start/editor-overview/preview-self-coordinate.png" alt="preview-self-coordinate"></p>
<h2 id="Use_world_coordinates">Use world coordinates <img src="/manual/start/editor-overview/tool-world-coordinate.png" alt="tool-world-coordinate"></h2><p>The handers aligns with the world coordinates, pointing to the world’s X and Y axes.<br>The handlers will behave as below when using world coordinates.<br><img src="/manual/start/editor-overview/preview-world-coordinate.png" alt="preview-world-coordinate"></p>
<h2 id="Place_on_Pivot">Place on Pivot <img src="/manual/start/editor-overview/tool-pivot.png" alt="tool-pivot"></h2><p>The handlers are placed on pivot of the selected <strong>Entity</strong>. Moving, rotating and scaling use the pivot as centre.<br>When multiple <strong>Entities</strong> are selected, the handlers will use the first selected one’s pivot. An example is shown below (<strong>Entities</strong> are selected from left to right):<br><img src="/manual/start/editor-overview/preview-pivot.png" alt="preview-pivot"></p>
<h2 id="Place_on_Centre">Place on Centre <img src="/manual/start/editor-overview/tool-centre.png" alt="tool-centre"></h2><p>The handlers are placed on the centre of the selected <strong>Entities</strong>. Moving, rotating and scaling are based on the centre point.<br>When multiple <strong>Entities</strong> are selected, the handlers will be placed on the centre of the entire selection area, shown as below:<br><img src="/manual/start/editor-overview/preview-centre.png" alt="preview-centre"></p>
<h2 id="Play">Play <img src="/manual/start/editor-overview/tool-play.png" alt="tool-play"></h2><p>Compile and run the current scene. The interaction of <strong>Game Panel</strong> will be activated in the meantime.</p>
<h2 id="Pause">Pause <img src="/manual/start/editor-overview/tool-pause.png" alt="tool-pause"></h2><p>Pause the current running game.<br>By pausing the current game will make it possible to check game data and object states of a certain moment.</p>
<h2 id="Stepping">Stepping <img src="/manual/start/editor-overview/tool-step.png" alt="tool-step"></h2><p>Run the game to the next frame and the pause.<br>By stepping, you can tracking the changes of game data and object states in every frame. This function is often used for dynamic debugging in a certain time range.</p>
<h2 id="Shortcut_Mapping">Shortcut Mapping <img src="/manual/start/editor-overview/tool-hotkeys.png" alt="tool-hotkeys"></h2><p>Clicking this button will pop up the shortcut mapping table for quick reference.</p>
<h2 id="User_Profile">User Profile <img src="/manual/start/editor-overview/tool-user.png" alt="tool-user"></h2><p><em>In construction</em></p>
<h1 id="Hierarchy_Panel">Hierarchy Panel</h1><p><img src="/manual/start/editor-overview/hierarchy-panel.png" alt="hierarchy-panel"><br><strong>Hierarchy Panel</strong> is for managing all <strong>Entities</strong> (game objects) in the scene. <strong>Entities</strong> are organized hierarchically in the <strong>Hierarchy Panel</strong> to indicate the parent-child relationship between <strong>Entities</strong>. Child <strong>Entities</strong> will inherit some properties of their parents. For instance, when moving, rotating or scaling parent <strong>Entities</strong>, their children will transform with them.</p>
<h2 id="Entity_List">Entity List</h2><p><strong>Entities</strong> in a scene will be present in terms of their relationship.  Those that owns children will show a little arrow <img src="/manual/start/editor-overview/collapse-arrow.png" alt="collapse-arrow"> in front of their names. Parent <strong>Entities</strong> will be expanded or collapsed by clicking the arrow.</p>
<p>Properties of selected <strong>Entities</strong> will be shown in the <strong>Inspector Panel</strong>, while the handlers of the <strong>Entities</strong> will appear in the <strong>Scene Panel</strong> in the meantime. You can select multiple <strong>Entities</strong> in the list by pressing <kbd>Shift</kbd> key or <kbd>Ctrl</kbd> key, continuously or not.</p>
<p>You can also change the relationship by dragging <strong>Entities</strong> in the list. Say, dragging <strong>Entity</strong> A onto <strong>Entity</strong> B will make A become B’s child.</p>
<p>Click right mouse button in the list will pop up a context menu, whose features includes:</p>
<ul>
<li><strong>Duplicate</strong>: Make a copy of selected <strong>Entity</strong> and add it to the end of the list. It is the easiest way to create multiple <strong>Entities</strong> with same or similar properties.</li>
<li><strong>Rename</strong>: Rename the selected <strong>Entity</strong>. You can do so in the <strong>Inspector Panel</strong> as well.</li>
<li><strong>Delete</strong>: Delete the selected <strong>Entity</strong>. You can do so by pressing <kbd>Delete</kbd> key as well.</li>
<li><strong>Create Empty</strong>: Create an empty <strong>Entity</strong> in the scene.<br>An empty <strong>Entity</strong> solely contains its <strong>Transform information</strong>, i.e. its position, rotation and scale. The default property values are:<ul>
<li><strong><em>Position</em></strong> x=0, y=0</li>
<li><strong><em>Rotation</em></strong> 0</li>
<li><strong><em>Scale</em></strong> x=1, y=1</li>
</ul>
</li>
<li><strong>Create Empty Child</strong><br>Create a <strong>Child Entity</strong> that belongs to the selected <strong>Entity</strong>.<br>For the situation of no <strong>Entity</strong> is selected, this function will create an empty <strong>Entity</strong> as a root one, which behaves exactly the same as <strong>Create Empty</strong> function.</li>
</ul>
<h2 id="Add_Entity">Add <strong>Entity</strong></h2><p>Click the <img src="/manual/start/editor-overview/add-button.png" alt="add-button"> in the upper-left corner in the panel will show you the <strong>Entity</strong> creation menu, whose features includes:</p>
<ul>
<li><strong>Create Empty</strong>: Create an empty <strong>Entity</strong> in the scene.<br>An empty <strong>Entity</strong> solely contains its <strong>Transform information</strong>, i.e. its position, rotation and scale. The default property values are:<ul>
<li><strong><em>Position</em></strong> x=0, y=0</li>
<li><strong><em>Rotation</em></strong> 0</li>
<li><strong><em>Scale</em></strong> x=1, y=1</li>
</ul>
</li>
<li><strong>Create Empty Child</strong><br>Create a <strong>Child Entity</strong> that belongs to the selected <strong>Entity</strong>.<br>For the situation of no <strong>Entity</strong> is selected, this function will create an empty <strong>Entity</strong> as a root one, which behaves exactly the same as <strong>Create Empty</strong> function.</li>
</ul>
<h2 id="Search_Entity">Search <strong>Entity</strong></h2><p>The search box is designed for filtering and locating <strong>Entities</strong> with specific keywords quickly. When there are numerous <strong>Entities</strong> in the scene, or the relationship between them are quite complicating, the search box will improve your efficiency in a great deal.</p>
<h1 id="Assets_Panel">Assets Panel</h1><p><img src="/manual/start/editor-overview/assets-panel.png" alt="assets-panel"></p>
<p><strong>Assets</strong>, belonging to the entire project, are basic elements for visual presents and logic controls of a game, and are shared among all scenes. <strong>Entities</strong> become useful, such as drawing graphics and executing scripts, only if there are corresponding <strong>Assets</strong>. In Fireball Engine, <strong>Assets</strong> can be of following types:</p>
<ul>
<li>Textures</li>
<li>Normal Maps</li>
<li>Sprites</li>
<li>Sprite Animations</li>
<li>Music and sound effects</li>
<li>Fonts</li>
<li>Fire-shell scripts</li>
<li>Atlases</li>
<li>Scenes</li>
</ul>
<p>There are different behaviours for different <strong>Assets</strong> that varies among <strong>Components</strong>. For more information please refer to Fireball Engine API documentaion.</p>
<h2 id="Asset_List">Asset List</h2><p><strong>Assets</strong> of a project are organized by folders. The <em>Assets</em> folder is used as root, which means that Fire Editor will load the <strong>Assets</strong> placed in <em>Assets</em> folder and its sub folders. There can be numerous <strong>Assets</strong> for a complete game, so it is suggested to organize <strong>Assets</strong> by sub folders for your own convenience. For instance, all scripts should be in the <em>script</em> folder, while UI related <strong>Assets</strong> be in the <em>ui</em> folder, etc.</p>
<p>Once an <strong>Asset</strong> is selected in the list, its property will be shown in the <strong>Inspector Panel</strong>. You can do multiple selection by <kbd>Shift</kbd> key or <kbd>Ctrl</kbd> key.</p>
<p>You can set the which folder it belongs to by dragging an <strong>Asset</strong> for better structure.</p>
<p>If you want to put an <strong>Asset</strong> into the current scene, simply drag it into the <strong>Hierarchy</strong> panel. The <strong>Asset</strong> will be converted to <strong>Entity</strong> automatically and be placed into the scene.</p>
<blockquote>
<p>Here is an exception: scenes cannot be dragged into <strong>Hierarchy Panel</strong>, for them cannot be contained by another scene. You can open the scene <strong>Assets</strong> by double-clicking them.</p>
</blockquote>
<p>Click right mouse button in the list will pop up a context menu, whose features includes:</p>
<ul>
<li><strong>Create</strong><ul>
<li><strong>New Folder</strong>: Create a new sub folder in the selected folder.</li>
<li><strong>New Script</strong>: Create a new fire-shell script. A basic template will be provided in a new script. Details can be found in API documentation.</li>
<li><strong>New Scene</strong>: Create a new scene.</li>
<li><strong>New Atlas</strong>: Create a new atlas (image pack).</li>
<li><strong>New Sprite(Standalone)</strong>: Create a static sprite object. An image as texture must be selected first.</li>
<li><strong>New Sprite Animation</strong>: <em>In construction</em></li>
</ul>
</li>
<li><strong>Rename</strong>: Rename the selected <strong>Asset</strong>.</li>
<li><strong>Delete</strong>: Delete the selected <strong>Asset</strong>. You can do so with <kbd>Delete</kbd> key as well.</li>
<li><strong>Reimport</strong>: Reimport all <strong>Assets</strong> in the Asset List.</li>
<li><strong>Show in Explorer</strong>: Open the system file explorer and locate to the <strong>Asset</strong> file.</li>
<li><strong>Show in Library</strong>: Open the system file explorer and locate to the meta file of the selected <strong>Asset</strong> in the <em>Library</em> folder.</li>
<li><strong>Show Uuid</strong>: Print the UUID of the selected <strong>Asset</strong> in the <strong>Console Panel</strong>.</li>
</ul>
<h2 id="Add_Assets">Add <strong>Assets</strong></h2><p>Click the <img src="/manual/start/editor-overview/add-button.png" alt="add-button"> button in the upper-left corner will pop up the <strong>Asset</strong> adding menu, whose features include:</p>
<ul>
<li><strong>New Folder</strong>: Create a new sub folder in the selected folder.</li>
<li><strong>New Script</strong>: Create a new fire-shell script. A basic template will be provided in a new script. Details can be found in API documentation.</li>
<li><strong>New Scene</strong>: Create a new scene.</li>
<li><strong>New Atlas</strong>: Create a new atlas (image pack).</li>
<li><strong>New Sprite(Standalone)</strong>: Create a static sprite object. An image as texture must be selected first.<br>You can also add new files to the <strong>Asset Panel</strong> by drag and drop.</li>
</ul>
<h2 id="Search_Assets">Search <strong>Assets</strong></h2><p>The search box is designed for filtering and locating <strong>Assets</strong> with specific keywords quickly. When there are numerous <strong>Assets</strong> in the scene, or the relationship between them are quite complicating, the search box will improve your efficiency in a great deal.</p>
<h1 id="Inspector_Panel">Inspector Panel</h1><p>The <strong>Inspector Panel</strong> allows you to inspect and edit properties of selected items.<br>The <strong>Inspector Panel</strong> will show editable properties and their values as soon as you select an <strong>Asset</strong> as well as an <strong>Entity</strong>. All modifications made in inspector will be applied onto selected item without recompiling.</p>
<h2 id="Entity_Property_Editing"><strong>Entity</strong> Property Editing</h2><p><img src="/manual/start/editor-overview/inspector-entity.png" alt="inspector-entity"></p>
<ul>
<li>Enable/Disable checkbox<br>You can enable or disable the selected <strong>Entity</strong> by ticking or unticking the checkbox. Disabled <strong>Entities</strong> will not be shown in the scene.</li>
<li>Name textbox<br>Change the name of the selected <strong>Entity</strong> for better identification. Different <strong>Entities</strong> can have a same name, however, we suggest you to name your <strong>Entities</strong> following certain rules, in order to reduce the difficulty of development and maintenance. You can rename <strong>Entities</strong> in the <strong>Hierarchy Panel</strong> as well.</li>
<li>New <strong>Component</strong> Button<br>You can add <strong>Components</strong> for <strong>Entities</strong> to make them acquire certain functions and behaviours.<br>Click the <img src="/manual/start/editor-overview/add-button.png" alt="add-button"> button in the upper-right corner will pop up the <strong>Component</strong> adding menu, whose features include:<ul>
<li><strong>Scripts</strong>: Bind a Fire-shell script to the <strong>Entity</strong> for behaviour controlling. Fireball will search all scripts in the asset library, and list them in the sub-menu for quick selection.</li>
<li><strong>SpriteRenderer</strong>: Add a sprite renderer component to make the <strong>Entity</strong> render specified sprite <strong>Asset</strong> in the scene.</li>
<li><strong>BitmapText</strong>: Draw texts with bitmap font in the scene.</li>
<li><strong>Text</strong>: Draw texts with system fonts in the scene.</li>
<li><strong>Camera</strong>: Add a camera to control the game view.</li>
<li><strong>AudioSource</strong>: Add a audio source for playing music or sound effects.</li>
<li><strong>Sprite Animation</strong>: Add a sprite animation controller. <em>施工中</em></li>
</ul>
</li>
<li><strong>Component</strong> List<br>This is the main working area of the <strong>Inspector Panel</strong>, including all <strong>Components</strong> of the selected <strong>Entity</strong> and all their editable properties. Typically, <strong>Components</strong> of an <strong>Entity</strong> will be listed in the sequence as added, but <code>Fire.Transform</code> will be the first one constantly, as it is the basic component. Click the arrow icon on the left of <strong>Component</strong> name will expand or collapse its details, which can save you some space. Click the X button will delete the <strong>Component</strong> from the <strong>Entity</strong>.<br>For details of <strong>Component</strong> properties, please refer to <strong>Component</strong> documentation.</li>
</ul>
<h2 id="Asset_Property_Editing"><strong>Asset</strong> Property Editing</h2><p><img src="/manual/start/editor-overview/inspector-asset.png" alt="inspector-asset"></p>
<p>Comparing with <strong>Entity</strong> property panel, the one of <strong>Assets</strong> are much simpler, for the reason that <strong>Assets</strong> are not used directly in game scenes, which makes them unnecessary to be edited in detail in the editor - they are always fine tuned in particular external tools (such as image processing softwares).</p>
<p>Generally, parameters in <strong>Asset</strong> property panel consist of two major types (some kinds of <strong>Assets</strong> probably have only one type of parameters for editing):</p>
<ul>
<li><strong>Meta</strong><br>Meta data of <strong>Assets</strong> in Fireball Editor, including their behaviour or presenting methods in the engine. For instance, you can set the <strong>Asset</strong> type as sprite, texture or normal map for imported images.</li>
<li><strong>Asset</strong><br>The raw properties of the <strong>Asset</strong>, such as the image size, the audio sampling rate, etc. These properties usually cannot be changed in Fireball Editor but for reference.</li>
</ul>
<p><strong>Asset</strong> property panel provides preview window as well, for ensuring the editing and modifications. For different types of <strong>Assets</strong>:</p>
<ul>
<li>If it’s an image, preview window will show the image within the constraint of the window size, and note its original size in the bottom.</li>
<li>If it’s an audio, preview window will show a playback tool bar for playing, stopping and looping the audio. Some basic information will be shown in the preview window meanwhile, including channels, sampling rate, format and playback time.</li>
</ul>
<p>的You will need to click the <img src="/manual/start/editor-overview/inspector-apply.png" alt="inspector-apply"> button in the upper-right corner of the <strong>Inspector Panel</strong> once making changes to an <strong>Asset</strong>, for applying your modifications to relevant <strong>Entities</strong>. Or you can click <img src="/manual/start/editor-overview/inspector-revert.png" alt="inspector-revert"> button to discard the changes you made.</p>
<h1 id="Scene_Panel">Scene Panel</h1><p><img src="/manual/start/editor-overview/scene-panel.png" alt="scene-panel"><br>The <strong>Scene Panel</strong> is designed to editor the current game scene. It is the most ‘frank’ panel and most frequently used one in game making process, if you ask me.</p>
<p>The <strong>Scene Panel</strong> are usually used for stage designing and building, such as setting up background, floor, obstacles and other visual elements. Thanks to its visual feature, it can also be used for UI layout and any WYSIWYG elements.</p>
<p><strong>It is notable that every scene must have at least one camera for game view, or no picture will be shown when game runs.</strong> However, it is a relief that you don’t need to worry about it. Fireball Editor has created a default camera for you when a scene is created.</p>
<p>The <strong>Scene Panel</strong> is very easy to master. All you need is to click or drag a selection box to selected the <strong>Entities</strong> you want to edit, transform them will the tools in tool bar, and check the results. When multiple <strong>Entities</strong> are selected, the items will be highlighten in the <strong>Hierarchy Panel</strong>, and handlers will be shown in the <strong>Scene Panel</strong> (but their positions depends on your <strong>handler position setting</strong>, referring to the <a href="#toolbar">Toolbar</a> manual).</p>
<p>When the scene is large, you can use your mouse scroller for zooming.</p>
<p>Also, you can quick select <strong>Entities</strong> by putting keywords in the search box in the upper-right corner.</p>
<h1 id="Game_Panel">Game Panel</h1><p><img src="/manual/start/editor-overview/game-panel.png" alt="game-panel"><br>The <strong> Game Panel</strong> is where the game runs. It has no editing functions itself, but while game running, it will simulate the user-end environment, which allows you to ensure what the game looks like in users’ eyes, and to check the in-game interactions.</p>
<p>Game view in the <strong>Game Panel</strong> depends on your settings of the camera <strong>Entity</strong>. The good news is, you can set screen ratio in the <strong>Game Panel</strong> to simulate different platforms and screens. Most aspect ratios are self-explained by their names, however there are some special ones:</p>
<ul>
<li><strong>Free Aspect</strong>: Fit the display area with the <strong>Game Panel</strong> size, using the entire available space.</li>
<li><strong>Custom Size</strong>: Customize the size of the display area. By selecting this, you can set width and height accurantly in the value boxes to the right, with the unit of pixels.</li>
<li><strong>Rotate</strong>: By ticking this option, the game display will rotate by 90 degrees, for landscape simulation.</li>
</ul>
<h1 id="Console_Panel">Console Panel</h1><p><img src="/manual/start/editor-overview/console-panel.png" alt="console-panel"><br>The <strong>Console Panel</strong> is for monitoring game script running status and console output, in purpose of debugging. Information printed here can be from your scripts, or Fireball Editor itself.</p>
<p>Fireball Editor distinguishes different levels of information by colors. The severities are ordered from the lowest to the highest as:</p>
<ul>
<li><strong>Log</strong> (grey): information usually for tracking or debugging.</li>
<li><strong>Info</strong>（blue）: information usually for notification or notes.</li>
<li><strong>Warn</strong>（yellow）: information usually for indicating that there is an abnormal situation, but won’t crash the game.</li>
<li><strong>Error</strong>（red）: information for fatal errors which will crash the game, such as uncaught exceptions.</li>
</ul>
<p>You can manage information in the <strong>Console Panel</strong> when there is too many:</p>
<ul>
<li><strong>Clear</strong> <img src="/manual/start/editor-overview/console-clear.png" alt="console-clear">: Clear all console outputs.</li>
<li><strong>Filter box</strong> <img src="/manual/start/editor-overview/console-filter.png" alt="console-filter">:<br>Filter console information by keywords. When <strong>Regex</strong> checkbox is ticked, content in the filter box is considered as a regular expression.</li>
<li><strong>Level filter combobox</strong> <img src="/manual/start/editor-overview/console-level.png" alt="console-level">:<br>Display information of only one severity level. All levels will be shown when <strong>All</strong> is selected.</li>
<li><strong>Collapse checkbox</strong>: Ticking this checkbox will merge same outputs, with a leading number that tells how many times it has been repeated. This feature is rather useful and space economic when there are many outputs and their sequence don’t matter.</li>
</ul>
<h1 id="Status_Bar">Status Bar</h1><p><em>In construction</em></p>
<h1 id="Tool_Windows">Tool Windows <a id="tool-windows"></a></h1><p><em>In construction</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>This chapter will introduce you all the features of Fireball Editor. It would be a good place for being familiar with Fireba]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Time and Framerate]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/time/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/time/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>Assuming a character needs to travel in a constant speed. You might figure out that every frame should use a fixed value for the moving distance (<code>distancePerFrame</code>).</p>
<pre><code class="js">Fire.Class({
    extends: Fire.Component,
    properties: {
        distancePerFrame: 1
    },
    update: function () {
        this.transform.x += this.distancePerFrame;
    }
});
</code></pre>
<p>It is reasonable. However, due to different system and platform, the framerate varies, resulting unstable moving speed of the character. Say, when every frame spends 20ms, the character moves <code>distancePerFrame</code> for 50 times per second; when every frame takes 40ms, it moves for 25 times, which is much slower. The correct way of doing this is to scale the distance by each frame’s actual duration.</p>
<pre><code class="js">Fire.Class({
    extends: Fire.Component,
    properties: {
        distancePerSecond: 50
    },
    update: function () {
        this.transform.x += this.distancePerSecond * Fire.Time.deltaTime;
    }
});
</code></pre>
<p>We set the expected distance for 1 second as <code>distancePerSecond</code>, while acquire the time spent (in second) from last frame to the present time point by <code>Fire.Time.deltaTime</code>. Multiplying the two values gets the distance per frame, and moving character using this value gives a stable speed. In fact, the result of accumulating all moved distance with 1 second equals to <code>distancePerSecond</code> exactly.</p>
<p>You should consider calculating any transition effect in game, including moving, by multiplying <code>Fire.Time.dealtaTime</code>.</p>
<h2 id="Other_Useful_Interfaces_of_Time">Other Useful Interfaces of <code>Time</code></h2><ul>
<li>Get passed seconds from the beginning of the game to now: <code>Time.time</code></li>
<li>Get the total frame count from the beginning of the game to now: <code>Time.frameCount</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Assuming a character needs to travel in a constant speed. You might figure out that every frame should use a fixed value for the moving d]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Appendix - Reserved Keywords]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/reserved-words/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/reserved-words/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>Following are variables used by Fireball-x beside of variables declared in classes. Some of them are used in uncommon situations, others are reserved for future extension. You should avoid to use them in your code.</p>
<h3 id="Global_Variables">Global Variables</h3><ul>
<li><code>Fire</code></li>
<li><code>Editor</code></li>
<li><code>FireEditor</code></li>
<li><code>PIXI</code></li>
<li><code>require</code></li>
</ul>
<h3 id="Variables_Possibly_Defined_In_Any_Object">Variables Possibly Defined In Any Object</h3><ul>
<li><code>__id__</code></li>
<li><code>__type__</code></li>
<li><code>_iN$t</code></li>
<li><code>_rawext</code></li>
</ul>
<h3 id="Variables_Possibly_Defined_In_Any_Type_or_Prototype">Variables Possibly Defined In Any Type or Prototype</h3><ul>
<li>All variables starts with <code>_attrs$</code></li>
<li><code>__classname__</code></li>
<li><code>__cid__</code></li>
</ul>
<h3 id="FireClass_Static_Variables">FireClass Static Variables</h3><ul>
<li><code>get</code></li>
<li><code>set</code></li>
<li><code>getset</code></li>
<li><code>prop</code></li>
<li><code>$super</code></li>
<li><code>__props__</code></li>
<li><code>__ctors__</code></li>
</ul>
<h3 id="FireClass_Instance_Variables">FireClass Instance Variables</h3><ul>
<li><code>_observing</code></li>
<li><code>_$erialized</code></li>
</ul>
<h3 id="Variables_In_Enumeration_Definition">Variables In Enumeration Definition</h3><ul>
<li><code>__enums__</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Following are variables used by Fireball-x beside of variables declared in classes. Some of them are used in uncommon situations, others ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tutorial - Score Text]]></title>
    <link href="http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step6/"/>
    <id>http://docs.fireball-x.com/0.4/tutorial/duang-sheep/step6/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Gain score when sheep jump over a pipe</li>
<li>Create a BitmapText component to display text in game</li>
</ul>
<hr>
<h2 id="Steps">Steps</h2><h3 id="Create_BitmapText">Create BitmapText</h3><p>To display text in game, we need to to create a <code>BitmapText</code> component. Drag <code>fonts/number1</code> asset from <code>Assets</code> view to <code>Hierarchy</code> view. This will create an entity with <code>BitmapText</code> component. Rename the entity to <code>Score</code>, and change the <code>Text</code> property in <code>BitmapText</code> component to <code>0</code>.</p>
<p><strong>Score Entity Setup</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6865000/0eff3c74-d4a4-11e4-8aaf-c5a4fb4f8f35.png" alt="000"></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6865002/11d508c0-d4a4-11e4-83c4-b7b3429e978f.png" alt="001"></p>
<h3 id="Mark_Passed_Pipes">Mark Passed Pipes</h3><p>Open <code>PipeGroup</code> script for editing. Add a variable <code>passed</code> to mark if the PipeGroup is passed. Also get the reference of the bottom pipe that sheep is about to jump over and store it in <code>bottomRenderer</code> property.</p>
<p><strong>PipeGroup.js: <code>.....</code> are parts stay unchanged</strong></p>
<pre><code class="js">var PipeGroup = Fire.Class({
  extends: Fire.Component,
  constructor: function () {
      // store the reference of current bottom pipe&#39;s renderer
      this.bottomRenderer = null;
      // if the pipe group is passed
      this.passed = false;
  },
  // properties
  properties: {.....},
  // initialization
  onEnable: function () {
      .....

      this.bottomRenderer = bottomEntity.getComponent(Fire.SpriteRenderer);
      this.passed = false;
  },
  // update
  update: function () {.....}
});
</code></pre>
<p>Open <code>PipeGroupManger</code> script for editing. Add a function to get the next PipeGroup that is not passed already. Update its <code>passed</code> property value when sheep jump over it successfully.</p>
<p><strong>PipeGroupManager.js: <code>.....</code> are parts stay unchanged</strong></p>
<pre><code class="js">var PipeGroupManager = Fire.Class({
  extends: Fire.Component,
  constructor: function () {.....},
  // properties
  properties: {.....},
  // initialization
  onLoad: function () {.....},
  // create PipeGroup entity
  createPipeGroupEntity: function () {.....},
  // get the next PipeGroup in the list that is not passed
  getNext: function () {
      for (var i = 0; i &lt; this.pipeGroupList.length; ++i) {
          var pipeGroupEntity = this.pipeGroupList[i];
          var pipeGroup = pipeGroupEntity.getComponent(&#39;PipeGroup&#39;);
          if (!pipeGroup.passed) {
              return pipeGroup;
          }
      }
      return null;
  },
  // mark the PipeGroup as passed
  setAsPassed: function (pipeGroup) {
      pipeGroup.passed = true;
  },
  // collision detection
  collisionDetection: function (sheepRect) {.....},
  // update
  update: function () {.....}
});
</code></pre>
<h3 id="Add_Score_Logic_and_Display_Update">Add Score Logic and Display Update</h3><p>Open <code>GameManager</code> script for editing, add a <code>scoreText</code> property to hold the <code>Score</code> entity we just created. Then we will add logic to handle score increase when sheep jump over a pipe.</p>
<p><strong>GameManager.js: <code>.....</code> are parts stay unchanged</strong></p>
<pre><code class="js">var Sheep = require(&#39;Sheep&#39;);
var ScrollPicture = require(&#39;ScrollPicture&#39;);
var PipeGroupManager = require(&#39;PipeGroupManager&#39;);

var GameState = Fire.defineEnum({.....});

var GameManager = Fire.Class({
    extends: Fire.Component,
    constructor: function () {.....},
    properties: {
        .....
        // reference to Score entity
        scoreText: {
            default: null,
            type: Fire.BitmapText
        }
    },
    // when game starts, initialize score value and text display
    start: function () {
        .....
        this.score = 0;
        this.scoreText.text = this.score;
    },
    // updates
    update: function () {
        switch (this.gameState) {
            case GameState.Run:
                .....
                // update score value and display
                this.updateSorce();
                break;
            default :
                break;
        }
    },
    // update score value and display
    updateSorce: function () {
        var nextPipeGroup = this.pipeGroupMgr.getNext();
        if (nextPipeGroup) {
            var sheepRect = this.sheep.renderer.getWorldBounds();
            var pipeGroupRect = nextPipeGroup.bottomRenderer.getWorldBounds();
            // when sheep&#39;s left edge passed PipeGroup&#39;s right edge
            var crossed = sheepRect.xMin &gt; pipeGroupRect.xMax;
            if (crossed) {
                // score + 1
                this.score++;
                // Update BitmapText&#39;s text property
                this.scoreText.text = this.score;
                this.pipeGroupMgr.setAsPassed(nextPipeGroup);
            }
        }
    }
});
</code></pre>
<p><strong>Final Setup</strong></p>
<p><img src="https://cloud.githubusercontent.com/assets/7564028/6865247/cf548e28-d4a6-11e4-97b3-bb50a43c37b7.png" alt="002"></p>
<hr>
<p><strong>NOTE:</strong> <a href="https://github.com/fireball-x/tutorial/commits/step-6" target="_blank" rel="external"> Step - 6 Project Snapshot for Score Text</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Goal">Goal</h2><ul>
<li>Gain score when sheep jump over a pipe</li>
<li>Create a BitmapText component to display text in game</li>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Primer]]></title>
    <link href="http://docs.fireball-x.com/0.4/wwmanual/scripting/javascript-primer/"/>
    <id>http://docs.fireball-x.com/0.4/wwmanual/scripting/javascript-primer/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This guide is based on <a href="https://www.discovermeteor.com/blog/javascript-for-meteor/" target="_blank" rel="external">A JavaScript Primer For Meteor</a></p>
</blockquote>
<h2 id="Overview">Overview</h2><p>This guide provides a set of minimal JavaScript syntax and patterns for beginner to be able to understand scripting in Fireball.</p>
<p>JavaScript is a language full of contradictions: it’s named after Java even though it doesn’t have anything to do with it, it was <a href="https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript" target="_blank" rel="external">created in 10 days</a> but is still in use 20 years later, and despite getting its fair share of criticism, it’s ubiquitous on the web.</p>
<p>If JavaScript has one thing going for it, is that it’s easy to get started with. Now don’t get me wrong: truly mastering JavaScript is a difficult task. But learning enough to get by isn’t that hard, and shouldn’t take long especially if you already have some experience with other programming languages.</p>
<p>What’s more, when building Fireball games you’ll often find yourself re-using the same patterns over and over. And as stated by the Pareto principle, learning 20% of a language should be enough to cover 80% of situations.</p>
<p>So today, let’s take a look at the absolute minimum amount of JavaScript you need to know to learn Fireball.</p>
<h2 id="Following_Along">Following Along</h2><p>Did you know that you already possessed a full-fledged JavaScript development environment? I’m talking about the very browser you’re reading this with!</p>
<p>So you can follow along with all these examples simply by typing them into your browser console. Here’s <a href="http://webmasters.stackexchange.com/a/77337" target="_blank" rel="external">a handy guide</a> on how to open it in various browsers.</p>
<p>Ready? Let’s learn some JavaScript!</p>
<h2 id="Variables">Variables</h2><p>Here’s how you declare a variable in JavaScript:</p>
<pre><code class="js">var a;
</code></pre>
<p>The var keyword lets JavaScript know that whatever comes after is a variable. Now let’s assign a value to our variable:</p>
<pre><code class="js">var a = 12;
</code></pre>
<p>Now maybe you’ve seen something like this while looking at some JavaScript code:</p>
<pre><code>a = 12;
</code></pre><p>JavaScript doesn’t seem to mind when you ommit the var keyword. So what is it good for?</p>
<p>The var keyword makes our variable local. Inside a Fireball project, this means that prefixing a variable with var will restrict its scope to the function you’re declaring it in (or the file, if you declare it outside of any function).</p>
<p>On the other hand, <strong>omitting the var keyword will make your variable available to your whole Fireball project</strong>. Sometimes that’s good, but in most case it’s better to try and avoid polluting the global scope.</p>
<h2 id="Functions">Functions</h2><p>Here’s how you declare a function in JavaScript:</p>
<pre><code class="js">var myAwesomeFunction = function (myArgument) {
    // do something
}
</code></pre>
<p>And here’s how you’d call your function:</p>
<pre><code class="js">myAwesomeFunction(something);
</code></pre>
<p>You’ll notice function declarations follow the same var something = somethingElse pattern as variable declarations.</p>
<p>As they should, since in JavaScript, functions are variables too! This means that you can do stuff like using functions as arguments for other functions:</p>
<pre><code class="js">square = function (a) {
    return a * a;
}
applyOperation = function (f, a) {
    return f(a);
}
applyOperation (square, 10); // 100
</code></pre>
<h2 id="Return">Return</h2><p>A return statement takes a value and returns this value as the result of a function. The key thing to remember here is that whatever comes after return will never get executed:</p>
<pre><code class="js">myFunction = function (a) {
    return a * 3;
    explodeComputer(); // will never get executed (hopefully!)
}
</code></pre>
<h2 id="If_Statements">If Statements</h2><p>Here’s what an If statement looks like in JavaScript:</p>
<pre><code class="js">if (foo) {
    return bar;
}
</code></pre>
<h2 id="If/Else_Statements">If/Else Statements</h2><p>Here’s what an If/Else statement looks like in JavaScript:</p>
<pre><code class="js">if (foo) {
    function1();
}
else {
    function2();
}
</code></pre>
<p>If/Else statements also have their own shorthand syntax:</p>
<pre><code class="js">foo ? function1() : function2();
</code></pre>
<p>This is particularly useful when assigning a value to a variable:</p>
<pre><code class="js">var n = foo ? 1 : 2;
</code></pre>
<p>This means “if foo is true, then set n to 1, otherwise set it to 2”.</p>
<p>Oh and for good measure, here’s an If/Else If/Else:</p>
<pre><code class="js">if (foo) {
    function1();
}
else if (bar) {
    function2();
}
else {
    function3();
}
</code></pre>
<h2 id="JavaScript_Arrays">JavaScript Arrays</h2><p>Here’s how you define an array:</p>
<pre><code class="js">a = [123, 456, 789];
</code></pre>
<p>And here’s how you access an array item (indexes start at 0):</p>
<pre><code class="js">a[1]; // 456
</code></pre>
<h2 id="JavaScript_Objects">JavaScript Objects</h2><p>Here’s how you define a JavaScript object:</p>
<pre><code class="js">myProfile = {
    name: &quot;Jare Guo&quot;,
    email: &quot;blabla@gmail.com&quot;,
    &#39;zip code&#39;: 12345,
    isInvited: true
}
</code></pre>
<p>After the object declaration (<code>myProfile = {…}</code>) comes a list of comma-separated pairs. Each pair contains a key (a string, which can optionally be enclosed in quotes if it contains any spaces) and a value (any type of JavaScript item: strings, numbers, booleans, variables, arrays, objects, and even functions).</p>
<p>You can also nest objects, and even use arrays:</p>
<pre><code class="js">myProfile = {
    name: &quot;Jare Guo&quot;,
    email: &quot;blabla@gmail.com&quot;,
    city: &quot;Xiamen&quot;,
    points: 1234,
    isInvited: true,
    friends: [
        {
            name: &quot;Johnny&quot;,
            email: &quot;blablabla@gmail.com&quot;
        },
        {
            name: &quot;Nantas&quot;,
            email: &quot;piapiapia@gmail.com&quot;
        }
    ]
}
</code></pre>
<p>Accessing an object’s property couldn’t be simpler: just use the dot notation. You can even combine it with arrays:</p>
<pre><code class="js">myProfile.name; // Jare Guo
myProfile.friends[1].name; // Nantas
</code></pre>
<p>You’ll find JavaScript objects almost everywhere in JavaScript, especially when invoking functions. For example, here’s how you define a FireClass in Fireball:</p>
<pre><code class="js">var MyComponent = Fire.Class({
    extends: Fire.Component
});
</code></pre>
<p>This <code>{extends: Fire.Component}</code> argument is an anonymous JavaScript object. With JavaScript, you’ll see that most of the time you don’t actually need to assign a name to an object (or even to a function) to make use of it.</p>
<h2 id="Anonymous_Functions">Anonymous Functions</h2><p>We’ve seen you can declare functions using the following syntax:</p>
<pre><code class="js">myFunction = function (myArgument) {
    // do something
}
</code></pre>
<p>And we’ve seen that JavaScript treats functions just like variables, letting you pass them as arguments to other functions:</p>
<pre><code class="js">square = function (a) {
    return a * a;
}
applyOperation = function (f, a) {
    return f(a);
}
applyOperation(square, 10); // 100
</code></pre>
<p>And we’ve also seen that JavaScript loves coming up with shorter ways to write things. So here’s an equivalent syntax:</p>
<pre><code class="js">applyOperation = function (f, a) {
    return f(a);
}
applyOperation(
    function(a){
      return a*a;
    },
    10
) // 100
</code></pre>
<p>Instead of defining the square function and passing it as an argument, we’re defining it inside the argument call. This is known as using an “anonymous function”, and it’s one of the most common JavaScript patterns around.</p>
<h2 id="Chaining">Chaining</h2><p>We’ve seen that you can pass parameters to functions. But there’s another syntax that you’ll often encounter for things such as array or string operations:</p>
<pre><code class="js">var myArray = [123, 456];
myArray.push(789) // 123, 456, 789
var myString = &quot;abcdef&quot;;
myString.replace(&quot;a&quot;, &quot;z&quot;); // &quot;zbcdef&quot;
</code></pre>
<p>This dot notation means “call the <code>replace</code> function on <code>myString</code> with arguments “a” and “z” and return the result”.</p>
<p>The beauty of it is that you can also chain multiple links together as long as they all return something. We won’t get into how to define chainable functions, but using them is easy enough. Just follow the <code>something.function1().function2().function3()</code> pattern.</p>
<p>Each link of the chain will take a value, apply a function to it, and then pass on its result to the next link:</p>
<pre><code class="js">var n = 5;
n.double().square(); //100
</code></pre>
<h2 id="This">This</h2><p><code>this</code> is probably one of the hardest concept to master in all of JavaScript.</p>
<p>Basically, the <code>this</code> keyword lets you access the object on which you’re currently working: just like a chameleon, <code>this</code> keeps changing based on its surroundings.</p>
<p>So instead of trying to explain <code>this</code>, let me give you two tools to help you figure things out yourself (what do you mean, I’m taking the easy way out?!).</p>
<p>The first is the good old <code>console.log()</code>, which prints any object to the browser’s console. Adding a <code>console.log(this)</code> to begin a function is often the best way to figure out what’s going on:</p>
<pre><code class="js">myFunction = function (a, b) {
    console.log(this);
    // do something
}
</code></pre>
<p>The second pattern is assigning <code>this</code> to another variable:</p>
<pre><code class="js">myFunction = function (a, b) {
    var myObject = this;
    // do something
}
</code></pre>
<p>While it might at first seem like this doesn’t accomplish anything, it lets you safely re-use <code>myObject</code> throughout your code, since unlike <code>this</code> its value won’t change depending on the context.</p>
<h2 id="Operators">Operators</h2><p><code>=</code> is the assigment operator. This means that <code>a = 12</code> means assign the value “12” to <code>a</code>.</p>
<p>If you want to compare two values, you would use <code>==</code>, as in <code>a == 12</code>.</p>
<p>JavaScript also features the <code>===</code> operator, which compares both value and type (i.e. string, integer, etc.):</p>
<pre><code class="js">a = &quot;12&quot;;
a == 12; // true
a === 12; // false
</code></pre>
<p>In most cases, you’ll want to use the <code>===</code> operator whenever comparing two values, because there aren’t that many cases where you’d want two variables to be equal in value but not in type.</p>
<p>Here’s JavaScript’s unequality operator:</p>
<pre><code class="js">a = 12;
a !== 11; // true
</code></pre>
<p>The <code>!</code> operator can also be used independently to get the opposite of a boolean value:</p>
<pre><code class="js">a = true;
!a; // false
</code></pre>
<p>An interesting consequence of the <code>!</code> operator is that it always returns a boolean value, even if what comes after is not a boolean:</p>
<pre><code class="js">a = 12;
!a; // false
</code></pre>
<p>This means that if you want to convert a variable to boolean you can just use the <code>!</code> operator twice (once to force the variable to boolean, a second time to revert the value back):</p>
<pre><code class="js">a = 12;
!!a; // true
</code></pre>
<p>Or:</p>
<pre><code class="js">a = 0;
!!a; // false
</code></pre>
<h2 id="Style">Style</h2><p>Finally, here are a few optional style rules that will make your JavaScript code cleaner:</p>
<ul>
<li>Use camelCase: write myRandomVariable, not my_random_variable.</li>
<li>Add a ; at the end of each line, even if it’s optional.</li>
<li>Separate each keyword with a space, i.e. a = b + 1, not a=b+1.</li>
</ul>
<p>You’ll find more guidelines in the (TODO).</p>
<h2 id="Putting_It_Together">Putting It Together</h2><p>So now that you’re equipped with the basics of JavaScript syntax, let’s try to put it together and understand a bit of Fireball code:</p>
<pre><code class="js">var Comp = Fire.Class({
    extends: Fire.Component,

    properties: {
        target: {
            default: null,
            type: Fire.Entity
        }
    },

    onStart: function () {
        this.target = Fire.Entity.find(&#39;/Main Player/Bip/Head&#39;);
    },

    update: function () {
        this.transform.worldPosition = this.target.transform.worldPosition;
    }
});
</code></pre>
<p>The above code defines a new component for engine, with a <code>target</code> parameter. At runtime this component will place itself at the same position as <code>target</code> entity.</p>
<p>Let’s break this down (I’ll highlight each syntax pattern as we go):</p>
<p><code>var Comp = Fire.Class({</code>: We’re diving into the <code>Fire</code> object, using <strong>dot notation</strong> to call the <code>Class()</code> function (which is itself a property of <code>Fire</code>) on an anonymous <strong>JavaScript object</strong> (<code>{}</code>) (chaining, JavaScript objects).</p>
<p><code>target: { default: null, type: Fire.Entity }</code>: This key-pair defines a <code>target</code> property. Value is an object literal, which specifies default value and type for <code>target</code>.</p>
<p><code>extends: Fire.Component</code>: This means the class inherits from <code>Fire.Component</code>，it’s a builtin class in Fireball.</p>
<p><code>onStart: function () {</code>: The key/value pair implement an instance method called onStart, the value is an <strong>anonymous function</strong>.</p>
<p><code>this.target = Fire.Entity.find(&#39;</code>: In this context, <code>this</code> corresponds to the component being created. We use <code>this.target</code> to access <code>target</code> property.</p>
<h2 id="Going_Forward">Going Forward</h2><p>This tutorial is by no means meant to replace actually learning JavaScript. But the various patterns covered here should be enough to let you understand the vast majority of Discover Fireball’s code, at least from a syntax point of view.</p>
<p>So if like me you prefer learning by doing, hopefully this should be enough to get you ready to start building Fireball games!</p>
<h2 id="JavaScript_Resources">JavaScript Resources</h2><p>If you want to learn more about JavaScript, we recommend the following ebook:</p>
<ul>
<li><a href="http://eloquentjavascript.net/" target="_blank" rel="external">Eloquent JavaScript</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/" target="_blank" rel="external">JavaScript Garden</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>This guide is based on <a href="https://www.discovermeteor.com/blog/javascript-for-meteor/" target="_blank" rel="external">A]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Input]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/input/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/input/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<pre><code>User input APIs introduced in this chapter is not the final version. They will be upgraded gradually in a planned future.
</code></pre><h2 id="Overview">Overview</h2><p>Fireball currently adopts a web-dev-like mechanism based on event registering for user input handling. There are two ways of registering: global register and Entity register. Detectable inputs include keyboard, mouse and touch, where touch input is implemented by mouse simulation, so would be detected as long as mouse input events are registered.</p>
<h2 id="Global_Register">Global Register</h2><p>Global registered methods response to global input events in the game. To make such a method work, it has to be registered and unregistered. The following code listens to mouse button down event. Method <code>jump</code> is called once the event happens, no matter which part of the screen is pressed.</p>
<pre><code class="js">var Sheep = Fire.Class({
    extends: Fire.Component,
    constructor: function () {
        // Define the event callback method, and save it to the bindedMouseDown variable for unregistering later.
        this.bindedMouseDown = this.onMouseDown.bind(this);
    },
    onMouseDown: function (event) {
        this.jump();
    },
    onLoad: function () {
        // Register the callback
        Fire.Input.on(&#39;mousedown&#39;, this.bindedMouseDown);
    },
    onDestroy: function () {
        // Unregister the callback in avoid of memory leaking
        Fire.Input.off(&#39;mousedown&#39;, this.bindedMouseDown);
    }
});
</code></pre>
<p>Here we use <code>Fire.Input.on</code> to register a callback. The first parameter indicates the event type. For more event types please refer to <a href="/manual/scripting/input-events">Input Events</a>. The second one is the callback method, which usually needs to bind <code>this</code> object with <code>bind</code> method, or the <code>this</code> variable within the callback method would be <code>null</code>.</p>
<p>When unregistering, the parameter event type and callback method must be exactly identical as the ones during registering.</p>
<h2 id="Entity_Register">Entity Register</h2><p>Entity register is to listen to the mouse/touch input events that happen on a single entity. An entity requires renderer components (e.g. <code>SpriteRenderer</code>) for event listening. The following code listens to all mouse input events happening on the entity to which the component attached. <code>jump</code> method is called only when mouse button is pressed <strong>on</strong> the entity.</p>
<pre><code class="js">var Sheep = Fire.Class({
    extends: Fire.Component,
    constructor: function () {
        // Define the event callback method, and save it to the bindedMouseDown variable for unregistering later.
        this.bindedMouseDown = this.onMouseDown.bind(this);
    },
    onMouseDown: function (event) {
        this.jump();
    },
    onLoad: function () {
        // Register callback
        this.entity.on(&#39;mousedown&#39;, this.bindedMouseDown);
    },
    onDestroy: function () {
        // Unregister callback
        this.entity.off(&#39;mousedown&#39;, this.bindedMouseDown);
    }
});
</code></pre>
<p>The only difference between entity register and global register is the event handlers are registered on a particular entity, not on <code>Fire.Input</code>.</p>
<p>Like other entity events, input events is dispatched through the entity hierarchy as well in certain route, such as Bubble mechanism.</p>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>User input APIs introduced in this chapter is not the final version. They will be upgraded gradually in a planned future.
</code>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Appendix - Input Events]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/input-events/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/input-events/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Mouse_Events(Triggered_by_touching_as_well)">Mouse Events(Triggered by touching as well)</h3><table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:center">Event Type</th>
<th style="text-align:left">Description</th>
<th style="text-align:center">Allow Bubbling?</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">click</td>
<td style="text-align:center"><a href="/api/classes/MouseEvent">Fire.MouseEvent</a></td>
<td style="text-align:left">Single clicking</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:left">dblclick</td>
<td style="text-align:center"><a href="/api/classes/MouseEvent">Fire.MouseEvent</a></td>
<td style="text-align:left">Double clicking</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:left">mousedown</td>
<td style="text-align:center"><a href="/api/classes/MouseEvent">Fire.MouseEvent</a></td>
<td style="text-align:left">Pressing mouse button</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:left">mouseup</td>
<td style="text-align:center"><a href="/api/classes/MouseEvent">Fire.MouseEvent</a></td>
<td style="text-align:left">Releasing mouse button</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:left">mousemove</td>
<td style="text-align:center"><a href="/api/classes/MouseEvent">Fire.MouseEvent</a></td>
<td style="text-align:left">Moving mouse cursor</td>
<td style="text-align:center">true</td>
</tr>
</tbody>
</table>
<h3 id="Keyboard_Events">Keyboard Events</h3><table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:center">Event Type</th>
<th style="text-align:left">Description</th>
<th style="text-align:center">Allow Bubbling?</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">keydown</td>
<td style="text-align:center"><a href="/api/classes/KeyboardEvent">Fire.KeyboardEvent</a></td>
<td style="text-align:left">Pressing keys</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td style="text-align:left">keyup</td>
<td style="text-align:center"><a href="/api/classes/KeyboardEvent">Fire.KeyboardEvent</a></td>
<td style="text-align:left">Releasing keys</td>
<td style="text-align:center">true</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Mouse_Events(Triggered_by_touching_as_well)">Mouse Events(Triggered by touching as well)</h3><table>
<thead>
<tr>
<th style="text-al]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create and Destroy]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/create-destroy-entities/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/create-destroy-entities/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>It is inevitable to create and destroy Entities by script in dynamic scene building.</p>
<h2 id="Creating_An_Empty_Entity">Creating An Empty Entity</h2><p>To add an empty Entity in the scene only needs to call <code>new Entity()</code>:</p>
<pre><code class="js">    start: function () {
        for (var i = 0; i &lt; 10; i++) {
            var name = &#39;Bullet &#39; + i;
            var newBulletEntity = new Entity(name);
        }
    }
</code></pre>
<h2 id="Copying_An_Entity"><a name="instantiate"></a>Copying An Entity</h2><p><code>Fire.instantiate</code> is for creating a copy of a specified Entity. All child objects and Components are duplicated as well:</p>
<pre><code class="js">var Comp = Fire.Class({
    extends: Fire.Component,

    properties {
        bulletPrefab: {
            default: null,
            type: Fire.Entity
        },
    },

    // use this for initialization
    start: function () {
        for (var i = 0; i &lt; 10; i++) {
            var newBulletEntity = Fire.instantiate(this.bulletPrefab);
        }
    },

    // called every frame
    update: function () {
        // ...
    };
});
</code></pre>
<h2 id="Destroying_An_Entity">Destroying An Entity</h2><p>To destroy an Entity requires the <code>destroy</code> method:</p>
<pre><code class="js">    lateUpdate: function () {
        if (this.hp &lt;= 0) {
            this.entity.destroy();
        }
    }
</code></pre>
<p>The code above destroys the whole Entity to that the Component belongs. Actually, the Entity will not be destroyed until the frame ends, which means it’s still available until then. Once an Entity is destroyed, all child objects and attached Components are destroyed as well.</p>
<h2 id="Adding_A_Component">Adding A Component</h2><p>Beside of the Inspector Panel, scripts are able to add Components as well:</p>
<pre><code class="js">    start: function () {
        for (var i = 0; i &lt; 10; i++) {
            var name = &#39;Bullet &#39; + i;
            var newBulletEntity = new Entity(name);

            var bullet = newBulletEntity.addComponent(&quot;MyBullet&quot;);
        }
    }
</code></pre>
<p>The code above creates an Entity, and adds a Component called “MyBullet” afterwards (MyBullet.js is required in the project). Or, you can pass the type of Component into <code>addComponent</code> as parameter:</p>
<pre><code class="js">    start: function () {
        // ...
        var bullet = newBulletEntity.addComponent(Fire.SpriteRenderer);
    }
</code></pre>
<h2 id="Removing_A_Component">Removing A Component</h2><p>To remove a Component by script is to call its <code>destroy()</code>, which gets exactly the same result as clicking remove button in the Inspector Panel.</p>
<pre><code class="js">    start: function () {
        var bullet = this.getComponent(&quot;MyBullet&quot;);
        bullet.destroy();
    }
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>It is inevitable to create and destroy Entities by script in dynamic scene building.</p>
<h2 id="Creating_An_Empty_Entity">Creating An Em]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Component Overview]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/component/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/component/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>Most features in Fireball are provided by Components, the entrance of Fire-shell script execution. Various types of gameplay can be implemented by Components, such as entity controlling, event broadcasting, property modifying and user input handling.</p>
<p>Same as Fireball itself, Components run in Javascript. JavaScript is a quick-start programming language. You might want to check the <a href="/manual/scripting/javascript-primer">JavaScript Primer</a> for basics. On the other hand, other languages are supported by Fireball, such as CoffeeScript and TypeScript, which can be smoothly compiled to JavaScript.</p>
<h2 id="Creating_Scripts">Creating Scripts</h2><p>Different from other kinds of resources, scripts are normally created in Fireball directly, which can be done by right-clicking your mouse button in the Assets panel, or, clicking the adding button in the upper-left corner and choose <code>Create &gt; New Script</code>.</p>
<p>Note:</p>
<ul>
<li>The file name will be used for the Component class name and the references among scripts, so it is suggested to rename your script as soon as they are created.</li>
<li>Scripts with same file names are not allowed.</li>
</ul>
<h2 id="Getting_Started_with_Scripts">Getting Started with Scripts</h2><p>Double clicking a script in Fireball will open it with the built-in code editor. Let’s create a script named <code>Player.js</code> and open it. The default code should look like this:</p>
<pre><code class="js">// Player.js

var Comp = Fire.Class({
    extends: Fire.Component,

    // use this for initialization
    start: function () {

    },

    // called every frame
    update: function () {

    }
});
</code></pre>
<p>The script above is recognized in Fireball because it inherits <code>Fire.Component</code>, the base class for all Components. Defining a class that inherits <code>Fire.Component</code> can be considered as creating a Component template. Once this script is attached to an entity, the template will be used to create a Component instance.</p>
<h2 id="Getting_Started_with_Components">Getting Started with Components</h2><p><code>Fire.Class({...})</code> defines a class, in which <code>extends: Fire.Component</code> suggests the inheritance (or extension) of the <code>Fire.Component</code> class. Fireball sets the class name to <code>Player</code> automatically since Components use the script file name as its class name, and the script is named as <em>Player.js</em>.</p>
<p><code>var Comp</code> declares a variable, and is assigned to the class returned by <code>Fire.Class</code> afterwards. It is a normal JavaScript local variable that holds the reference of a class, and can be named as you please without considering the actual class name <code>Player</code>. Actually, you don’t even need to declare this variable if the returned class of <code>Fire.Class</code> won’t be used further in this script (as what we’ve done here).</p>
<p><code>update: function () {...};</code> is for defining the <strong>update</strong> callback function. The <code>update</code> function is called by Fireball before the rendering of every frame. Actions that can be done in <code>update</code> function are often those continuously happen in gameplay, like triggering behaviours, handling interactions, etc.</p>
<p><code>start: function () {...};</code> is for defining the <strong>start</strong> callback function. The <code>onStart</code> function is called by Fireball before the first <code>update</code> call. You can put your initialization code into <code>start</code>.</p>
<p>Note:</p>
<ul>
<li>We will use <strong>FireClass</strong> to refer to the types defined by <code>Fire.Class</code>. The only difference between Components and FireClasses is that the class names of Components are retrieved automatically from their scripts. Further details can be learned from <a href="/manual/scripting/class">Define Class</a>.</li>
<li>For experienced users, we suggest to put logical processing code into Fireball callbacks (e.g. <code>start</code>). Although constructors are perfectly legal to define, it’d be better to use them for member variable declaring.</li>
</ul>
<h2 id="Attaching_to_Entity">Attaching to Entity</h2><p>As mentioned, scripts are templates of Component definition. Code inside won’t be executed until an instance is created in an entity. To do that, please drag the script from the Asset Panel to the Inspector Panel that is currenly presenting the entity properties (i.e. you’ll need to choose the desire entity first, in the Hierarchy Panel or the Scene Panel). Or, you can click the adding button in the Inspector Panel and select your script in the sub-menu of <code>Scripts</code>. Once done by either way, your <code>Player</code> component will be attached to the entity and look like the same as other Fireball built-in Components.</p>
<p>The Component will be executed as soon as you click Play to run the game. It can be verified by adding some code in <code>start</code>:</p>
<pre><code class="js">// use this for initialization
start: function () {
    Fire.log(&#39;Hello Fireball!&#39;);
}
</code></pre>
<p><code>Fire.log</code> is a useful function to print log information to Fireball Console Panel. Run the game again, and you’ll see <code>Hello Fireball!</code> in the Console.</p>
<h2 id="Showing_Properties_in_Inspector"><a name="show-in-inspector"></a>Showing Properties in Inspector</h2><p>It is possible to check and edit Component properties outside the code, including the one you just created, in Fireball Inspector Panel.</p>
<pre><code class="js">// Player.js

var Player = Fire.Class({
    extends: Fire.Component,

    properties {
        playerName: &#39;&#39;,
    },

    // use this for initialization
    start: function () {
        Fire.log(&quot;My name is&quot;, this.playerName);
    },

    // called every frame
    update: function () {
        // ...
    };
});
</code></pre>
<p>The script will add an input control in the Inspector for <code>playerName</code>. You might be glad to know that the Inspector will display the camel naming styled <code>playerName</code> as a more readable name: <code>Player Name</code>.</p>
<p><img src="/manual/scripting/component/player-name-in-inspector.png" alt="player-name-in-inspector"></p>
<p>Try to change <code>Player Name</code> and run the game. In our example, the Console will print “My name is Duang Duang”. In fact, Fireball allows you to change properties in run-time, which is quite useful for debugging. After stopping, property values will be reset to those before game running, which means that you can modify and test game objects during game running without worrying about ruining your unsaved work.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Most features in Fireball are provided by Components, the entrance of Fire-shell script execution. Various types of gameplay can be imple]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Component Callbacks]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/component/callbacks/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/component/callbacks/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>Fireball calls certain Component methods periodically. Once Components implements them, these methods are registered as <strong>callbacks</strong> in Fireball. Callbacks are called during game process only in particular time spans, or when particular game events happen. We’ve discussed <code>start</code> (called before the first <code>update</code> calling) and <code>update</code> (called before every frame’s refresh), and there are lots of other callbacks in Fireball. This chapter will introduce some of commonly used ones. For a full list of callbacks, please refer to Component API documentation.</p>
<p>Please Note:</p>
<ul>
<li>When a callback happens, Fireball gives game logic control to the Component until the callback method returns. Fireball may be stuck if the callback method is overly time consuming.</li>
</ul>
<h2 id="Periodical_Callbacks">Periodical Callbacks</h2><p>A key point of game developement is to update object’s behaviour, status and transform before rendering every frame. Such update operations are often handled in <code>update</code> callback.</p>
<pre><code class="js">    update: function () {
        this.transform.translate(new Fire.Vec2(0, Fire.Time.deltaTime * 40));
    }
</code></pre>
<p><code>update</code> executes before rendering. What if we need to do something after rendering, or after all Components’ <code>update</code>? What we are looking for is <code>lateUpdate</code> callback.</p>
<pre><code class="js">    lateUpdate: function () {
        this.transform.worldPosition = this.target.transform.worldPosition;
    }
</code></pre>
<h2 id="Initialization_Callbacks">Initialization Callbacks</h2><p>Some data doesn’t require being calculated repeatly in every frame, which can be calculated once for all when a Component executes for the first time, and then save the result. Initializations like this are often dealt with in <code>onLoad</code> or <code>start</code>. <code>onLoad</code> is called when the scene owning the Component is loaded, while <code>start</code> before the component’s first activation, aka its first <code>update</code>. In terms of that, <code>start</code> of any Component is called sequantially after all Component’s <code>onLoad</code>.</p>
<pre><code class="js">var Comp = Fire.Class({
    extends: Fire.Component,

    properties: {
        target: {
            default: null,
            type: Fire.Entity
        }
    },

    start: function () {
        this.target = Fire.Entity.find(&#39;/Main Player/Bip/Head&#39;);
    },

    update: function () {
        this.transform.worldPosition = this.target.transform.worldPosition;
    }
});
</code></pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>Fireball calls certain Component methods periodically. Once Components implements them, these methods are registered as <strong>callbacks]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Component Access]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/component/access/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/component/access/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Controlling_By_Script">Controlling By Script</h2><p>Components can be modified in the Inspector Panel. Say, changing the <code>position</code> of <code>Transform</code> component will changes the attached entity’s position, and a different <code>Color</code> value of <code>SpriteRenderer</code> component determines in which color the entity is rendered. But such controlling can go further by script. The difference between two controlling methods is that script controlling is able to make a transition to the change, by modifying properties continuously during a time span. Scripts also response to players’ input, create or destroy Components and Entities, which implements all kinds of gameplay logic.<br>To make them happen, we’ll need to talk about how to access Entities and Components in a script.</p>
<h2 id="Accessing_Attached_Entity">Accessing Attached Entity</h2><p>Retrieving the Entity that a Component is attached to is a common action. All need to be done is to access the <code>this.entity</code> variable:</p>
<pre><code class="js">    start: function () {
        var myName = this.entity.name;
        Fire.log(&#39;starting&#39;, myName);
    }
</code></pre>
<h2 id="Accessing_Components">Accessing Components</h2><p>Accessing other Components attached to the same Entity is one of the easiest and most commly used action.</p>
<p>As mentioned in the previous chapter, a Component is merely an instance of the class. So step one, get the object reference. What you need is the Component interface <code>getComponent</code>, which returns the Component instance, attached to the Entity, of specified type. Usually this reference to instance is saved in a variable, which can be used for accessing any property in the Component.</p>
<pre><code class="js">    start: function () {
        var sr = this.getComponent(Fire.SpriteRenderer);

        // Change the color of the sprite&#39;s renderer
        sr.color = Fire.Color.red;
    }
</code></pre>
<p><code>Fire.SpriteRenderer</code> is a Fireball built-in Component. Alternatively, string-formed class name is also acceptable as the parameter:</p>
<pre><code class="js">    start: function () {
        var sr = this.getComponent(&quot;Fire.SpriteRenderer&quot;);

        // ...
    }
</code></pre>
<p>In fact, you can call the member function <code>getComponent</code> of any Entity object:</p>
<pre><code class="js">    start: function () {
        var transform = playerEntity.getComponent(Fire.Transform);

        // Rotate the transform around world position (10, 10)
        transform.rotateAround(Fire.v2(10, 10), 90);
    }
</code></pre>
<p><code>Transform</code>, the most common Component, is for controlling an Entity’s position, rotation and scaling in the scene. Both <code>Entity.transform</code> and <code>Component.transform</code> can get you the <code>Transform</code>. In our example above, code can be simpler:</p>
<pre><code class="js">    start: function () {
        playerEntity.transform.rotateAround(Fire.v2(10, 10), 90);
    }
</code></pre>
<p><code>getComponent</code> returns <code>null</code> if the specified Component doesn’t to an Entity. Accessing <code>null</code> will throw the <code>TypeError</code> exception in run-time.</p>
<h2 id="Accessing_Other_Objects">Accessing Other Objects</h2><p>Merely accessing Entities’ Components is usually not enough - scripts needs to do interops often. For instance, a cannon aiming the player character automatically requires continuing accessing the character’s position. That’s why Fireball has several ways to access other objects.</p>
<h3 id="Setting_By_Inspector">Setting By Inspector</h3><p>The easiest way is to set objects needed in advance in the Inspector Panel. It only needs an Entity typed property declared in script.</p>
<pre><code class="js">// Cannon.js

var Comp = Fire.Class({
    extends: Fire.Component,
    properties: {
        // 声明一个 player 属性，类型为 Entity
        player: {
            default: null,
            type: Fire.Entity
        }
    }
});
</code></pre>
<p>The code declares a <code>player</code> property in <code>properties</code>, having <code>null</code> as the default value, and specifies the object type as <code>Fire.Entity</code>. Consider it as the statement <code>public Fire.Entity player = null;</code> in other languages. This property look like this in the Inspector Panel:</p>
<p><img src="/manual/scripting/component/access/player-in-inspector-null.png" alt="player-in-inspector-null"></p>
<p>Then you can drag any Entity from the Hierarchy Panel to the Inspector Panel, to set it as the <code>player</code> property of the editing Component instance.</p>
<p><img src="/manual/scripting/component/access/player-in-inspector.png" alt="player-in-inspector"></p>
<p><code>player</code> can be accessed directly as:</p>
<pre><code class="js">var Comp = Fire.Class({
    extends: Fire.Component,
    properties: {
        player: {
            default: null,
            type: Fire.Entity
        }
    },
    start: function () {
        // 显示 player 的名字
        Fire.log(this.player.name);
    }
});
</code></pre>
<p>Here is an exciting feature: if you declare a property as a Component type, and drag an Entity into the Inspector Panel, the Component of the specified type in that Entity, instead of the Entity itself, will be assigned to the target property.</p>
<pre><code class="js">var Comp = Fire.Class({
    extends: Fire.Component,
    properties: {
        targetTransform: {
            default: null,
            type: Fire.Transform
        }
    },
});
</code></pre>
<p>It is the most convenient way to connect objects by properties. You can even set the property’s default value to <code>[]</code>, an empty array, instead of <code>null</code>. Array makes it possible to assign multiple objects in the Inspector Panel.</p>
<p>However drag &amp; drop would be not good enough if accessing objects needs to be done in run-time. That’s why you’ll need the find object function described below.</p>
<h3 id="Finding_Child_Objects">Finding Child Objects</h3><p>Sometimes, multiple game objects of a same category, such as turrets, enemies and FXs, exist in the scene, and are managed altogether by a global script. Dragging and dropping every one of them into the Inspector Panel would be dull and stupid. A better practice is to gather them as child objects of a single parent, and accessing them via the parent.</p>
<pre><code class="js">// CannonManager.js
var Comp = Fire.Class({
    extends: Fire.Component,

    constructor: function () {
        this.cannons = [];
    },

    properties: {
        targetTransform: {
            default: null,
            type: Fire.Transform
        }
    },

    start: function () {
        this.cannons = this.entity.getChildren();
    }
});
</code></pre>
<p><code>getChildren</code> is an Entity’s member function to get an array containing all child Entities.<br>It is possible to get a particular child by name as well, by calling an Entity’s <code>find</code> function.</p>
<pre><code class="js">this.entity.find(&#39;Main Cannon&#39;);
</code></pre>
<h3 id="Global_Finding_By_Name">Global Finding By Name</h3><p>The static function <code>Fire.Entity.find</code> allows you to find a particular Entity in the whole scene.</p>
<pre><code class="js">// CannonManager.js
var Comp = Fire.Class({
    extends: Fire.Component,

    constructor: function () {
        this.player = null;
    },

    start: function () {
        this.player = Fire.Entity.find(&#39;/Main Player&#39;);
    }
});
</code></pre>
<p>Please note:</p>
<ul>
<li><code>find</code> can be an instance function or a static one. Instance function version is for finding a child object, while static function looks for the object globally, i.e. from the root of the scene and traverse all children until a value can be returned.</li>
<li>The find path should not start with <code>/</code> when looking for child objects, while it is essential to have <code>/</code> when doing global finding.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Controlling_By_Script">Controlling By Script</h2><p>Components can be modified in the Inspector Panel. Say, changing the <code>posit]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Define Class]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/class/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/class/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<pre><code>All **Note** parts are advanced skills, which can be skipped if you are a beginner.
</code></pre><p><code>Fire.Class</code> declares classes in Fireball. We call classes declared by <code>Fire.Class</code> as <strong>FireClass</strong>, in distinction from the rest classes in JavaScript. Comparing with other class systems in JavaScript, FireClass is highly extendable with massive metadata.</p>
<h2 id="Overview">Overview</h2><h3 id="Creating_FireClass">Creating FireClass</h3><p>A class is created by calling <code>Fire.Class</code> method, passing in a prototype object, and setting the type parameter by a key-value pair.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        name: &#39;Sprite&#39;
    });
</code></pre>
<p>The code above assigns the created class to <code>Sprite</code> variable, while using <code>name</code> parameter for setting class name. Class names are for serialization, and can be ignored usually.<br>The `{name: ‘Sprite’}’ object, in our example, will be referred as a <strong>Prototype Object</strong> in this chapter for simplification. This chapter is mainly about how to define prototype objects.</p>
<h3 id="Creating_Object">Creating Object</h3><p>An object is created by <code>new</code> since FireClass is a JavaScript constructor in essence.</p>
<pre><code class="js">    var obj = new Sprite();
</code></pre>
<h3 id="Constructor">Constructor</h3><p>Specified constructor is called during the creation of each instance if <code>constructor</code> is defined in the prototype object. <strong>Construction parameters</strong> are <strong>NOT</strong> allowed in FireClass constructors.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            console.log(this instanceof Sprite);    // true
        }
    });
    var obj = new Sprite();
</code></pre>
<h3 id="Testing_Type">Testing Type</h3><p><code>instanceof</code> tests an object’s type:</p>
<pre><code class="js">    console.log(obj instanceof Sprite);     // true
</code></pre>
<p><strong>Note</strong></p>
<ul>
<li>Class names can be ignored if serialization is unnecessary. Class names can be any string and must be distinct. Use <code>Fire.getClassName</code> to get class name, and <code>Fire.getClassByName</code> to look for a particular class.</li>
<li>For professional developers who need to use construction parameters, they can be retrieved from <code>arguments</code> in <code>constructor</code>. In this case, serialization requires the class is able to <code>new</code> an instance with default parameter values.</li>
</ul>
<h2 id="Members">Members</h2><h3 id="Instance_Variables">Instance Variables</h3><p>Instance variables should be declared in the constructor.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            // Declare instance variables and assign default values
            this.url = &quot;&quot;;
            this.id = 0;
        }
    });
    var obj = new Sprite();
    // Assignment
    obj.url = &#39;img/fb.png&#39;;
    obj.id = 1;
</code></pre>
<h3 id="Instance_Methods">Instance Methods</h3><p>Instance methods are defined in the prototype object.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            // ...
        },
        // Defining an instance method named &quot;load&quot;
        load: function () {
            // load this.url
        };
    });
    var obj = new Sprite();
    // Call the instance method
    obj.load();
</code></pre>
<h3 id="Static_Variables_and_Static_Methods">Static Variables and Static Methods</h3><p>Static class variables and methods can be added directly to a defined Class:</p>
<pre><code class="js">    var Sprite = Fire.Class({ ... });

    // Declaring a static variable
    Sprite.count = 0;
    // Defining a static method
    Sprite.getBounds = function (spriteList) {
        // ...
    };
</code></pre>
<p>Or, to be defined in the <code>statics</code> of a prototype object:</p>
<pre><code class="js">    var Sprite = Fire.Class({
        statics: {
            // Declaring a static variable
            count: 0,
            // Defining a static method
            getBounds: function (spriteList) {
                // ...
            }
        }
    });
</code></pre>
<p><strong>The complete example code is as below: </strong></p>
<pre><code class="js">    var Sprite = Fire.Class({
        name: &#39;Sprite&#39;,
        constructor: function () {
            // Declare instance variables and assign default values
            this.url = &quot;&quot;;
            this.id = 0;
        },
        // Defining an instance method named &quot;load&quot;
        load: function () {
            // load this.url
        };
    });
    // Instantiation
    var obj = new Sprite();
    // Accessing instance variable
    obj.url = &#39;sprite.png&#39;;
    // Calling instance method
    obj.load();

    // Declaring a static variable
    Sprite.count = 0;
    // Defining a static method
    Sprite.getBounds = function (spriteList) {
        // ...
    };

    // Calling static method
    Sprite.getBounds([obj]);
</code></pre>
<p><strong>Note</strong></p>
<ul>
<li><p>It is suggested to use “_” as naming prefix for <strong>private</strong> members.</p>
<pre><code class="js">  var Sprite = Fire.Class({
      name: &#39;Sprite&#39;,
      constructor: function () {
          // Private instance variable
          this._myData = 0;
      },
      // Private instance method
      _load: function () {
          // ...
      };
  });
  // Private class variable
  Sprite._list = [];
</code></pre>
</li>
<li><p><strong>Private</strong> static members can be implemeted by closure.</p>
<pre><code class="js">  // Private static method
  var doLoad = function (sprite) {
      // do load ...
  };
  // Private static variable
  var url = &#39;foo.png&#39;;

  var Sprite = Fire.Class({
      load: function () {
          // Calling local scoped method
          doLoad(this, url);
      };
  });
</code></pre>
</li>
<li><p>“Instance members” include both member variables and member methods.</p>
</li>
<li>“Static members” include both static variables and static methods.</li>
<li>The implement of static variable inheritance is to assign shallow copies of base class static variables to inherit class.</li>
</ul>
<h2 id="Inheritance">Inheritance</h2><h3 id="How_To_Declare">How To Declare</h3><p>To inherit, define prototype object’s <code>extends</code> as the base class:</p>
<pre><code class="js">    // define base class
    var Node = Fire.Class();

    // define sub class
    var Sprite = Fire.Class({
        extends: Node
    });

    // test
    var obj = new Sprite();
</code></pre>
<p><code>instanceof</code> can also test if an object inherits from a specified base class:</p>
<pre><code class="js">    var sub = new Sprite();
    console.log(sub instanceof Node);       // true
    var base = new Node();
    console.log(base instanceof Sprite);    // false
</code></pre>
<h3 id="Constructor_of_Base_Class">Constructor of Base Class</h3><p>Please note that no matter a constructor is provided in a inherited class, the constructor of its base class is always called before inherited class’s instantiation.</p>
<pre><code class="js">    var Node = Fire.Class({
        constructor: function () {
            this.name = &quot;node&quot;;
        }
    });
    var Sprite = Fire.Class({
        extends: Node,
        constructor: function () {
            // Consturctor of base class is called already, so this.name has been initialized.
            console.log(this.name);    // &quot;node&quot;
            // Reassigning this.name
            this.name = &quot;sprite&quot;;
        }
    });
    var obj = new Sprite();
    console.log(obj.name);    // &quot;sprite&quot;
</code></pre>
<h3 id="Overriding">Overriding</h3><p>All instance methods are virtual methods, and can be overrided in its inherited classes:</p>
<pre><code class="js">    var Node = Fire.Class({
        getName: function () {
            return &quot;node&quot;;
        }
    });
    var Sprite = Fire.Class({
        getName: function () {
            return &quot;sprite&quot;;
        }
    });
    var obj = new Sprite();
    console.log(obj.getName());    // &quot;sprite&quot;
</code></pre>
<p>To call the base class’s method, it has to be called through the prototype of base class, by <code>call</code> or <code>apply</code>:</p>
<pre><code class="js">    var Node = Fire.Class({
        getName: function () {
            return &quot;node&quot;;
        }
    });
    var Sprite = Fire.Class({
        getName: function () {
            var baseName = Node.prototype.getName.call(this);
            return baseName + &quot;&gt;sprite&quot;;
        }
    });
    var obj = new Sprite();
    console.log(obj.getName());    // &quot;node&gt;sprite&quot;
</code></pre>
<p>You can use <code>Fire.isChildClassOf</code> to test the inheritance between two classes:</p>
<pre><code class="js">    var Texture = Fire.Class();
    var Texture2D = Fire.Class({
        extends: Texture
    });
    console.log(Fire.isChildClassOf(Texture2D, Texture));   // true
</code></pre>
<p>Please note that both parameters have to be class constructors (i.e. prototype objects). <code>isChildClassOf</code> returns <code>true</code> if two class are equal.</p>
<p><strong>Note</strong></p>
<ul>
<li>You can use the static variable <code>$super</code> to access base class.</li>
<li>All instance members and static members are inherited by the inherited class.</li>
<li><p>In case there are members that shouldn’t be inherited, declare them with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a>:</p>
<pre><code class="js">      Object.defineProperty(Sprite, &#39;getBounds&#39;, {
          value: function (spriteList) {
              // do get bounds ...
          },
          enumerable: false
      });
</code></pre>
</li>
<li>If the original JavaScript inheritance is required, i.e. both the base class and inherited class are not FireClass, implement it by <code>Fire.JS.extend</code> method.</li>
</ul>
<h2 id="Properties">Properties</h2><h3 id="Defining_and_Accessing_Property">Defining and Accessing Property</h3><p>Properties are special instance members, which can be shown in the Inspector Panel and serialized. Properties are not defined in constructor, but in the <code>properties</code> dictionary of prototype object.</p>
<p><strong>Here we define a playerName property in Player class: </strong></p>
<pre><code class="js">    var Player = Fire.Class({
        extends: Fire.Component,

        properties {
            playerName: {
                default: &#39;Jare&#39;
            }
        }
    });
</code></pre>
<p>The example above was also used in the <a href="/manual/scripting/component#show-in-inspector">Component Overview</a> chapter. Defining like this makes <code>playerName</code> shown in the Inspector Panel for storing user’s value.</p>
<p>The <code>default</code> attribute is for declaring the default value of a property. In our example, it tells the compiler that the value is a string as well. <code>default</code> can take parameters of any type, however it’s only used when the object is created for the first time. A deserialized object uses the stored value when serialized, so might not be the default value.</p>
<p><strong>Properties are instance members in essence, so can be accessed like:</strong></p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            console.log(this.width);    // Read the default width
        },

        properties: {
            width: {
                default: 128
            },
        },

        getWidth: function () {
            return this.width;
        }
    });
</code></pre>
<p>Properties are defined before the constructor is called, so they are able to be accessed or reassigned in the constructor.</p>
<h3 id="Property_Attributes">Property Attributes</h3><p>Multiple attributes can be assgined to a property, to determine how the property is displayed in the Inspector Panel, or the way it’s serialized.</p>
<pre><code class="js">    properties {
        score: {
            default: 0,
            type: Fire.Integer,
            tooltip: &#39;The score of player&#39;
        }
    }
</code></pre>
<p>The code above constrains user can only input integer value for <code>score</code> in the Inspector Panel, with a tip shown when mouse hovering on the input control.</p>
<p>Here are some useful parameters. For more details please refer to the <a href="/manual/scripting/attributes">Property Attributes</a> chapter.</p>
<ul>
<li>type: Constrains the value type.</li>
<li>visible: Hide the property in the Inspector Panel if set to <code>false</code>.</li>
<li>serializable: Don’t serialize the property if set to <code>false</code>.</li>
<li>displayName: Show the value text as the label for the property in the Inspector Panel.</li>
<li>tooltip: Add a tooltip to the property in the Inspector Panel.</li>
<li>multiline: Use multi-line text input control in the Inspector Panel.</li>
</ul>
<h4 id="visible_Attribute"><a name="visible参数"></a><code>visible</code> Attribute</h4><p>Whether a property is shwon in the Inspector Panel depends on, by default, if the property name starts with a “_”(underscore). If so, the property will not be seen in the Inspector Panel, vice versa.</p>
<p>To make such a property visible in the Inspector Panel, set the <code>visible</code> attribute to <code>true</code>:</p>
<pre><code class="js">    properties {
        _id: {
            default: 0,
            visible: true
        }
    }
</code></pre>
<p>Or to hide it, set <code>visible</code> to <code>false</code>:</p>
<pre><code class="js">    properties {
        id: {
            default: 0,
            visible: false
        }
    }
</code></pre>
<h4 id="serializable_Attribute"><a name="serializable"></a><code>serializable</code> Attribute</h4><p>By default properties will be serialized. Set <code>serializable: false</code> for prevention.</p>
<pre><code class="js">    temp_url: {
        default: &#39;&#39;,
        serializable: false
    }
</code></pre>
<h4 id="type_Attribute"><a name="type"></a><code>type</code> Attribute</h4><p>It would be necessary to declare the type of value explicitly, by setting <code>type</code> attribute, when <code>default</code> value is not self-explained enough to tell the type:</p>
<ul>
<li><p>When <code>default</code> is <code>null</code>,  set <code>type</code> to a class type (constructor) to make the property assignable in the Inspector Panel.</p>
<pre><code class="js">      enemy: {
          default: null,
          type: Fire.Entity
      }
</code></pre>
</li>
<li>When <code>default</code> is a Number type, set <code>type</code> to <code>Fire.Integer</code> to declare the value as an integer, which makes it’s not possible to input decimal in the Inspector Panel.<pre><code class="js">      score: {
          default: 0,
          type: Fire.Integer
      }
</code></pre>
</li>
<li>Setting <code>type</code> as an enumerative type makes the Inspector Panel show an enumerator combobox.<pre><code class="js">      wrap: {
          default: Fire.Texture.WrapMode.Clamp,
          type: Fire.Texture.WrapMode
      }
</code></pre>
</li>
<li>If <code>default</code> is an <strong>array</strong><code>[]</code>, the <code>type</code> attribute can be assgined with one of these values: constructor, <code>Fire.Integer</code>, enumerator, <code>Fire.Float</code>, <code>Fire.Boolean</code>, or <code>Fire.String</code>. This creates the value type constraint for each elements in the array.<pre><code class="js">      nameList: {
          default: [],
          type: Fire.String      // Every element in the array is of String type
      },
      enemyList: {
          default: [],
          type: Fire.Entity   // Every element in the array is of Entity type
      }
</code></pre>
</li>
</ul>
<h3 id="Shortcut_of_Property_Definition">Shortcut of Property Definition</h3><p>Property definition can be like this, if it holds no attributes:</p>
<pre><code class="js">    // Complete form
    properties: {                   // Shortcut form
        width: {            =&gt;      properties: {
            default: 128    =&gt;          width: 128
        }                   =&gt;      }
    }
</code></pre>
<p>But <strong>the default value MUST NOT be an object type</strong>. Properties with an object value can only be defined with the complete form:</p>
<pre><code class="js">    properties: {
        position: {
            default: new Fire.Vec2()
        }
    }
</code></pre>
<p><strong>Note</strong></p>
<ul>
<li>Properties can be inherited, but those defined in inherited class must choose a name unused in base class.</li>
<li><p>If the property default value cannot be retrieved without calling other methods, think about assigning them in the constructor.</p>
<pre><code class="js">  var Sprite = Fire.Class({
      constructor: function () {
          this.img = LoadImage();
      },
      properties: {
          img: null
      }
  });
</code></pre>
</li>
</ul>
<h2 id="GetSet_Methods">GetSet Methods</h2><p>Once <code>get</code> or <code>set</code> is set in a property, the pre-defined methods will be called as soon as the property is accessed.</p>
<h3 id="get"><code>get</code></h3><p>To define the <code>get</code> method of a property:</p>
<pre><code class="js">    properties: {
        width: {
            get: function () {
                return this.__width;
            }
        }
    }
</code></pre>
<p><code>get</code> can return any type of value.<br>Property with <code>get</code> is displayed as well in the Inspector Panel, and is accessible anywhere, including the constructor.</p>
<pre><code class="js">    var Sprite = Fire.Class({
        constructor: function () {
            this.__width = 128;
            console.log(this.width);    // 128
        },
        properties: {
            width: {
                get: function () {
                    return this.__width;
                }
            }
        }
    });
</code></pre>
<p>Please note:</p>
<ul>
<li><p>Once <code>get</code> is assgined, the property will not be able to serialize, nor to use a default value. The good new is that it can use any attribute besides <code>default</code> and <code>serializable</code>.</p>
<pre><code class="js">      width: {
          get: function () {
              return this.__width;
          },
          type: Fire.Integer,
          tooltip: &quot;The width of sprite&quot;
      }
</code></pre>
</li>
<li><p><code>get</code> is a read-only property, not the object it returns. User can modify properties inside the returned object by code. For instance:</p>
<pre><code class="js">  var Sprite = Fire.Class({
      ...
      position: {
          get: function () {
              return this.__position;
          },
      }
      ...
  });
  var obj = new Sprite();
  obj.position = new Fire.Vec2(10, 20);   // Error! The position property is read-only!
  obj.position.x = 100;                   // Ok! The object position itself can be modified!
</code></pre>
</li>
</ul>
<h3 id="set"><code>set</code></h3><p>To define the <code>set</code> method in a property:</p>
<pre><code class="js">    width: {
        set: function (value) {
            this.__width = value;
        }
    }
</code></pre>
<p><code>set</code> accepts a parameter, which can be of any type.<br><code>set</code> can be used with <code>get</code> together:</p>
<pre><code class="js">    width: {
        get: function () {
            return this.__width;
        },
        set: function (value) {
            this.__width = value;
        },
        type: Fire.Integer,
        tooltip: &quot;The width of sprite&quot;
    }
</code></pre>
<p>Please note:</p>
<ul>
<li>If <code>set</code> is defined without a <code>get</code>, the property cannot have any other attributes.</li>
<li>A property with <code>set</code> cannot be serialized nor have default value, as well as having <code>get</code> attribute.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>All **Note** parts are advanced skills, which can be skipped if you are a beginner.
</code></pre><p><code>Fire.Class</code> decla]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[类型定义]]></title>
    <link href="http://docs.fireball-x.com/undefined/"/>
    <id>http://docs.fireball-x.com/undefined/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<pre><code>本文档对应的实现代码在 core/src/class.js
所有“备注”都属于进阶内容，初学者不需要了解。
</code></pre><p>Fireball 的数据类型(Class)使用 <strong>Fire.define</strong> 进行定义，以便简化继承、支持序列化、定义属性等。为了方便区分，这些类叫做 <strong>FireClass</strong>。</p>
<h2 id="定义FireClass"><a name="define"></a>定义FireClass</h2><ul>
<li><p>FireClass 其实就是一个特殊的 JavaScript 构造函数，通过调用 <strong>Fire.define</strong> 来定义。</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;);
</code></pre>
<p>以上代码定义了一个名为 ‘Sprite’ 的 FireClass，并且赋给 Sprite 变量。’Sprite’ 这个名字即是类名又是类型ID，将会用于序列化等场合。</p>
</li>
<li><p><strong>实例化</strong>时采用</p>
<pre><code class="js">  var obj = new Sprite();  // 和 JavaScript 一样
</code></pre>
</li>
<li><p>Fire.define 的第二个参数是<strong>构造函数</strong>，构造函数将在每个实例 new 出来时调用，用于初始对象。构造函数<strong>不允许定义构造参数</strong>。</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, function () {
      console.log(this instanceof Sprite);
  });
  // 调用
  var obj = new Sprite();
  // true
</code></pre>
</li>
<li><p>备注：</p>
<ul>
<li>类名可以是任意字符串，不允许重复。可以使用 Fire.getClassName 来获得类名，使用 Fire.getClassByName 可用类名查找出对应的类。</li>
<li>进阶开发者如果确实需要使用构造参数，可以利用 arguments 获取。但如果这个类需要序列化，必须保证构造参数都缺省的情况下仍然能 new 出对象。</li>
</ul>
</li>
</ul>
<h2 id="成员"><a name="member"></a>成员</h2><ul>
<li><p><strong>成员变量</strong>请统一在构造函数中定义。</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, function () {
      // 声明成员变量并赋初始值
      this.url = &quot;&quot;;
      this.id = 0;
  });
  // 调用
  var obj = new Sprite();
  obj.url = &#39;img/fb.png&#39;;
  obj.id = 1;
</code></pre>
</li>
<li><p>和 JavaScript 一样，<strong>实例方法</strong>请在 prototype 上定义：</p>
<pre><code class="js">  // 实例方法
  Sprite.prototype.load = function () {
      // load this.url
  };
</code></pre>
</li>
<li><p>和 JavaScript 一样，<strong>静态变量</strong>或<strong>静态方法</strong>请直接添加到 FireClass：</p>
<pre><code class="js">  // 静态变量
  Sprite.count = 0;
  // 静态方法
  Sprite.getBounds = function (spriteList) {
      // do get bounds ...
  };
</code></pre>
</li>
<li><p>完整代码如下</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, function () {
      this.url = &quot;&quot;;    // 声明成员变量
      this.id = Sprite.count;      // 访问静态变量
      ++Sprite.count;
  });

  // 静态变量
  Sprite.count = 0;

  // 静态方法
  Sprite.getBounds = function (spriteList) {
      // do get bounds ...
  };

  // 实例方法
  Sprite.prototype.load = function () {
      // do load this.url
  };

  // 实例化
  var obj = new Sprite();
  obj.url = &#39;img/fb.png&#39;;

  // 访问成员变量
  obj.url = &#39;www/&#39; + obj.url;
  // 调用实例方法
  obj.load();
  // 调用静态方法
  obj.getBounds([obj]);
</code></pre>
</li>
<li><p>备注：</p>
<ul>
<li>所有实例和静态成员都将被子类继承。</li>
<li>如果不希望静态成员被子类继承，可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a> 声明：<pre><code class="js">Object.defineProperty(Sprite, &#39;getBounds&#39;, {
    value: function (spriteList) {
        // do get bounds ...
    },
    writable: true,
    enumerable: false
});
</code></pre>
</li>
<li><p>如果要定义<strong>私有</strong>成员，不建议在 Sprite 上声明，建议用闭包(Closure)实现。</p>
<pre><code class="js">// 私有实例方法
var loadSprite = function (self) {
    // do load ...
};
Sprite.prototype.load = function () {
    loadSprite(this);
};

// 私有静态变量
var debug = false;

// 私有静态方法
var getBound = function (spriteList) {
    // do get bound...
};
Sprite.getBounds = function (spriteList) {
    if (debug) {
        getBound(spriteList);
    }
};
</code></pre>
</li>
<li>这里所说的<code>实例成员</code>(instance member)包含了<code>成员变量</code>(member variable)和<code>实例方法</code>(instance method)。</li>
<li>这里所说的<code>静态成员</code>(static member)包含了<code>静态变量</code>(static variable)和<code>静态方法</code>(static method)。</li>
</ul>
</li>
</ul>
<h2 id="继承"><a name="inherit"></a>继承</h2><ul>
<li><p>使用 <strong>Fire.extend</strong> 来进行继承，第一个参数是子类的类名，第二个参数是父类。</p>
<pre><code class="js">  var Node = Fire.define(&#39;Node&#39;);
  var Sprite = Fire.extend(&#39;Sprite&#39;, Node);    // inherit
  var obj = new Sprite();    // test
  console.log(sprite instanceof Node);    // true
</code></pre>
</li>
<li><p>Fire.extend 允许传入第三个参数作为子类的构造函数。</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, Node, function () {
      this.url = &quot;&quot;;
  });
</code></pre>
</li>
<li><p>父构造函数</p>
<ul>
<li>不论子类的构造函数是否有提供，父类的构造函数都会被自动先调用。<pre><code class="js">var Node = Fire.define(&#39;Node&#39;, function () {
    this.name = &quot;a node&quot;;
    this.id = 1;
});
var Sprite = Fire.define(&#39;Sprite&#39;, Node, function () {
    console.log(this.name);    // &quot;node&quot;
    console.log(this.id);      // 1
    this.name = &quot;a sprite&quot;;
});
var obj = new Sprite(250);
console.log(obj.name === &quot;a sprite&quot;);    // true
</code></pre>
</li>
</ul>
</li>
<li><p>重载 (TODO)</p>
</li>
<li><p>FireClass 提供了 <code>$super</code> 这个静态变量，保存了对父类的引用。因此父类也可以用 $super 代替：</p>
<pre><code class="js">  var Sprite = Fire.extend(&#39;Sprite&#39;, Node);
  Sprite.prototype.draw = function () {
      console.log(&#39;before draw&#39;);
      Sprite.$super.prototype.draw.call(this);
      console.log(&#39;after draw&#39;);
  };
</code></pre>
</li>
<li><p>Fire 提供了 <code>isChildClassOf</code> 用于判断继承，例如：  </p>
<pre><code class="js">  var Texture = Fire.define(&#39;Texture&#39;);
  var Texture2D = Fire.extend(&#39;Texture2D&#39;, Texture);
  var result = Fire.isChildClassOf(Texture2D, Texture);   // 传入参数是类 constructor 本身而不是实例。
</code></pre>
<p>  <strong>注意</strong>: <code>isChildClassOf</code> 也包含两个类相等的情况，以下代码返回 true：</p>
<pre><code class="js">  Fire.isChildClassOf(Texture2D, Texture2D);
</code></pre>
<p>  而它们的实例，可以用 <code>instanceof</code> 来判断：</p>
<pre><code class="js">  var tex = new Texture2D();
  var result = tex instanceof Texture;    // true
</code></pre>
</li>
<li><p>备注：</p>
<ul>
<li>当你希望子类仅仅是原始的 JavaScript 构造函数，而不是 FireClass 时，你应该调用的是 Fire.JS.extend 而不是 Fire.extend。Fire.JS.extend 更加底层，只是实现最基本的继承，详细用法请查看相关 api。</li>
</ul>
</li>
</ul>
<h2 id="属性(Property)"><a name="property"></a>属性(Property)</h2><p>FireClass 提供了 <strong>prop</strong> 方法用于声明属性(property)。属性是特殊的成员变量，能够显示在 Inspector 中，也能被序列化。</p>
<ul>
<li><p>prop 需要两个参数，一是属性变量名，二是属性的默认值，默认值可以是任意类型。  </p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;);
  Sprite.prop(&#39;width&#39;, 128);
</code></pre>
<p>以上代码定义了 width 属性，width 将显示在 Inspector，保存时也将被序列化。</p>
</li>
<li><p>FireClass 在实例化前将自动添加属性到成员变量，可以在包括构造函数在内的代码里直接访问。</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, function () {
      console.log(this.width);    // 128
  });
  Sprite.prop(&#39;width&#39;, 128);
  Sprite.prototype.getWidth = function () {
      return this.width;
  };
</code></pre>
</li>
<li><p>每个属性可附带任意多个<strong>参数</strong>(Attribute)，用于指定在 Inspector 中的显示方式、序列化方式等。详细的属性列表，请查阅有关文档(TODO)。</p>
<pre><code class="js">  Sprite.prop(&#39;width&#39;, 128, Fire.Integer, Fire.Tooltip(&#39;The width of sprite&#39;));
</code></pre>
<p>以上代码规定了 width 在 Inspector 里只能输入整数，并且当鼠标移到参数上时，显示对应说明。</p>
</li>
<li><p>属性默认情况下都会被序列化，<strong>也会</strong>在 Inspector 中显示。</p>
<ul>
<li>如果只想序列化，但不想显示在 Inspector，可以添加 <code>Fire.HideInInspector</code> 参数。<br><code>Sprite.prop(&#39;id&#39;, 0, Fire.HideInInspector);</code></li>
<li>如果不想序列化，只想显示在 Inspector，可以添加 <code>Fire.NonSerialized</code> 参数。<br><code>Sprite.prop(&#39;url&#39;, 0, Fire.NonSerialized);</code></li>
<li>如果不想序列化，也不想显示在 Inspector，可以同时传入 Fire.NonSerialized 和 Fire.HideInInspector。也可以干脆不用属性，直接在构造函数里定义的变量即可。</li>
</ul>
</li>
<li><p>属性都能被继承，但子类和父类的属性不能重名。</p>
</li>
<li><p>备注：</p>
<ul>
<li>如果属性的默认值需要调用其它方法才能获得，可以在构造函数里重新赋值。<pre><code class="js">var Sprite = Fire.define(&#39;Sprite&#39;, function () {
    this.img = LoadImage();
});
Sprite.prop(&#39;img&#39;, null);
</code></pre>
</li>
<li>FireClass 的所有接口都支持链式调用：<pre><code class="js">var Sprite = Fire.extend(&#39;Sprite&#39;, Node, function () {
                      this.id = 0;
                  })
                 .prop(&#39;width&#39;, 128, Fire.Integer, Fire.Tooltip(&#39;The width of sprite&#39;))
                 .prop(&#39;img&#39;, null)
                 .get(&#39;color&#39;, function () {
                      return this._color;
                  });
</code></pre>
</li>
<li>实际上如果要显示在 Inspector，需要定义的是 Component，并且添加到 Entity 上。</li>
</ul>
</li>
</ul>
<h2 id="访问器"><a name="accessor"></a>访问器</h2><p>访问器(Accessor)就是 <strong>getter</strong> 或 <strong>setter</strong>。在 JavaScript 中，可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a> 声明访问器。  </p>
<p>FireClass 另外封装了定义访问器的接口，这些接口和<code>prop</code>类似，用于在 Inspector 中显示指定值，但这些值不会被序列化。</p>
<ul>
<li><p>FireClass 提供了 <strong>get</strong> 方法用于声明一个 getter。<br>它的第一个参数是变量名，第二个是获取时调用的方法，该方法可以返回任意类型的值。  </p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;);
  Sprite.get(&#39;width&#39;, function () {
      return 128;
  });
</code></pre>
<p>以上代码定义了 width 的 getter，getter 可以在包括构造函数在内的代码里直接访问：</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, function () {
      this._width = 128;
      console.log(this.width);    // 128
  });
  Sprite.get(&#39;width&#39;, function () {
      return this._width;
  });
  var obj = new Sprite();
  console.log(obj.width);    // 128
</code></pre>
<p>和 <code>prop</code> 一样，get 可附加任意多个参数，用于指定在 Inspector 中的显示方式。</p>
<pre><code class="js">  Sprite.get(&#39;width&#39;, function () {
      return this._width;
  }, Fire.Integer, Fire.Tooltip(&#39;The width of sprite&#39;));
</code></pre>
<p>以上代码规定了 width 在 Inspector 里只能输入整数(如果有 setter 的话)，并且当鼠标移到参数上时，显示对应说明。  </p>
</li>
<li><p><strong>set</strong><br>set 方法和 get 类似，它的第一个参数是变量名，第二个是设置时调用的方法，该方法可以传入一个任意类型的参数。<br>set 方法不能附加任何参数，如果需要，请把参数加到相应的 get 方法。如果没有对应的 get，则不在 Inspector 中显示。</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, ...);
  Sprite.get(&#39;width&#39;, function () {
      return this._width;
  }, Fire.Integer);
  Sprite.set(&#39;width&#39;, function (value) {
      this._width = value;
  });
</code></pre>
</li>
<li><p><strong>getset</strong><br>可使用 getset 简化 get 和 set 调用</p>
<pre><code class="js">  var Sprite = Fire.define(&#39;Sprite&#39;, ...);
  Sprite.getset(&#39;width&#39;,
      function () {
          return this._width;
      },
      function (value) {
          this._width = value;
      },
      Fire.Integer);
</code></pre>
</li>
<li><p>访问器不能和属性(prop)重名。</p>
</li>
<li><p>访问器都能被继承，但子类和父类的访问器不能重名。</p>
</li>
<li><p>备注：</p>
<ul>
<li>如果访问器附带了<code>Fire.HideInInspector</code>参数，则不在 Inspector 中显示，但仍然能从代码访问。</li>
<li>如果一个 getter 没有相应的 setter，则在 Inspector 中是只读的，但它如果是对象或数组，内部的字段仍然可修改。</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>本文档对应的实现代码在 core/src/class.js
所有“备注”都属于进阶内容，初学者不需要了解。
</code></pre><p>Fireball 的数据类型(Class)使用 <strong>Fire.define</strong> 进行定义，以]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Attributes]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/scripting/attributes/"/>
    <id>http://docs.fireball-x.com/0.4/manual/scripting/attributes/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Inspector-related_Attributes">Inspector-related Attributes</h2><p>The following attributes are allowed to be used with <code>get</code> method.</p>
<table>
<thead>
<tr>
<th>Attribute Name</th>
<th>Description</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/manual/scripting/class#type">type</a></td>
<td>Constrain the value type of the property（<a href="/manual/scripting/class#type">Example</a>）</td>
<td style="text-align:center">(Any)</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td><a href="/manual/scripting/class#visible">visible</a></td>
<td>Show/hide the property in the Inspector Panel</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center"><em>(1)</em></td>
</tr>
<tr>
<td>displayName</td>
<td>Use a specified name for the property in the Inspector Panel</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>tooltip</td>
<td>Display a tooltip for the property in the Inspector Panel</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>multiline</td>
<td>Edit the property with a multi-line text input control in the Inspector Panel</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>readonly</td>
<td>Make the property read-only in the Inspector Panel</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>nullable</td>
<td>Attach a checkbox in front of the property’s edit control</td>
<td style="text-align:center">{ propName: string, default: boolean }</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>watch</td>
<td>Watch other properties’ status to refresh this UI control</td>
<td style="text-align:center">{ “prop names”: function (this, uiCtrl) {} }</td>
<td style="text-align:center">undefined</td>
</tr>
<tr>
<td>range</td>
<td>Constrain the min and max values for the property by a slider control</td>
<td style="text-align:center">[min, max]</td>
<td style="text-align:center">undefined</td>
</tr>
</tbody>
</table>
<p><em>(1) The default value of <code>visible</code> depends on the property name. The default value is <code>false</code> if the property name starts with an underscore(“_”), while being <code>true</code> if not.</em></p>
<h2 id="Serialization-related_Attributes">Serialization-related Attributes</h2><p>The following attributes are not allowed to be used with <code>get</code> method</p>
<table>
<thead>
<tr>
<th>Attribute Name</th>
<th>Description</th>
<th style="text-align:center">Type</th>
<th style="text-align:center">Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="/manual/scripting/class#serializable">serializable</a></td>
<td>Decide if the property is allowed to serialize</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td>editorOnly</td>
<td>Remove the property before exporting the project</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td>rawType</td>
<td>The property is of a native type of the hosting platform</td>
<td style="text-align:center">string</td>
<td style="text-align:center">undefined</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Inspector-related_Attributes">Inspector-related Attributes</h2><p>The following attributes are allowed to be used with <code>get</co]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Plugin Configuration]]></title>
    <link href="http://docs.fireball-x.com/0.4/manual/plugin/config-package-json/"/>
    <id>http://docs.fireball-x.com/0.4/manual/plugin/config-package-json/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>TODO:</p>
<h2 id="Options">Options</h2><ul>
<li>fireball<ul>
<li><code>main</code> String - Main entrance function</li>
<li><code>menus</code> Array - Menu array<ul>
<li><code>path</code> String - Menu path</li>
<li><code>message</code> String - Triggered message</li>
</ul>
</li>
<li><code>panels</code> Object - Panel information list<ul>
<li><code>panel</code> Object - Using panel’s alias as the key<ul>
<li><code>type</code> String - Type of panel. Optional values are: <code>float</code>, <code>dockable</code>, <code>fixed-size</code></li>
<li><code>page</code> String - Index page. If <code>page</code> is set, the value of <code>view</code> will be ignored.</li>
<li><code>view</code> String - Content of the panel</li>
<li><code>title</code> String - Title shown in the panel’s title bar</li>
<li><code>width</code> Integer - Width of the panel</li>
<li><code>height</code> Integer - Height of the panel</li>
<li><code>min-width</code> Integer - Minimum width of the panel</li>
<li><code>min-height</code> Integer - Minimum height of the panel</li>
<li><code>max-width</code> Integer - Maximum width of the panel</li>
<li><code>max-height</code> Integer - Maximum height of the panel</li>
<li><code>messages</code> Object - The list of the binding between Panel messages and DOM message. The data structure is as: <code>{ key: &quot;ipc message&quot;, value: &quot;DOM message&quot;}</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>TODO:</p>
<h2 id="Options">Options</h2><ul>
<li>fireball<ul>
<li><code>main</code> String - Main entrance function</li>
<li><code>menus</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fireball 0.4 Documentation]]></title>
    <link href="http://docs.fireball-x.com/0.4/"/>
    <id>http://docs.fireball-x.com/0.4/</id>
    <published>2015-09-01T10:01:15.000Z</published>
    <updated>2015-09-01T10:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>We refactored Fireball to make it compatible with engine APIs, thus newer Fireball version (^0.5) is not compatible with Fireball 0.4 and below. Here are the old documentation of Fireball 0.4:</p>
<h2 id="Get-Started">Get-Started</h2><ul>
<li><a href="/0.4/manual/start/get-fireball">Get Fireball</a></li>
<li><a href="/0.4/manual/start/new-project">New Project</a></li>
<li><a href="/0.4/manual/start/editor-overview">Editor Overview</a></li>
<li><a href="/0.4/manual/start/from-unity">From Unity</a></li>
</ul>
<h2 id="Scripting">Scripting</h2><ul>
<li><a href="/0.4/manual/scripting/javascript-primer">JavaScript Primer</a></li>
<li><a href="/0.4/manual/scripting/component">Component Overview</a></li>
<li><a href="/0.4/manual/scripting/component/access">Component Access</a></li>
<li><a href="/0.4/manual/scripting/component/callbacks">Component Callbacks</a></li>
<li><a href="/0.4/manual/scripting/create-destroy-entities">Create and Destroy</a></li>
<li><a href="/0.4/manual/scripting/time">Time and Framerate</a></li>
<li><a href="/0.4/manual/scripting/class">Define Class</a></li>
<li><a href="/0.4/manual/scripting/attributes">Attributes</a></li>
<li><a href="/0.4/manual/scripting/input">Input</a></li>
<li><a href="/0.4/manual/scripting/module">Module</a></li>
<li><a href="/0.4/manual/scripting/input-events">Appendix - Input Events</a></li>
<li><a href="/0.4/manual/scripting/reserved-words">Appendix - Reserved-Words</a></li>
</ul>
<h2 id="Plugin">Plugin</h2><ul>
<li><a href="/0.4/manual/plugin/config-package-json">Plugin Configuration</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>We refactored Fireball to make it compatible with engine APIs, thus newer Fireball version (^0.5) is not compatible with Fireball 0.4 and]]>
    </summary>
    
  </entry>
  
</feed>